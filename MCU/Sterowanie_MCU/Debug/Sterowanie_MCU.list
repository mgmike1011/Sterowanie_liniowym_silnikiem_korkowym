
Sterowanie_MCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004608  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080047d0  080047d0  000147d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047e8  080047e8  000200a4  2**0
                  CONTENTS
  4 .ARM          00000008  080047e8  080047e8  000147e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080047f0  080047f0  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047f0  080047f0  000147f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047f4  080047f4  000147f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  080047f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d4  200000a4  0800489c  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000278  0800489c  00020278  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010c3f  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021fa  00000000  00000000  00030d13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d80  00000000  00000000  00032f10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c98  00000000  00000000  00033c90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026307  00000000  00000000  00034928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010fb3  00000000  00000000  0005ac2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ef94d  00000000  00000000  0006bbe2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015b52f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037a0  00000000  00000000  0015b580  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200000a4 	.word	0x200000a4
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080047b8 	.word	0x080047b8

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200000a8 	.word	0x200000a8
 8000204:	080047b8 	.word	0x080047b8

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b974 	b.w	8000508 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468e      	mov	lr, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14d      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000246:	428a      	cmp	r2, r1
 8000248:	4694      	mov	ip, r2
 800024a:	d969      	bls.n	8000320 <__udivmoddi4+0xe8>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b152      	cbz	r2, 8000268 <__udivmoddi4+0x30>
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	f1c2 0120 	rsb	r1, r2, #32
 800025a:	fa20 f101 	lsr.w	r1, r0, r1
 800025e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000262:	ea41 0e03 	orr.w	lr, r1, r3
 8000266:	4094      	lsls	r4, r2
 8000268:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800026c:	0c21      	lsrs	r1, r4, #16
 800026e:	fbbe f6f8 	udiv	r6, lr, r8
 8000272:	fa1f f78c 	uxth.w	r7, ip
 8000276:	fb08 e316 	mls	r3, r8, r6, lr
 800027a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027e:	fb06 f107 	mul.w	r1, r6, r7
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f106 30ff 	add.w	r0, r6, #4294967295
 800028e:	f080 811f 	bcs.w	80004d0 <__udivmoddi4+0x298>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 811c 	bls.w	80004d0 <__udivmoddi4+0x298>
 8000298:	3e02      	subs	r6, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a5b      	subs	r3, r3, r1
 800029e:	b2a4      	uxth	r4, r4
 80002a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a4:	fb08 3310 	mls	r3, r8, r0, r3
 80002a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ac:	fb00 f707 	mul.w	r7, r0, r7
 80002b0:	42a7      	cmp	r7, r4
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x92>
 80002b4:	eb1c 0404 	adds.w	r4, ip, r4
 80002b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002bc:	f080 810a 	bcs.w	80004d4 <__udivmoddi4+0x29c>
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	f240 8107 	bls.w	80004d4 <__udivmoddi4+0x29c>
 80002c6:	4464      	add	r4, ip
 80002c8:	3802      	subs	r0, #2
 80002ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ce:	1be4      	subs	r4, r4, r7
 80002d0:	2600      	movs	r6, #0
 80002d2:	b11d      	cbz	r5, 80002dc <__udivmoddi4+0xa4>
 80002d4:	40d4      	lsrs	r4, r2
 80002d6:	2300      	movs	r3, #0
 80002d8:	e9c5 4300 	strd	r4, r3, [r5]
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d909      	bls.n	80002fa <__udivmoddi4+0xc2>
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	f000 80ef 	beq.w	80004ca <__udivmoddi4+0x292>
 80002ec:	2600      	movs	r6, #0
 80002ee:	e9c5 0100 	strd	r0, r1, [r5]
 80002f2:	4630      	mov	r0, r6
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	fab3 f683 	clz	r6, r3
 80002fe:	2e00      	cmp	r6, #0
 8000300:	d14a      	bne.n	8000398 <__udivmoddi4+0x160>
 8000302:	428b      	cmp	r3, r1
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xd4>
 8000306:	4282      	cmp	r2, r0
 8000308:	f200 80f9 	bhi.w	80004fe <__udivmoddi4+0x2c6>
 800030c:	1a84      	subs	r4, r0, r2
 800030e:	eb61 0303 	sbc.w	r3, r1, r3
 8000312:	2001      	movs	r0, #1
 8000314:	469e      	mov	lr, r3
 8000316:	2d00      	cmp	r5, #0
 8000318:	d0e0      	beq.n	80002dc <__udivmoddi4+0xa4>
 800031a:	e9c5 4e00 	strd	r4, lr, [r5]
 800031e:	e7dd      	b.n	80002dc <__udivmoddi4+0xa4>
 8000320:	b902      	cbnz	r2, 8000324 <__udivmoddi4+0xec>
 8000322:	deff      	udf	#255	; 0xff
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	2a00      	cmp	r2, #0
 800032a:	f040 8092 	bne.w	8000452 <__udivmoddi4+0x21a>
 800032e:	eba1 010c 	sub.w	r1, r1, ip
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2601      	movs	r6, #1
 800033c:	0c20      	lsrs	r0, r4, #16
 800033e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000342:	fb07 1113 	mls	r1, r7, r3, r1
 8000346:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800034a:	fb0e f003 	mul.w	r0, lr, r3
 800034e:	4288      	cmp	r0, r1
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x12c>
 8000352:	eb1c 0101 	adds.w	r1, ip, r1
 8000356:	f103 38ff 	add.w	r8, r3, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x12a>
 800035c:	4288      	cmp	r0, r1
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2c0>
 8000362:	4643      	mov	r3, r8
 8000364:	1a09      	subs	r1, r1, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb1 f0f7 	udiv	r0, r1, r7
 800036c:	fb07 1110 	mls	r1, r7, r0, r1
 8000370:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x156>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 31ff 	add.w	r1, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x154>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2ca>
 800038c:	4608      	mov	r0, r1
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000396:	e79c      	b.n	80002d2 <__udivmoddi4+0x9a>
 8000398:	f1c6 0720 	rsb	r7, r6, #32
 800039c:	40b3      	lsls	r3, r6
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa20 f407 	lsr.w	r4, r0, r7
 80003aa:	fa01 f306 	lsl.w	r3, r1, r6
 80003ae:	431c      	orrs	r4, r3
 80003b0:	40f9      	lsrs	r1, r7
 80003b2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ba:	fbb1 f8f9 	udiv	r8, r1, r9
 80003be:	0c20      	lsrs	r0, r4, #16
 80003c0:	fa1f fe8c 	uxth.w	lr, ip
 80003c4:	fb09 1118 	mls	r1, r9, r8, r1
 80003c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003cc:	fb08 f00e 	mul.w	r0, r8, lr
 80003d0:	4288      	cmp	r0, r1
 80003d2:	fa02 f206 	lsl.w	r2, r2, r6
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b8>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2bc>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2bc>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4461      	add	r1, ip
 80003f0:	1a09      	subs	r1, r1, r0
 80003f2:	b2a4      	uxth	r4, r4
 80003f4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f8:	fb09 1110 	mls	r1, r9, r0, r1
 80003fc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000400:	fb00 fe0e 	mul.w	lr, r0, lr
 8000404:	458e      	cmp	lr, r1
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1e2>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2b4>
 8000412:	458e      	cmp	lr, r1
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2b4>
 8000416:	3802      	subs	r0, #2
 8000418:	4461      	add	r1, ip
 800041a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041e:	fba0 9402 	umull	r9, r4, r0, r2
 8000422:	eba1 010e 	sub.w	r1, r1, lr
 8000426:	42a1      	cmp	r1, r4
 8000428:	46c8      	mov	r8, r9
 800042a:	46a6      	mov	lr, r4
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x2a4>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x2a0>
 8000430:	b15d      	cbz	r5, 800044a <__udivmoddi4+0x212>
 8000432:	ebb3 0208 	subs.w	r2, r3, r8
 8000436:	eb61 010e 	sbc.w	r1, r1, lr
 800043a:	fa01 f707 	lsl.w	r7, r1, r7
 800043e:	fa22 f306 	lsr.w	r3, r2, r6
 8000442:	40f1      	lsrs	r1, r6
 8000444:	431f      	orrs	r7, r3
 8000446:	e9c5 7100 	strd	r7, r1, [r5]
 800044a:	2600      	movs	r6, #0
 800044c:	4631      	mov	r1, r6
 800044e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000452:	f1c2 0320 	rsb	r3, r2, #32
 8000456:	40d8      	lsrs	r0, r3
 8000458:	fa0c fc02 	lsl.w	ip, ip, r2
 800045c:	fa21 f303 	lsr.w	r3, r1, r3
 8000460:	4091      	lsls	r1, r2
 8000462:	4301      	orrs	r1, r0
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000470:	fb07 3610 	mls	r6, r7, r0, r3
 8000474:	0c0b      	lsrs	r3, r1, #16
 8000476:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800047a:	fb00 f60e 	mul.w	r6, r0, lr
 800047e:	429e      	cmp	r6, r3
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x260>
 8000486:	eb1c 0303 	adds.w	r3, ip, r3
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b8>
 8000490:	429e      	cmp	r6, r3
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b8>
 8000494:	3802      	subs	r0, #2
 8000496:	4463      	add	r3, ip
 8000498:	1b9b      	subs	r3, r3, r6
 800049a:	b289      	uxth	r1, r1
 800049c:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a0:	fb07 3316 	mls	r3, r7, r6, r3
 80004a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a8:	fb06 f30e 	mul.w	r3, r6, lr
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x28a>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 80004be:	3e02      	subs	r6, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	1ac9      	subs	r1, r1, r3
 80004c4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0x104>
 80004ca:	462e      	mov	r6, r5
 80004cc:	4628      	mov	r0, r5
 80004ce:	e705      	b.n	80002dc <__udivmoddi4+0xa4>
 80004d0:	4606      	mov	r6, r0
 80004d2:	e6e3      	b.n	800029c <__udivmoddi4+0x64>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6f8      	b.n	80002ca <__udivmoddi4+0x92>
 80004d8:	454b      	cmp	r3, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f8>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e4:	3801      	subs	r0, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f8>
 80004e8:	4646      	mov	r6, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x28a>
 80004ec:	4620      	mov	r0, r4
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1e2>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x260>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b8>
 80004f8:	3b02      	subs	r3, #2
 80004fa:	4461      	add	r1, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x12c>
 80004fe:	4630      	mov	r0, r6
 8000500:	e709      	b.n	8000316 <__udivmoddi4+0xde>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x156>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <Set_Resolution_A4988>:
 */
#include "A4988_Drive.h"
#include "math.h"
#include "main.h"
#include "stm32f7xx_hal.h"
void Set_Resolution_A4988(A4988_Drive* drive, int resolution){
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
 8000514:	6039      	str	r1, [r7, #0]
	//	Setting the resolution of the driver.
	//	@param resolution: Resolution.
	//	@param drive: Pointer to structure.
	//	@return: none
	//
	switch(resolution){
 8000516:	683b      	ldr	r3, [r7, #0]
 8000518:	3b01      	subs	r3, #1
 800051a:	2b04      	cmp	r3, #4
 800051c:	f200 809a 	bhi.w	8000654 <Set_Resolution_A4988+0x148>
 8000520:	a201      	add	r2, pc, #4	; (adr r2, 8000528 <Set_Resolution_A4988+0x1c>)
 8000522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000526:	bf00      	nop
 8000528:	0800053d 	.word	0x0800053d
 800052c:	08000575 	.word	0x08000575
 8000530:	080005ad 	.word	0x080005ad
 8000534:	080005e5 	.word	0x080005e5
 8000538:	0800061d 	.word	0x0800061d
		case FULL_STEP:
			HAL_GPIO_WritePin(*&(drive->PORT_MS1), drive->PIN_MS1, GPIO_PIN_RESET);
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	69d8      	ldr	r0, [r3, #28]
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000544:	2200      	movs	r2, #0
 8000546:	4619      	mov	r1, r3
 8000548:	f001 f9c2 	bl	80018d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(*&(drive->PORT_MS2), drive->PIN_MS2, GPIO_PIN_RESET);
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	6a18      	ldr	r0, [r3, #32]
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000554:	2200      	movs	r2, #0
 8000556:	4619      	mov	r1, r3
 8000558:	f001 f9ba 	bl	80018d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(*&(drive->PORT_MS3), drive->PIN_MS3, GPIO_PIN_RESET);
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000564:	2200      	movs	r2, #0
 8000566:	4619      	mov	r1, r3
 8000568:	f001 f9b2 	bl	80018d0 <HAL_GPIO_WritePin>
			drive->RESOLUTION = 1;
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	2201      	movs	r2, #1
 8000570:	631a      	str	r2, [r3, #48]	; 0x30
			break;
 8000572:	e08b      	b.n	800068c <Set_Resolution_A4988+0x180>
		case HALF_STEP:
			HAL_GPIO_WritePin(*&(drive->PORT_MS1), drive->PIN_MS1, GPIO_PIN_SET);
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	69d8      	ldr	r0, [r3, #28]
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800057c:	2201      	movs	r2, #1
 800057e:	4619      	mov	r1, r3
 8000580:	f001 f9a6 	bl	80018d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(*&(drive->PORT_MS2), drive->PIN_MS2, GPIO_PIN_RESET);
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	6a18      	ldr	r0, [r3, #32]
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800058c:	2200      	movs	r2, #0
 800058e:	4619      	mov	r1, r3
 8000590:	f001 f99e 	bl	80018d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(*&(drive->PORT_MS3), drive->PIN_MS3, GPIO_PIN_RESET);
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800059c:	2200      	movs	r2, #0
 800059e:	4619      	mov	r1, r3
 80005a0:	f001 f996 	bl	80018d0 <HAL_GPIO_WritePin>
			drive->RESOLUTION = 2;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	2202      	movs	r2, #2
 80005a8:	631a      	str	r2, [r3, #48]	; 0x30
			break;
 80005aa:	e06f      	b.n	800068c <Set_Resolution_A4988+0x180>
		case QUARTER_STEP:
			HAL_GPIO_WritePin(*&(drive->PORT_MS1), drive->PIN_MS1, GPIO_PIN_RESET);
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	69d8      	ldr	r0, [r3, #28]
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80005b4:	2200      	movs	r2, #0
 80005b6:	4619      	mov	r1, r3
 80005b8:	f001 f98a 	bl	80018d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(*&(drive->PORT_MS2), drive->PIN_MS2, GPIO_PIN_SET);
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	6a18      	ldr	r0, [r3, #32]
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80005c4:	2201      	movs	r2, #1
 80005c6:	4619      	mov	r1, r3
 80005c8:	f001 f982 	bl	80018d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(*&(drive->PORT_MS3), drive->PIN_MS3, GPIO_PIN_RESET);
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80005d4:	2200      	movs	r2, #0
 80005d6:	4619      	mov	r1, r3
 80005d8:	f001 f97a 	bl	80018d0 <HAL_GPIO_WritePin>
			drive->RESOLUTION = 4;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	2204      	movs	r2, #4
 80005e0:	631a      	str	r2, [r3, #48]	; 0x30
			break;
 80005e2:	e053      	b.n	800068c <Set_Resolution_A4988+0x180>
		case ONE_EIGHTH_STEP:
			HAL_GPIO_WritePin(*&(drive->PORT_MS1), drive->PIN_MS1, GPIO_PIN_SET);
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	69d8      	ldr	r0, [r3, #28]
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80005ec:	2201      	movs	r2, #1
 80005ee:	4619      	mov	r1, r3
 80005f0:	f001 f96e 	bl	80018d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(*&(drive->PORT_MS2), drive->PIN_MS2, GPIO_PIN_SET);
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	6a18      	ldr	r0, [r3, #32]
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80005fc:	2201      	movs	r2, #1
 80005fe:	4619      	mov	r1, r3
 8000600:	f001 f966 	bl	80018d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(*&(drive->PORT_MS3), drive->PIN_MS3, GPIO_PIN_RESET);
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800060c:	2200      	movs	r2, #0
 800060e:	4619      	mov	r1, r3
 8000610:	f001 f95e 	bl	80018d0 <HAL_GPIO_WritePin>
			drive->RESOLUTION = 8;
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	2208      	movs	r2, #8
 8000618:	631a      	str	r2, [r3, #48]	; 0x30
			break;
 800061a:	e037      	b.n	800068c <Set_Resolution_A4988+0x180>
		case ONE_SIXTEENTH_STEP:
			HAL_GPIO_WritePin(*&(drive->PORT_MS1), drive->PIN_MS1, GPIO_PIN_SET);
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	69d8      	ldr	r0, [r3, #28]
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000624:	2201      	movs	r2, #1
 8000626:	4619      	mov	r1, r3
 8000628:	f001 f952 	bl	80018d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(*&(drive->PORT_MS2), drive->PIN_MS2, GPIO_PIN_SET);
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	6a18      	ldr	r0, [r3, #32]
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000634:	2201      	movs	r2, #1
 8000636:	4619      	mov	r1, r3
 8000638:	f001 f94a 	bl	80018d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(*&(drive->PORT_MS3), drive->PIN_MS3, GPIO_PIN_SET);
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000644:	2201      	movs	r2, #1
 8000646:	4619      	mov	r1, r3
 8000648:	f001 f942 	bl	80018d0 <HAL_GPIO_WritePin>
			drive->RESOLUTION = 16;
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	2210      	movs	r2, #16
 8000650:	631a      	str	r2, [r3, #48]	; 0x30
			break;
 8000652:	e01b      	b.n	800068c <Set_Resolution_A4988+0x180>
		default:
			HAL_GPIO_WritePin(*&(drive->PORT_MS1), drive->PIN_MS1, GPIO_PIN_SET);
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	69d8      	ldr	r0, [r3, #28]
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800065c:	2201      	movs	r2, #1
 800065e:	4619      	mov	r1, r3
 8000660:	f001 f936 	bl	80018d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(*&(drive->PORT_MS2), drive->PIN_MS2, GPIO_PIN_SET);
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	6a18      	ldr	r0, [r3, #32]
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800066c:	2201      	movs	r2, #1
 800066e:	4619      	mov	r1, r3
 8000670:	f001 f92e 	bl	80018d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(*&(drive->PORT_MS3), drive->PIN_MS3, GPIO_PIN_SET);
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800067c:	2201      	movs	r2, #1
 800067e:	4619      	mov	r1, r3
 8000680:	f001 f926 	bl	80018d0 <HAL_GPIO_WritePin>
			drive->RESOLUTION = 16;
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	2210      	movs	r2, #16
 8000688:	631a      	str	r2, [r3, #48]	; 0x30
	}
}
 800068a:	bf00      	nop
 800068c:	bf00      	nop
 800068e:	3708      	adds	r7, #8
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}

08000694 <Set_Direction_A4988>:
void Set_Direction_A4988(A4988_Drive* drive, int direction){
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
 800069c:	6039      	str	r1, [r7, #0]
	//	Setting the direction of rotation.
	//	@param direction: 1 - Right, 2 - Left, default - Right.
	//	@param drive: Pointer to structure.
	//	@return: none
	//
	switch(direction){
 800069e:	683b      	ldr	r3, [r7, #0]
 80006a0:	2b01      	cmp	r3, #1
 80006a2:	d003      	beq.n	80006ac <Set_Direction_A4988+0x18>
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	2b02      	cmp	r3, #2
 80006a8:	d009      	beq.n	80006be <Set_Direction_A4988+0x2a>
 80006aa:	e011      	b.n	80006d0 <Set_Direction_A4988+0x3c>
		case 1:
			HAL_GPIO_WritePin(*&(drive->PORT_DIR), drive->PIN_DIR, GPIO_PIN_SET);
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	6958      	ldr	r0, [r3, #20]
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	8b1b      	ldrh	r3, [r3, #24]
 80006b4:	2201      	movs	r2, #1
 80006b6:	4619      	mov	r1, r3
 80006b8:	f001 f90a 	bl	80018d0 <HAL_GPIO_WritePin>
			break;
 80006bc:	e011      	b.n	80006e2 <Set_Direction_A4988+0x4e>
		case 2:
			HAL_GPIO_WritePin(*&(drive->PORT_DIR), drive->PIN_DIR, GPIO_PIN_RESET);
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	6958      	ldr	r0, [r3, #20]
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	8b1b      	ldrh	r3, [r3, #24]
 80006c6:	2200      	movs	r2, #0
 80006c8:	4619      	mov	r1, r3
 80006ca:	f001 f901 	bl	80018d0 <HAL_GPIO_WritePin>
			break;
 80006ce:	e008      	b.n	80006e2 <Set_Direction_A4988+0x4e>
		default:
			HAL_GPIO_WritePin(*&(drive->PORT_DIR), drive->PIN_DIR, GPIO_PIN_SET);
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	6958      	ldr	r0, [r3, #20]
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	8b1b      	ldrh	r3, [r3, #24]
 80006d8:	2201      	movs	r2, #1
 80006da:	4619      	mov	r1, r3
 80006dc:	f001 f8f8 	bl	80018d0 <HAL_GPIO_WritePin>
	}
}
 80006e0:	bf00      	nop
 80006e2:	bf00      	nop
 80006e4:	3708      	adds	r7, #8
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}

080006ea <Enable_A4988>:
void Enable_A4988(A4988_Drive* drive, int signal){
 80006ea:	b580      	push	{r7, lr}
 80006ec:	b082      	sub	sp, #8
 80006ee:	af00      	add	r7, sp, #0
 80006f0:	6078      	str	r0, [r7, #4]
 80006f2:	6039      	str	r1, [r7, #0]
	//	Enable controler.
	//	@param signal: ENABLE_DRIVE - 1, DISABLE_DRIVE - 2, default - disable.
	//	@param drive: Pointer to structure.
	//	@return: none
	//
	switch(signal){
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	2b01      	cmp	r3, #1
 80006f8:	d003      	beq.n	8000702 <Enable_A4988+0x18>
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	2b02      	cmp	r3, #2
 80006fe:	d009      	beq.n	8000714 <Enable_A4988+0x2a>
 8000700:	e011      	b.n	8000726 <Enable_A4988+0x3c>
		case ENABLE_DRIVE:
			HAL_GPIO_WritePin(*&(drive->PORT_ENABLE), drive->PIN_ENABLE, GPIO_PIN_RESET);
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800070a:	2200      	movs	r2, #0
 800070c:	4619      	mov	r1, r3
 800070e:	f001 f8df 	bl	80018d0 <HAL_GPIO_WritePin>
			break;
 8000712:	e011      	b.n	8000738 <Enable_A4988+0x4e>
		case DISABLE_DRIVE:
			HAL_GPIO_WritePin(*&(drive->PORT_ENABLE), drive->PIN_ENABLE, GPIO_PIN_SET);
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800071c:	2201      	movs	r2, #1
 800071e:	4619      	mov	r1, r3
 8000720:	f001 f8d6 	bl	80018d0 <HAL_GPIO_WritePin>
			break;
 8000724:	e008      	b.n	8000738 <Enable_A4988+0x4e>
		default:
			HAL_GPIO_WritePin(*&(drive->PORT_ENABLE), drive->PIN_ENABLE, GPIO_PIN_SET);
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800072e:	2201      	movs	r2, #1
 8000730:	4619      	mov	r1, r3
 8000732:	f001 f8cd 	bl	80018d0 <HAL_GPIO_WritePin>
	}
}
 8000736:	bf00      	nop
 8000738:	bf00      	nop
 800073a:	3708      	adds	r7, #8
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}

08000740 <Reset_A4988>:
void Reset_A4988(A4988_Drive* drive, int reset){
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
 8000748:	6039      	str	r1, [r7, #0]
	//	Reset controler.
	//	@param reset: ENABLE_DRIVE - 1, DISABLE_DRIVE - 2, default - disable.
	//	@param drive: Pointer to structure.
	//	@return: none
	//
	switch(reset){
 800074a:	683b      	ldr	r3, [r7, #0]
 800074c:	2b01      	cmp	r3, #1
 800074e:	d003      	beq.n	8000758 <Reset_A4988+0x18>
 8000750:	683b      	ldr	r3, [r7, #0]
 8000752:	2b02      	cmp	r3, #2
 8000754:	d00a      	beq.n	800076c <Reset_A4988+0x2c>
 8000756:	e013      	b.n	8000780 <Reset_A4988+0x40>
		case ENABLE_DRIVE:
			HAL_GPIO_WritePin(*&(drive->PORT_RESET), drive->PIN_RESET, GPIO_PIN_SET);
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000762:	2201      	movs	r2, #1
 8000764:	4619      	mov	r1, r3
 8000766:	f001 f8b3 	bl	80018d0 <HAL_GPIO_WritePin>
			break;
 800076a:	e013      	b.n	8000794 <Reset_A4988+0x54>
		case DISABLE_DRIVE:
			HAL_GPIO_WritePin(*&(drive->PORT_RESET), drive->PIN_RESET, GPIO_PIN_RESET);
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000776:	2200      	movs	r2, #0
 8000778:	4619      	mov	r1, r3
 800077a:	f001 f8a9 	bl	80018d0 <HAL_GPIO_WritePin>
			break;
 800077e:	e009      	b.n	8000794 <Reset_A4988+0x54>
		default:
			HAL_GPIO_WritePin(*&(drive->PORT_RESET), drive->PIN_RESET, GPIO_PIN_RESET);
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800078a:	2200      	movs	r2, #0
 800078c:	4619      	mov	r1, r3
 800078e:	f001 f89f 	bl	80018d0 <HAL_GPIO_WritePin>
	}
}
 8000792:	bf00      	nop
 8000794:	bf00      	nop
 8000796:	3708      	adds	r7, #8
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}

0800079c <Sleep_A4988>:
void Sleep_A4988(A4988_Drive* drive, int sleep){
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
 80007a4:	6039      	str	r1, [r7, #0]
	//	Enable sleep mode.
	//	@param sleep: ENABLE_DRIVE - 1, DISABLE_DRIVE - 2, default - disable.
	//	@param drive: Pointer to structure.
	//	@return: none
	//
	switch(sleep){
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	2b01      	cmp	r3, #1
 80007aa:	d003      	beq.n	80007b4 <Sleep_A4988+0x18>
 80007ac:	683b      	ldr	r3, [r7, #0]
 80007ae:	2b02      	cmp	r3, #2
 80007b0:	d00a      	beq.n	80007c8 <Sleep_A4988+0x2c>
 80007b2:	e013      	b.n	80007dc <Sleep_A4988+0x40>
		case ENABLE_DRIVE:
			HAL_GPIO_WritePin(*&(drive->PORT_SLEEP), drive->PIN_SLEEP, GPIO_PIN_SET);
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80007be:	2201      	movs	r2, #1
 80007c0:	4619      	mov	r1, r3
 80007c2:	f001 f885 	bl	80018d0 <HAL_GPIO_WritePin>
			break;
 80007c6:	e013      	b.n	80007f0 <Sleep_A4988+0x54>
		case DISABLE_DRIVE:
			HAL_GPIO_WritePin(*&(drive->PORT_SLEEP), drive->PIN_SLEEP, GPIO_PIN_RESET);
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80007d2:	2200      	movs	r2, #0
 80007d4:	4619      	mov	r1, r3
 80007d6:	f001 f87b 	bl	80018d0 <HAL_GPIO_WritePin>
			break;
 80007da:	e009      	b.n	80007f0 <Sleep_A4988+0x54>
		default:
			HAL_GPIO_WritePin(*&(drive->PORT_SLEEP), drive->PIN_SLEEP, GPIO_PIN_RESET);
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80007e6:	2200      	movs	r2, #0
 80007e8:	4619      	mov	r1, r3
 80007ea:	f001 f871 	bl	80018d0 <HAL_GPIO_WritePin>
	}
}
 80007ee:	bf00      	nop
 80007f0:	bf00      	nop
 80007f2:	3708      	adds	r7, #8
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <Init_A4988>:
		}else{
			__HAL_TIM_SET_COMPARE(&TIM_PWM_N,TIM_PWM_CHANNEL_N,0);
		}
	}
}
void Init_A4988(A4988_Drive* drive){
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
	//
	//	Initialize the drive.
	//	@param drive: Pointer to structure.
	//	@return: none
	//
	if(drive->NAME[0] == 'S'){
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	791b      	ldrb	r3, [r3, #4]
 8000804:	2b53      	cmp	r3, #83	; 0x53
 8000806:	d117      	bne.n	8000838 <Init_A4988+0x40>
		  HAL_TIM_Base_Start_IT(&TIM_STEPS_COUNTER_S);
 8000808:	4819      	ldr	r0, [pc, #100]	; (8000870 <Init_A4988+0x78>)
 800080a:	f002 f99d 	bl	8002b48 <HAL_TIM_Base_Start_IT>
		  Set_Resolution_A4988(drive, HALF_STEP);
 800080e:	2102      	movs	r1, #2
 8000810:	6878      	ldr	r0, [r7, #4]
 8000812:	f7ff fe7b 	bl	800050c <Set_Resolution_A4988>
		  Set_Direction_A4988(drive, RIGHT_DIR);
 8000816:	2101      	movs	r1, #1
 8000818:	6878      	ldr	r0, [r7, #4]
 800081a:	f7ff ff3b 	bl	8000694 <Set_Direction_A4988>
		  Enable_A4988(drive, ENABLE_DRIVE);
 800081e:	2101      	movs	r1, #1
 8000820:	6878      	ldr	r0, [r7, #4]
 8000822:	f7ff ff62 	bl	80006ea <Enable_A4988>
		  Reset_A4988(drive, ENABLE_DRIVE);
 8000826:	2101      	movs	r1, #1
 8000828:	6878      	ldr	r0, [r7, #4]
 800082a:	f7ff ff89 	bl	8000740 <Reset_A4988>
		  Sleep_A4988(drive, DISABLE_DRIVE);
 800082e:	2102      	movs	r1, #2
 8000830:	6878      	ldr	r0, [r7, #4]
 8000832:	f7ff ffb3 	bl	800079c <Sleep_A4988>
		Set_Direction_A4988(drive, RIGHT_DIR);
		Enable_A4988(drive, ENABLE_DRIVE);
		Reset_A4988(drive, ENABLE_DRIVE);
		Sleep_A4988(drive, DISABLE_DRIVE);
	}
}
 8000836:	e016      	b.n	8000866 <Init_A4988+0x6e>
		HAL_TIM_Base_Start_IT(&TIM_STEPS_COUNTER_N);
 8000838:	480e      	ldr	r0, [pc, #56]	; (8000874 <Init_A4988+0x7c>)
 800083a:	f002 f985 	bl	8002b48 <HAL_TIM_Base_Start_IT>
		Set_Resolution_A4988(drive, HALF_STEP);
 800083e:	2102      	movs	r1, #2
 8000840:	6878      	ldr	r0, [r7, #4]
 8000842:	f7ff fe63 	bl	800050c <Set_Resolution_A4988>
		Set_Direction_A4988(drive, RIGHT_DIR);
 8000846:	2101      	movs	r1, #1
 8000848:	6878      	ldr	r0, [r7, #4]
 800084a:	f7ff ff23 	bl	8000694 <Set_Direction_A4988>
		Enable_A4988(drive, ENABLE_DRIVE);
 800084e:	2101      	movs	r1, #1
 8000850:	6878      	ldr	r0, [r7, #4]
 8000852:	f7ff ff4a 	bl	80006ea <Enable_A4988>
		Reset_A4988(drive, ENABLE_DRIVE);
 8000856:	2101      	movs	r1, #1
 8000858:	6878      	ldr	r0, [r7, #4]
 800085a:	f7ff ff71 	bl	8000740 <Reset_A4988>
		Sleep_A4988(drive, DISABLE_DRIVE);
 800085e:	2102      	movs	r1, #2
 8000860:	6878      	ldr	r0, [r7, #4]
 8000862:	f7ff ff9b 	bl	800079c <Sleep_A4988>
}
 8000866:	bf00      	nop
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	2000010c 	.word	0x2000010c
 8000874:	200001a4 	.word	0x200001a4

08000878 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b08c      	sub	sp, #48	; 0x30
 800087c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087e:	f107 031c 	add.w	r3, r7, #28
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	605a      	str	r2, [r3, #4]
 8000888:	609a      	str	r2, [r3, #8]
 800088a:	60da      	str	r2, [r3, #12]
 800088c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800088e:	4b6b      	ldr	r3, [pc, #428]	; (8000a3c <MX_GPIO_Init+0x1c4>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a6a      	ldr	r2, [pc, #424]	; (8000a3c <MX_GPIO_Init+0x1c4>)
 8000894:	f043 0304 	orr.w	r3, r3, #4
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
 800089a:	4b68      	ldr	r3, [pc, #416]	; (8000a3c <MX_GPIO_Init+0x1c4>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f003 0304 	and.w	r3, r3, #4
 80008a2:	61bb      	str	r3, [r7, #24]
 80008a4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008a6:	4b65      	ldr	r3, [pc, #404]	; (8000a3c <MX_GPIO_Init+0x1c4>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	4a64      	ldr	r2, [pc, #400]	; (8000a3c <MX_GPIO_Init+0x1c4>)
 80008ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008b0:	6313      	str	r3, [r2, #48]	; 0x30
 80008b2:	4b62      	ldr	r3, [pc, #392]	; (8000a3c <MX_GPIO_Init+0x1c4>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ba:	617b      	str	r3, [r7, #20]
 80008bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008be:	4b5f      	ldr	r3, [pc, #380]	; (8000a3c <MX_GPIO_Init+0x1c4>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	4a5e      	ldr	r2, [pc, #376]	; (8000a3c <MX_GPIO_Init+0x1c4>)
 80008c4:	f043 0301 	orr.w	r3, r3, #1
 80008c8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ca:	4b5c      	ldr	r3, [pc, #368]	; (8000a3c <MX_GPIO_Init+0x1c4>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	f003 0301 	and.w	r3, r3, #1
 80008d2:	613b      	str	r3, [r7, #16]
 80008d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d6:	4b59      	ldr	r3, [pc, #356]	; (8000a3c <MX_GPIO_Init+0x1c4>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a58      	ldr	r2, [pc, #352]	; (8000a3c <MX_GPIO_Init+0x1c4>)
 80008dc:	f043 0302 	orr.w	r3, r3, #2
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b56      	ldr	r3, [pc, #344]	; (8000a3c <MX_GPIO_Init+0x1c4>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0302 	and.w	r3, r3, #2
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008ee:	4b53      	ldr	r3, [pc, #332]	; (8000a3c <MX_GPIO_Init+0x1c4>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	4a52      	ldr	r2, [pc, #328]	; (8000a3c <MX_GPIO_Init+0x1c4>)
 80008f4:	f043 0310 	orr.w	r3, r3, #16
 80008f8:	6313      	str	r3, [r2, #48]	; 0x30
 80008fa:	4b50      	ldr	r3, [pc, #320]	; (8000a3c <MX_GPIO_Init+0x1c4>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	f003 0310 	and.w	r3, r3, #16
 8000902:	60bb      	str	r3, [r7, #8]
 8000904:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000906:	4b4d      	ldr	r3, [pc, #308]	; (8000a3c <MX_GPIO_Init+0x1c4>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	4a4c      	ldr	r2, [pc, #304]	; (8000a3c <MX_GPIO_Init+0x1c4>)
 800090c:	f043 0308 	orr.w	r3, r3, #8
 8000910:	6313      	str	r3, [r2, #48]	; 0x30
 8000912:	4b4a      	ldr	r3, [pc, #296]	; (8000a3c <MX_GPIO_Init+0x1c4>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	f003 0308 	and.w	r3, r3, #8
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800091e:	4b47      	ldr	r3, [pc, #284]	; (8000a3c <MX_GPIO_Init+0x1c4>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	4a46      	ldr	r2, [pc, #280]	; (8000a3c <MX_GPIO_Init+0x1c4>)
 8000924:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000928:	6313      	str	r3, [r2, #48]	; 0x30
 800092a:	4b44      	ldr	r3, [pc, #272]	; (8000a3c <MX_GPIO_Init+0x1c4>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000932:	603b      	str	r3, [r7, #0]
 8000934:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MS1_S_Pin|MS2_S_Pin|MS3_S_Pin, GPIO_PIN_RESET);
 8000936:	2200      	movs	r2, #0
 8000938:	21e0      	movs	r1, #224	; 0xe0
 800093a:	4841      	ldr	r0, [pc, #260]	; (8000a40 <MX_GPIO_Init+0x1c8>)
 800093c:	f000 ffc8 	bl	80018d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|MS1_N_Pin|ENABLE_N_Pin|LD3_Pin
 8000940:	2200      	movs	r2, #0
 8000942:	f644 7181 	movw	r1, #20353	; 0x4f81
 8000946:	483f      	ldr	r0, [pc, #252]	; (8000a44 <MX_GPIO_Init+0x1cc>)
 8000948:	f000 ffc2 	bl	80018d0 <HAL_GPIO_WritePin>
                          |LD2_Pin|DIR_S_Pin|ENABLE_S_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR_N_Pin|SLEEP_N_Pin|RESET_N_Pin|MS3_N_Pin
 800094c:	2200      	movs	r2, #0
 800094e:	f24d 4180 	movw	r1, #54400	; 0xd480
 8000952:	483d      	ldr	r0, [pc, #244]	; (8000a48 <MX_GPIO_Init+0x1d0>)
 8000954:	f000 ffbc 	bl	80018d0 <HAL_GPIO_WritePin>
                          |MS2_N_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RESET_S_Pin|SLEEP_S_Pin, GPIO_PIN_RESET);
 8000958:	2200      	movs	r2, #0
 800095a:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800095e:	483b      	ldr	r0, [pc, #236]	; (8000a4c <MX_GPIO_Init+0x1d4>)
 8000960:	f000 ffb6 	bl	80018d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000964:	2200      	movs	r2, #0
 8000966:	2140      	movs	r1, #64	; 0x40
 8000968:	4839      	ldr	r0, [pc, #228]	; (8000a50 <MX_GPIO_Init+0x1d8>)
 800096a:	f000 ffb1 	bl	80018d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800096e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000972:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000974:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000978:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800097e:	f107 031c 	add.w	r3, r7, #28
 8000982:	4619      	mov	r1, r3
 8000984:	4833      	ldr	r0, [pc, #204]	; (8000a54 <MX_GPIO_Init+0x1dc>)
 8000986:	f000 fdf7 	bl	8001578 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = MS1_S_Pin|MS2_S_Pin|MS3_S_Pin;
 800098a:	23e0      	movs	r3, #224	; 0xe0
 800098c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098e:	2301      	movs	r3, #1
 8000990:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000996:	2300      	movs	r3, #0
 8000998:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099a:	f107 031c 	add.w	r3, r7, #28
 800099e:	4619      	mov	r1, r3
 80009a0:	4827      	ldr	r0, [pc, #156]	; (8000a40 <MX_GPIO_Init+0x1c8>)
 80009a2:	f000 fde9 	bl	8001578 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|MS1_N_Pin|ENABLE_N_Pin|LD3_Pin
 80009a6:	f644 7381 	movw	r3, #20353	; 0x4f81
 80009aa:	61fb      	str	r3, [r7, #28]
                          |LD2_Pin|DIR_S_Pin|ENABLE_S_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ac:	2301      	movs	r3, #1
 80009ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b4:	2300      	movs	r3, #0
 80009b6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b8:	f107 031c 	add.w	r3, r7, #28
 80009bc:	4619      	mov	r1, r3
 80009be:	4821      	ldr	r0, [pc, #132]	; (8000a44 <MX_GPIO_Init+0x1cc>)
 80009c0:	f000 fdda 	bl	8001578 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = DIR_N_Pin|SLEEP_N_Pin|RESET_N_Pin|MS3_N_Pin
 80009c4:	f24d 4380 	movw	r3, #54400	; 0xd480
 80009c8:	61fb      	str	r3, [r7, #28]
                          |MS2_N_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ca:	2301      	movs	r3, #1
 80009cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d2:	2300      	movs	r3, #0
 80009d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009d6:	f107 031c 	add.w	r3, r7, #28
 80009da:	4619      	mov	r1, r3
 80009dc:	481a      	ldr	r0, [pc, #104]	; (8000a48 <MX_GPIO_Init+0x1d0>)
 80009de:	f000 fdcb 	bl	8001578 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RESET_S_Pin|SLEEP_S_Pin;
 80009e2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80009e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e8:	2301      	movs	r3, #1
 80009ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f0:	2300      	movs	r3, #0
 80009f2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009f4:	f107 031c 	add.w	r3, r7, #28
 80009f8:	4619      	mov	r1, r3
 80009fa:	4814      	ldr	r0, [pc, #80]	; (8000a4c <MX_GPIO_Init+0x1d4>)
 80009fc:	f000 fdbc 	bl	8001578 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a00:	2340      	movs	r3, #64	; 0x40
 8000a02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a04:	2301      	movs	r3, #1
 8000a06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a10:	f107 031c 	add.w	r3, r7, #28
 8000a14:	4619      	mov	r1, r3
 8000a16:	480e      	ldr	r0, [pc, #56]	; (8000a50 <MX_GPIO_Init+0x1d8>)
 8000a18:	f000 fdae 	bl	8001578 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a1c:	2380      	movs	r3, #128	; 0x80
 8000a1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a20:	2300      	movs	r3, #0
 8000a22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a28:	f107 031c 	add.w	r3, r7, #28
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4808      	ldr	r0, [pc, #32]	; (8000a50 <MX_GPIO_Init+0x1d8>)
 8000a30:	f000 fda2 	bl	8001578 <HAL_GPIO_Init>

}
 8000a34:	bf00      	nop
 8000a36:	3730      	adds	r7, #48	; 0x30
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	40023800 	.word	0x40023800
 8000a40:	40020000 	.word	0x40020000
 8000a44:	40020400 	.word	0x40020400
 8000a48:	40021000 	.word	0x40021000
 8000a4c:	40020c00 	.word	0x40020c00
 8000a50:	40021800 	.word	0x40021800
 8000a54:	40020800 	.word	0x40020800

08000a58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a5c:	f000 fc1d 	bl	800129a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a60:	f000 f818 	bl	8000a94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a64:	f7ff ff08 	bl	8000878 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000a68:	f000 fb5e 	bl	8001128 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8000a6c:	f000 f90e 	bl	8000c8c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000a70:	f000 f984 	bl	8000d7c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000a74:	f000 f9d2 	bl	8000e1c <MX_TIM4_Init>
  MX_TIM5_Init();
 8000a78:	f000 fa48 	bl	8000f0c <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
Init_A4988(&Syringe);
 8000a7c:	4803      	ldr	r0, [pc, #12]	; (8000a8c <main+0x34>)
 8000a7e:	f7ff febb 	bl	80007f8 <Init_A4988>
Init_A4988(&Needle);
 8000a82:	4803      	ldr	r0, [pc, #12]	; (8000a90 <main+0x38>)
 8000a84:	f7ff feb8 	bl	80007f8 <Init_A4988>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a88:	e7fe      	b.n	8000a88 <main+0x30>
 8000a8a:	bf00      	nop
 8000a8c:	20000000 	.word	0x20000000
 8000a90:	2000004c 	.word	0x2000004c

08000a94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b094      	sub	sp, #80	; 0x50
 8000a98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a9a:	f107 0320 	add.w	r3, r7, #32
 8000a9e:	2230      	movs	r2, #48	; 0x30
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f003 fe80 	bl	80047a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aa8:	f107 030c 	add.w	r3, r7, #12
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	605a      	str	r2, [r3, #4]
 8000ab2:	609a      	str	r2, [r3, #8]
 8000ab4:	60da      	str	r2, [r3, #12]
 8000ab6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000ab8:	f000 ff24 	bl	8001904 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000abc:	4b27      	ldr	r3, [pc, #156]	; (8000b5c <SystemClock_Config+0xc8>)
 8000abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac0:	4a26      	ldr	r2, [pc, #152]	; (8000b5c <SystemClock_Config+0xc8>)
 8000ac2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ac6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac8:	4b24      	ldr	r3, [pc, #144]	; (8000b5c <SystemClock_Config+0xc8>)
 8000aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000acc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ad0:	60bb      	str	r3, [r7, #8]
 8000ad2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ad4:	4b22      	ldr	r3, [pc, #136]	; (8000b60 <SystemClock_Config+0xcc>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000adc:	4a20      	ldr	r2, [pc, #128]	; (8000b60 <SystemClock_Config+0xcc>)
 8000ade:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ae2:	6013      	str	r3, [r2, #0]
 8000ae4:	4b1e      	ldr	r3, [pc, #120]	; (8000b60 <SystemClock_Config+0xcc>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000aec:	607b      	str	r3, [r7, #4]
 8000aee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000af0:	2301      	movs	r3, #1
 8000af2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000af4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000af8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000afa:	2302      	movs	r3, #2
 8000afc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000afe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b02:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b04:	2304      	movs	r3, #4
 8000b06:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000b08:	2348      	movs	r3, #72	; 0x48
 8000b0a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000b10:	2303      	movs	r3, #3
 8000b12:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b14:	f107 0320 	add.w	r3, r7, #32
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f000 ff03 	bl	8001924 <HAL_RCC_OscConfig>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b24:	f000 f842 	bl	8000bac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b28:	230f      	movs	r3, #15
 8000b2a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b30:	2300      	movs	r3, #0
 8000b32:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b38:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b3e:	f107 030c 	add.w	r3, r7, #12
 8000b42:	2102      	movs	r1, #2
 8000b44:	4618      	mov	r0, r3
 8000b46:	f001 f991 	bl	8001e6c <HAL_RCC_ClockConfig>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000b50:	f000 f82c 	bl	8000bac <Error_Handler>
  }
}
 8000b54:	bf00      	nop
 8000b56:	3750      	adds	r7, #80	; 0x50
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	40023800 	.word	0x40023800
 8000b60:	40007000 	.word	0x40007000

08000b64 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3){	//Syringe
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a0a      	ldr	r2, [pc, #40]	; (8000b9c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d104      	bne.n	8000b80 <HAL_TIM_PeriodElapsedCallback+0x1c>
		HAL_TIM_PWM_Stop(&TIM_PWM_S, TIM_PWM_CHANNEL_S); // Stop syringe
 8000b76:	2100      	movs	r1, #0
 8000b78:	4809      	ldr	r0, [pc, #36]	; (8000ba0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000b7a:	f002 f8bf 	bl	8002cfc <HAL_TIM_PWM_Stop>
	}
	else if(htim->Instance == TIM5){ //Needle
		HAL_TIM_PWM_Stop(&TIM_PWM_N, TIM_PWM_CHANNEL_N); // Stop needle
	}
}
 8000b7e:	e008      	b.n	8000b92 <HAL_TIM_PeriodElapsedCallback+0x2e>
	else if(htim->Instance == TIM5){ //Needle
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a07      	ldr	r2, [pc, #28]	; (8000ba4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d103      	bne.n	8000b92 <HAL_TIM_PeriodElapsedCallback+0x2e>
		HAL_TIM_PWM_Stop(&TIM_PWM_N, TIM_PWM_CHANNEL_N); // Stop needle
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4806      	ldr	r0, [pc, #24]	; (8000ba8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000b8e:	f002 f8b5 	bl	8002cfc <HAL_TIM_PWM_Stop>
}
 8000b92:	bf00      	nop
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40000400 	.word	0x40000400
 8000ba0:	200000c0 	.word	0x200000c0
 8000ba4:	40000c00 	.word	0x40000c00
 8000ba8:	20000158 	.word	0x20000158

08000bac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bb0:	b672      	cpsid	i
}
 8000bb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bb4:	e7fe      	b.n	8000bb4 <Error_Handler+0x8>
	...

08000bb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000bbe:	4b0f      	ldr	r3, [pc, #60]	; (8000bfc <HAL_MspInit+0x44>)
 8000bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc2:	4a0e      	ldr	r2, [pc, #56]	; (8000bfc <HAL_MspInit+0x44>)
 8000bc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bc8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bca:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <HAL_MspInit+0x44>)
 8000bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bd2:	607b      	str	r3, [r7, #4]
 8000bd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bd6:	4b09      	ldr	r3, [pc, #36]	; (8000bfc <HAL_MspInit+0x44>)
 8000bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bda:	4a08      	ldr	r2, [pc, #32]	; (8000bfc <HAL_MspInit+0x44>)
 8000bdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000be0:	6453      	str	r3, [r2, #68]	; 0x44
 8000be2:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <HAL_MspInit+0x44>)
 8000be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000be6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bea:	603b      	str	r3, [r7, #0]
 8000bec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	370c      	adds	r7, #12
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	40023800 	.word	0x40023800

08000c00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c04:	e7fe      	b.n	8000c04 <NMI_Handler+0x4>

08000c06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c06:	b480      	push	{r7}
 8000c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c0a:	e7fe      	b.n	8000c0a <HardFault_Handler+0x4>

08000c0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c10:	e7fe      	b.n	8000c10 <MemManage_Handler+0x4>

08000c12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c12:	b480      	push	{r7}
 8000c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c16:	e7fe      	b.n	8000c16 <BusFault_Handler+0x4>

08000c18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c1c:	e7fe      	b.n	8000c1c <UsageFault_Handler+0x4>

08000c1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c22:	bf00      	nop
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr

08000c2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c30:	bf00      	nop
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr

08000c3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr

08000c48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c4c:	f000 fb62 	bl	8001314 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c50:	bf00      	nop
 8000c52:	bd80      	pop	{r7, pc}

08000c54 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000c58:	4802      	ldr	r0, [pc, #8]	; (8000c64 <TIM3_IRQHandler+0x10>)
 8000c5a:	f002 f8cf 	bl	8002dfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	2000010c 	.word	0x2000010c

08000c68 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c6c:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <SystemInit+0x20>)
 8000c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c72:	4a05      	ldr	r2, [pc, #20]	; (8000c88 <SystemInit+0x20>)
 8000c74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	e000ed00 	.word	0xe000ed00

08000c8c <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b08e      	sub	sp, #56	; 0x38
 8000c90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	605a      	str	r2, [r3, #4]
 8000c9c:	609a      	str	r2, [r3, #8]
 8000c9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ca0:	f107 031c 	add.w	r3, r7, #28
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	605a      	str	r2, [r3, #4]
 8000caa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cac:	463b      	mov	r3, r7
 8000cae:	2200      	movs	r2, #0
 8000cb0:	601a      	str	r2, [r3, #0]
 8000cb2:	605a      	str	r2, [r3, #4]
 8000cb4:	609a      	str	r2, [r3, #8]
 8000cb6:	60da      	str	r2, [r3, #12]
 8000cb8:	611a      	str	r2, [r3, #16]
 8000cba:	615a      	str	r2, [r3, #20]
 8000cbc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cbe:	4b2e      	ldr	r3, [pc, #184]	; (8000d78 <MX_TIM2_Init+0xec>)
 8000cc0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cc4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8000cc6:	4b2c      	ldr	r3, [pc, #176]	; (8000d78 <MX_TIM2_Init+0xec>)
 8000cc8:	2247      	movs	r2, #71	; 0x47
 8000cca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ccc:	4b2a      	ldr	r3, [pc, #168]	; (8000d78 <MX_TIM2_Init+0xec>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000cd2:	4b29      	ldr	r3, [pc, #164]	; (8000d78 <MX_TIM2_Init+0xec>)
 8000cd4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cd8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cda:	4b27      	ldr	r3, [pc, #156]	; (8000d78 <MX_TIM2_Init+0xec>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ce0:	4b25      	ldr	r3, [pc, #148]	; (8000d78 <MX_TIM2_Init+0xec>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ce6:	4824      	ldr	r0, [pc, #144]	; (8000d78 <MX_TIM2_Init+0xec>)
 8000ce8:	f001 fed6 	bl	8002a98 <HAL_TIM_Base_Init>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000cf2:	f7ff ff5b 	bl	8000bac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cf6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cfa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000cfc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d00:	4619      	mov	r1, r3
 8000d02:	481d      	ldr	r0, [pc, #116]	; (8000d78 <MX_TIM2_Init+0xec>)
 8000d04:	f002 faae 	bl	8003264 <HAL_TIM_ConfigClockSource>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000d0e:	f7ff ff4d 	bl	8000bac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d12:	4819      	ldr	r0, [pc, #100]	; (8000d78 <MX_TIM2_Init+0xec>)
 8000d14:	f001 ff90 	bl	8002c38 <HAL_TIM_PWM_Init>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000d1e:	f7ff ff45 	bl	8000bac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000d22:	2320      	movs	r3, #32
 8000d24:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d26:	2300      	movs	r3, #0
 8000d28:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d2a:	f107 031c 	add.w	r3, r7, #28
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4811      	ldr	r0, [pc, #68]	; (8000d78 <MX_TIM2_Init+0xec>)
 8000d32:	f003 f81d 	bl	8003d70 <HAL_TIMEx_MasterConfigSynchronization>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000d3c:	f7ff ff36 	bl	8000bac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d40:	2360      	movs	r3, #96	; 0x60
 8000d42:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 499;
 8000d44:	f240 13f3 	movw	r3, #499	; 0x1f3
 8000d48:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d52:	463b      	mov	r3, r7
 8000d54:	2200      	movs	r2, #0
 8000d56:	4619      	mov	r1, r3
 8000d58:	4807      	ldr	r0, [pc, #28]	; (8000d78 <MX_TIM2_Init+0xec>)
 8000d5a:	f002 f96f 	bl	800303c <HAL_TIM_PWM_ConfigChannel>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000d64:	f7ff ff22 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000d68:	4803      	ldr	r0, [pc, #12]	; (8000d78 <MX_TIM2_Init+0xec>)
 8000d6a:	f000 f97f 	bl	800106c <HAL_TIM_MspPostInit>

}
 8000d6e:	bf00      	nop
 8000d70:	3738      	adds	r7, #56	; 0x38
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	200000c0 	.word	0x200000c0

08000d7c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b088      	sub	sp, #32
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000d82:	f107 030c 	add.w	r3, r7, #12
 8000d86:	2200      	movs	r2, #0
 8000d88:	601a      	str	r2, [r3, #0]
 8000d8a:	605a      	str	r2, [r3, #4]
 8000d8c:	609a      	str	r2, [r3, #8]
 8000d8e:	60da      	str	r2, [r3, #12]
 8000d90:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d92:	463b      	mov	r3, r7
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d9c:	4b1d      	ldr	r3, [pc, #116]	; (8000e14 <MX_TIM3_Init+0x98>)
 8000d9e:	4a1e      	ldr	r2, [pc, #120]	; (8000e18 <MX_TIM3_Init+0x9c>)
 8000da0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000da2:	4b1c      	ldr	r3, [pc, #112]	; (8000e14 <MX_TIM3_Init+0x98>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000da8:	4b1a      	ldr	r3, [pc, #104]	; (8000e14 <MX_TIM3_Init+0x98>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8000dae:	4b19      	ldr	r3, [pc, #100]	; (8000e14 <MX_TIM3_Init+0x98>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000db4:	4b17      	ldr	r3, [pc, #92]	; (8000e14 <MX_TIM3_Init+0x98>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dba:	4b16      	ldr	r3, [pc, #88]	; (8000e14 <MX_TIM3_Init+0x98>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000dc0:	4814      	ldr	r0, [pc, #80]	; (8000e14 <MX_TIM3_Init+0x98>)
 8000dc2:	f001 fe69 	bl	8002a98 <HAL_TIM_Base_Init>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000dcc:	f7ff feee 	bl	8000bac <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8000dd0:	2307      	movs	r3, #7
 8000dd2:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8000dd4:	2310      	movs	r3, #16
 8000dd6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000dd8:	f107 030c 	add.w	r3, r7, #12
 8000ddc:	4619      	mov	r1, r3
 8000dde:	480d      	ldr	r0, [pc, #52]	; (8000e14 <MX_TIM3_Init+0x98>)
 8000de0:	f002 fb0a 	bl	80033f8 <HAL_TIM_SlaveConfigSynchro>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8000dea:	f7ff fedf 	bl	8000bac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dee:	2300      	movs	r3, #0
 8000df0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000df2:	2300      	movs	r3, #0
 8000df4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000df6:	463b      	mov	r3, r7
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4806      	ldr	r0, [pc, #24]	; (8000e14 <MX_TIM3_Init+0x98>)
 8000dfc:	f002 ffb8 	bl	8003d70 <HAL_TIMEx_MasterConfigSynchronization>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8000e06:	f7ff fed1 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e0a:	bf00      	nop
 8000e0c:	3720      	adds	r7, #32
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	2000010c 	.word	0x2000010c
 8000e18:	40000400 	.word	0x40000400

08000e1c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b08e      	sub	sp, #56	; 0x38
 8000e20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e26:	2200      	movs	r2, #0
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	605a      	str	r2, [r3, #4]
 8000e2c:	609a      	str	r2, [r3, #8]
 8000e2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e30:	f107 031c 	add.w	r3, r7, #28
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e3c:	463b      	mov	r3, r7
 8000e3e:	2200      	movs	r2, #0
 8000e40:	601a      	str	r2, [r3, #0]
 8000e42:	605a      	str	r2, [r3, #4]
 8000e44:	609a      	str	r2, [r3, #8]
 8000e46:	60da      	str	r2, [r3, #12]
 8000e48:	611a      	str	r2, [r3, #16]
 8000e4a:	615a      	str	r2, [r3, #20]
 8000e4c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e4e:	4b2d      	ldr	r3, [pc, #180]	; (8000f04 <MX_TIM4_Init+0xe8>)
 8000e50:	4a2d      	ldr	r2, [pc, #180]	; (8000f08 <MX_TIM4_Init+0xec>)
 8000e52:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 8000e54:	4b2b      	ldr	r3, [pc, #172]	; (8000f04 <MX_TIM4_Init+0xe8>)
 8000e56:	2247      	movs	r2, #71	; 0x47
 8000e58:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e5a:	4b2a      	ldr	r3, [pc, #168]	; (8000f04 <MX_TIM4_Init+0xe8>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8000e60:	4b28      	ldr	r3, [pc, #160]	; (8000f04 <MX_TIM4_Init+0xe8>)
 8000e62:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e66:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e68:	4b26      	ldr	r3, [pc, #152]	; (8000f04 <MX_TIM4_Init+0xe8>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e6e:	4b25      	ldr	r3, [pc, #148]	; (8000f04 <MX_TIM4_Init+0xe8>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000e74:	4823      	ldr	r0, [pc, #140]	; (8000f04 <MX_TIM4_Init+0xe8>)
 8000e76:	f001 fe0f 	bl	8002a98 <HAL_TIM_Base_Init>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000e80:	f7ff fe94 	bl	8000bac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e88:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000e8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e8e:	4619      	mov	r1, r3
 8000e90:	481c      	ldr	r0, [pc, #112]	; (8000f04 <MX_TIM4_Init+0xe8>)
 8000e92:	f002 f9e7 	bl	8003264 <HAL_TIM_ConfigClockSource>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000e9c:	f7ff fe86 	bl	8000bac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000ea0:	4818      	ldr	r0, [pc, #96]	; (8000f04 <MX_TIM4_Init+0xe8>)
 8000ea2:	f001 fec9 	bl	8002c38 <HAL_TIM_PWM_Init>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000eac:	f7ff fe7e 	bl	8000bac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000eb0:	2320      	movs	r3, #32
 8000eb2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000eb8:	f107 031c 	add.w	r3, r7, #28
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4811      	ldr	r0, [pc, #68]	; (8000f04 <MX_TIM4_Init+0xe8>)
 8000ec0:	f002 ff56 	bl	8003d70 <HAL_TIMEx_MasterConfigSynchronization>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000eca:	f7ff fe6f 	bl	8000bac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ece:	2360      	movs	r3, #96	; 0x60
 8000ed0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 499;
 8000ed2:	f240 13f3 	movw	r3, #499	; 0x1f3
 8000ed6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000edc:	2300      	movs	r3, #0
 8000ede:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ee0:	463b      	mov	r3, r7
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4807      	ldr	r0, [pc, #28]	; (8000f04 <MX_TIM4_Init+0xe8>)
 8000ee8:	f002 f8a8 	bl	800303c <HAL_TIM_PWM_ConfigChannel>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8000ef2:	f7ff fe5b 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000ef6:	4803      	ldr	r0, [pc, #12]	; (8000f04 <MX_TIM4_Init+0xe8>)
 8000ef8:	f000 f8b8 	bl	800106c <HAL_TIM_MspPostInit>

}
 8000efc:	bf00      	nop
 8000efe:	3738      	adds	r7, #56	; 0x38
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	20000158 	.word	0x20000158
 8000f08:	40000800 	.word	0x40000800

08000f0c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b088      	sub	sp, #32
 8000f10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000f12:	f107 030c 	add.w	r3, r7, #12
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
 8000f1a:	605a      	str	r2, [r3, #4]
 8000f1c:	609a      	str	r2, [r3, #8]
 8000f1e:	60da      	str	r2, [r3, #12]
 8000f20:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f22:	463b      	mov	r3, r7
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000f2c:	4b1d      	ldr	r3, [pc, #116]	; (8000fa4 <MX_TIM5_Init+0x98>)
 8000f2e:	4a1e      	ldr	r2, [pc, #120]	; (8000fa8 <MX_TIM5_Init+0x9c>)
 8000f30:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000f32:	4b1c      	ldr	r3, [pc, #112]	; (8000fa4 <MX_TIM5_Init+0x98>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f38:	4b1a      	ldr	r3, [pc, #104]	; (8000fa4 <MX_TIM5_Init+0x98>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 8000f3e:	4b19      	ldr	r3, [pc, #100]	; (8000fa4 <MX_TIM5_Init+0x98>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f44:	4b17      	ldr	r3, [pc, #92]	; (8000fa4 <MX_TIM5_Init+0x98>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f4a:	4b16      	ldr	r3, [pc, #88]	; (8000fa4 <MX_TIM5_Init+0x98>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000f50:	4814      	ldr	r0, [pc, #80]	; (8000fa4 <MX_TIM5_Init+0x98>)
 8000f52:	f001 fda1 	bl	8002a98 <HAL_TIM_Base_Init>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000f5c:	f7ff fe26 	bl	8000bac <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8000f60:	2307      	movs	r3, #7
 8000f62:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR2;
 8000f64:	2320      	movs	r3, #32
 8000f66:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8000f68:	f107 030c 	add.w	r3, r7, #12
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	480d      	ldr	r0, [pc, #52]	; (8000fa4 <MX_TIM5_Init+0x98>)
 8000f70:	f002 fa42 	bl	80033f8 <HAL_TIM_SlaveConfigSynchro>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 8000f7a:	f7ff fe17 	bl	8000bac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f82:	2300      	movs	r3, #0
 8000f84:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000f86:	463b      	mov	r3, r7
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4806      	ldr	r0, [pc, #24]	; (8000fa4 <MX_TIM5_Init+0x98>)
 8000f8c:	f002 fef0 	bl	8003d70 <HAL_TIMEx_MasterConfigSynchronization>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 8000f96:	f7ff fe09 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000f9a:	bf00      	nop
 8000f9c:	3720      	adds	r7, #32
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	200001a4 	.word	0x200001a4
 8000fa8:	40000c00 	.word	0x40000c00

08000fac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b086      	sub	sp, #24
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fbc:	d10c      	bne.n	8000fd8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fbe:	4b27      	ldr	r3, [pc, #156]	; (800105c <HAL_TIM_Base_MspInit+0xb0>)
 8000fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc2:	4a26      	ldr	r2, [pc, #152]	; (800105c <HAL_TIM_Base_MspInit+0xb0>)
 8000fc4:	f043 0301 	orr.w	r3, r3, #1
 8000fc8:	6413      	str	r3, [r2, #64]	; 0x40
 8000fca:	4b24      	ldr	r3, [pc, #144]	; (800105c <HAL_TIM_Base_MspInit+0xb0>)
 8000fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fce:	f003 0301 	and.w	r3, r3, #1
 8000fd2:	617b      	str	r3, [r7, #20]
 8000fd4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8000fd6:	e03c      	b.n	8001052 <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM3)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a20      	ldr	r2, [pc, #128]	; (8001060 <HAL_TIM_Base_MspInit+0xb4>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d114      	bne.n	800100c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000fe2:	4b1e      	ldr	r3, [pc, #120]	; (800105c <HAL_TIM_Base_MspInit+0xb0>)
 8000fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe6:	4a1d      	ldr	r2, [pc, #116]	; (800105c <HAL_TIM_Base_MspInit+0xb0>)
 8000fe8:	f043 0302 	orr.w	r3, r3, #2
 8000fec:	6413      	str	r3, [r2, #64]	; 0x40
 8000fee:	4b1b      	ldr	r3, [pc, #108]	; (800105c <HAL_TIM_Base_MspInit+0xb0>)
 8000ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff2:	f003 0302 	and.w	r3, r3, #2
 8000ff6:	613b      	str	r3, [r7, #16]
 8000ff8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	201d      	movs	r0, #29
 8001000:	f000 fa83 	bl	800150a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001004:	201d      	movs	r0, #29
 8001006:	f000 fa9c 	bl	8001542 <HAL_NVIC_EnableIRQ>
}
 800100a:	e022      	b.n	8001052 <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM4)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a14      	ldr	r2, [pc, #80]	; (8001064 <HAL_TIM_Base_MspInit+0xb8>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d10c      	bne.n	8001030 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001016:	4b11      	ldr	r3, [pc, #68]	; (800105c <HAL_TIM_Base_MspInit+0xb0>)
 8001018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101a:	4a10      	ldr	r2, [pc, #64]	; (800105c <HAL_TIM_Base_MspInit+0xb0>)
 800101c:	f043 0304 	orr.w	r3, r3, #4
 8001020:	6413      	str	r3, [r2, #64]	; 0x40
 8001022:	4b0e      	ldr	r3, [pc, #56]	; (800105c <HAL_TIM_Base_MspInit+0xb0>)
 8001024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001026:	f003 0304 	and.w	r3, r3, #4
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	68fb      	ldr	r3, [r7, #12]
}
 800102e:	e010      	b.n	8001052 <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM5)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a0c      	ldr	r2, [pc, #48]	; (8001068 <HAL_TIM_Base_MspInit+0xbc>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d10b      	bne.n	8001052 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800103a:	4b08      	ldr	r3, [pc, #32]	; (800105c <HAL_TIM_Base_MspInit+0xb0>)
 800103c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103e:	4a07      	ldr	r2, [pc, #28]	; (800105c <HAL_TIM_Base_MspInit+0xb0>)
 8001040:	f043 0308 	orr.w	r3, r3, #8
 8001044:	6413      	str	r3, [r2, #64]	; 0x40
 8001046:	4b05      	ldr	r3, [pc, #20]	; (800105c <HAL_TIM_Base_MspInit+0xb0>)
 8001048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104a:	f003 0308 	and.w	r3, r3, #8
 800104e:	60bb      	str	r3, [r7, #8]
 8001050:	68bb      	ldr	r3, [r7, #8]
}
 8001052:	bf00      	nop
 8001054:	3718      	adds	r7, #24
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	40023800 	.word	0x40023800
 8001060:	40000400 	.word	0x40000400
 8001064:	40000800 	.word	0x40000800
 8001068:	40000c00 	.word	0x40000c00

0800106c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b08a      	sub	sp, #40	; 0x28
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001074:	f107 0314 	add.w	r3, r7, #20
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	60da      	str	r2, [r3, #12]
 8001082:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800108c:	d11d      	bne.n	80010ca <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800108e:	4b22      	ldr	r3, [pc, #136]	; (8001118 <HAL_TIM_MspPostInit+0xac>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	4a21      	ldr	r2, [pc, #132]	; (8001118 <HAL_TIM_MspPostInit+0xac>)
 8001094:	f043 0301 	orr.w	r3, r3, #1
 8001098:	6313      	str	r3, [r2, #48]	; 0x30
 800109a:	4b1f      	ldr	r3, [pc, #124]	; (8001118 <HAL_TIM_MspPostInit+0xac>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	613b      	str	r3, [r7, #16]
 80010a4:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = STEP_S_Pin;
 80010a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ac:	2302      	movs	r3, #2
 80010ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b4:	2300      	movs	r3, #0
 80010b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80010b8:	2301      	movs	r3, #1
 80010ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(STEP_S_GPIO_Port, &GPIO_InitStruct);
 80010bc:	f107 0314 	add.w	r3, r7, #20
 80010c0:	4619      	mov	r1, r3
 80010c2:	4816      	ldr	r0, [pc, #88]	; (800111c <HAL_TIM_MspPostInit+0xb0>)
 80010c4:	f000 fa58 	bl	8001578 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80010c8:	e021      	b.n	800110e <HAL_TIM_MspPostInit+0xa2>
  else if(timHandle->Instance==TIM4)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a14      	ldr	r2, [pc, #80]	; (8001120 <HAL_TIM_MspPostInit+0xb4>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d11c      	bne.n	800110e <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010d4:	4b10      	ldr	r3, [pc, #64]	; (8001118 <HAL_TIM_MspPostInit+0xac>)
 80010d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d8:	4a0f      	ldr	r2, [pc, #60]	; (8001118 <HAL_TIM_MspPostInit+0xac>)
 80010da:	f043 0308 	orr.w	r3, r3, #8
 80010de:	6313      	str	r3, [r2, #48]	; 0x30
 80010e0:	4b0d      	ldr	r3, [pc, #52]	; (8001118 <HAL_TIM_MspPostInit+0xac>)
 80010e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e4:	f003 0308 	and.w	r3, r3, #8
 80010e8:	60fb      	str	r3, [r7, #12]
 80010ea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEP_N_Pin;
 80010ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f2:	2302      	movs	r3, #2
 80010f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f6:	2300      	movs	r3, #0
 80010f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fa:	2300      	movs	r3, #0
 80010fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80010fe:	2302      	movs	r3, #2
 8001100:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(STEP_N_GPIO_Port, &GPIO_InitStruct);
 8001102:	f107 0314 	add.w	r3, r7, #20
 8001106:	4619      	mov	r1, r3
 8001108:	4806      	ldr	r0, [pc, #24]	; (8001124 <HAL_TIM_MspPostInit+0xb8>)
 800110a:	f000 fa35 	bl	8001578 <HAL_GPIO_Init>
}
 800110e:	bf00      	nop
 8001110:	3728      	adds	r7, #40	; 0x28
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40023800 	.word	0x40023800
 800111c:	40020000 	.word	0x40020000
 8001120:	40000800 	.word	0x40000800
 8001124:	40020c00 	.word	0x40020c00

08001128 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800112c:	4b14      	ldr	r3, [pc, #80]	; (8001180 <MX_USART3_UART_Init+0x58>)
 800112e:	4a15      	ldr	r2, [pc, #84]	; (8001184 <MX_USART3_UART_Init+0x5c>)
 8001130:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001132:	4b13      	ldr	r3, [pc, #76]	; (8001180 <MX_USART3_UART_Init+0x58>)
 8001134:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001138:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800113a:	4b11      	ldr	r3, [pc, #68]	; (8001180 <MX_USART3_UART_Init+0x58>)
 800113c:	2200      	movs	r2, #0
 800113e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001140:	4b0f      	ldr	r3, [pc, #60]	; (8001180 <MX_USART3_UART_Init+0x58>)
 8001142:	2200      	movs	r2, #0
 8001144:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001146:	4b0e      	ldr	r3, [pc, #56]	; (8001180 <MX_USART3_UART_Init+0x58>)
 8001148:	2200      	movs	r2, #0
 800114a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800114c:	4b0c      	ldr	r3, [pc, #48]	; (8001180 <MX_USART3_UART_Init+0x58>)
 800114e:	220c      	movs	r2, #12
 8001150:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001152:	4b0b      	ldr	r3, [pc, #44]	; (8001180 <MX_USART3_UART_Init+0x58>)
 8001154:	2200      	movs	r2, #0
 8001156:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001158:	4b09      	ldr	r3, [pc, #36]	; (8001180 <MX_USART3_UART_Init+0x58>)
 800115a:	2200      	movs	r2, #0
 800115c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800115e:	4b08      	ldr	r3, [pc, #32]	; (8001180 <MX_USART3_UART_Init+0x58>)
 8001160:	2200      	movs	r2, #0
 8001162:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001164:	4b06      	ldr	r3, [pc, #24]	; (8001180 <MX_USART3_UART_Init+0x58>)
 8001166:	2200      	movs	r2, #0
 8001168:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800116a:	4805      	ldr	r0, [pc, #20]	; (8001180 <MX_USART3_UART_Init+0x58>)
 800116c:	f002 feac 	bl	8003ec8 <HAL_UART_Init>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001176:	f7ff fd19 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	200001f0 	.word	0x200001f0
 8001184:	40004800 	.word	0x40004800

08001188 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b0aa      	sub	sp, #168	; 0xa8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001190:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
 800119e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011a0:	f107 0310 	add.w	r3, r7, #16
 80011a4:	2284      	movs	r2, #132	; 0x84
 80011a6:	2100      	movs	r1, #0
 80011a8:	4618      	mov	r0, r3
 80011aa:	f003 fafd 	bl	80047a8 <memset>
  if(uartHandle->Instance==USART3)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a22      	ldr	r2, [pc, #136]	; (800123c <HAL_UART_MspInit+0xb4>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d13c      	bne.n	8001232 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80011b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011bc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80011be:	2300      	movs	r3, #0
 80011c0:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011c2:	f107 0310 	add.w	r3, r7, #16
 80011c6:	4618      	mov	r0, r3
 80011c8:	f001 f876 	bl	80022b8 <HAL_RCCEx_PeriphCLKConfig>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80011d2:	f7ff fceb 	bl	8000bac <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80011d6:	4b1a      	ldr	r3, [pc, #104]	; (8001240 <HAL_UART_MspInit+0xb8>)
 80011d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011da:	4a19      	ldr	r2, [pc, #100]	; (8001240 <HAL_UART_MspInit+0xb8>)
 80011dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011e0:	6413      	str	r3, [r2, #64]	; 0x40
 80011e2:	4b17      	ldr	r3, [pc, #92]	; (8001240 <HAL_UART_MspInit+0xb8>)
 80011e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011ee:	4b14      	ldr	r3, [pc, #80]	; (8001240 <HAL_UART_MspInit+0xb8>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	4a13      	ldr	r2, [pc, #76]	; (8001240 <HAL_UART_MspInit+0xb8>)
 80011f4:	f043 0308 	orr.w	r3, r3, #8
 80011f8:	6313      	str	r3, [r2, #48]	; 0x30
 80011fa:	4b11      	ldr	r3, [pc, #68]	; (8001240 <HAL_UART_MspInit+0xb8>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	f003 0308 	and.w	r3, r3, #8
 8001202:	60bb      	str	r3, [r7, #8]
 8001204:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001206:	f44f 7340 	mov.w	r3, #768	; 0x300
 800120a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120e:	2302      	movs	r3, #2
 8001210:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800121a:	2303      	movs	r3, #3
 800121c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001220:	2307      	movs	r3, #7
 8001222:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001226:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800122a:	4619      	mov	r1, r3
 800122c:	4805      	ldr	r0, [pc, #20]	; (8001244 <HAL_UART_MspInit+0xbc>)
 800122e:	f000 f9a3 	bl	8001578 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001232:	bf00      	nop
 8001234:	37a8      	adds	r7, #168	; 0xa8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40004800 	.word	0x40004800
 8001240:	40023800 	.word	0x40023800
 8001244:	40020c00 	.word	0x40020c00

08001248 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001248:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001280 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800124c:	480d      	ldr	r0, [pc, #52]	; (8001284 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800124e:	490e      	ldr	r1, [pc, #56]	; (8001288 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001250:	4a0e      	ldr	r2, [pc, #56]	; (800128c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001252:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001254:	e002      	b.n	800125c <LoopCopyDataInit>

08001256 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001256:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001258:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800125a:	3304      	adds	r3, #4

0800125c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800125c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800125e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001260:	d3f9      	bcc.n	8001256 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001262:	4a0b      	ldr	r2, [pc, #44]	; (8001290 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001264:	4c0b      	ldr	r4, [pc, #44]	; (8001294 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001266:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001268:	e001      	b.n	800126e <LoopFillZerobss>

0800126a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800126a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800126c:	3204      	adds	r2, #4

0800126e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800126e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001270:	d3fb      	bcc.n	800126a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001272:	f7ff fcf9 	bl	8000c68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001276:	f003 fa73 	bl	8004760 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800127a:	f7ff fbed 	bl	8000a58 <main>
  bx  lr    
 800127e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001280:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001284:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001288:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 800128c:	080047f8 	.word	0x080047f8
  ldr r2, =_sbss
 8001290:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 8001294:	20000278 	.word	0x20000278

08001298 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001298:	e7fe      	b.n	8001298 <ADC_IRQHandler>

0800129a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800129e:	2003      	movs	r0, #3
 80012a0:	f000 f928 	bl	80014f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012a4:	2000      	movs	r0, #0
 80012a6:	f000 f805 	bl	80012b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012aa:	f7ff fc85 	bl	8000bb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012ae:	2300      	movs	r3, #0
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012bc:	4b12      	ldr	r3, [pc, #72]	; (8001308 <HAL_InitTick+0x54>)
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	4b12      	ldr	r3, [pc, #72]	; (800130c <HAL_InitTick+0x58>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	4619      	mov	r1, r3
 80012c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80012ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80012d2:	4618      	mov	r0, r3
 80012d4:	f000 f943 	bl	800155e <HAL_SYSTICK_Config>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e00e      	b.n	8001300 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2b0f      	cmp	r3, #15
 80012e6:	d80a      	bhi.n	80012fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012e8:	2200      	movs	r2, #0
 80012ea:	6879      	ldr	r1, [r7, #4]
 80012ec:	f04f 30ff 	mov.w	r0, #4294967295
 80012f0:	f000 f90b 	bl	800150a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012f4:	4a06      	ldr	r2, [pc, #24]	; (8001310 <HAL_InitTick+0x5c>)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012fa:	2300      	movs	r3, #0
 80012fc:	e000      	b.n	8001300 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
}
 8001300:	4618      	mov	r0, r3
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	20000098 	.word	0x20000098
 800130c:	200000a0 	.word	0x200000a0
 8001310:	2000009c 	.word	0x2000009c

08001314 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001318:	4b06      	ldr	r3, [pc, #24]	; (8001334 <HAL_IncTick+0x20>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	461a      	mov	r2, r3
 800131e:	4b06      	ldr	r3, [pc, #24]	; (8001338 <HAL_IncTick+0x24>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4413      	add	r3, r2
 8001324:	4a04      	ldr	r2, [pc, #16]	; (8001338 <HAL_IncTick+0x24>)
 8001326:	6013      	str	r3, [r2, #0]
}
 8001328:	bf00      	nop
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	200000a0 	.word	0x200000a0
 8001338:	20000274 	.word	0x20000274

0800133c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  return uwTick;
 8001340:	4b03      	ldr	r3, [pc, #12]	; (8001350 <HAL_GetTick+0x14>)
 8001342:	681b      	ldr	r3, [r3, #0]
}
 8001344:	4618      	mov	r0, r3
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	20000274 	.word	0x20000274

08001354 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001354:	b480      	push	{r7}
 8001356:	b085      	sub	sp, #20
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f003 0307 	and.w	r3, r3, #7
 8001362:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001364:	4b0b      	ldr	r3, [pc, #44]	; (8001394 <__NVIC_SetPriorityGrouping+0x40>)
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800136a:	68ba      	ldr	r2, [r7, #8]
 800136c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001370:	4013      	ands	r3, r2
 8001372:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800137c:	4b06      	ldr	r3, [pc, #24]	; (8001398 <__NVIC_SetPriorityGrouping+0x44>)
 800137e:	4313      	orrs	r3, r2
 8001380:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001382:	4a04      	ldr	r2, [pc, #16]	; (8001394 <__NVIC_SetPriorityGrouping+0x40>)
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	60d3      	str	r3, [r2, #12]
}
 8001388:	bf00      	nop
 800138a:	3714      	adds	r7, #20
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr
 8001394:	e000ed00 	.word	0xe000ed00
 8001398:	05fa0000 	.word	0x05fa0000

0800139c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013a0:	4b04      	ldr	r3, [pc, #16]	; (80013b4 <__NVIC_GetPriorityGrouping+0x18>)
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	0a1b      	lsrs	r3, r3, #8
 80013a6:	f003 0307 	and.w	r3, r3, #7
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr
 80013b4:	e000ed00 	.word	0xe000ed00

080013b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	db0b      	blt.n	80013e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ca:	79fb      	ldrb	r3, [r7, #7]
 80013cc:	f003 021f 	and.w	r2, r3, #31
 80013d0:	4907      	ldr	r1, [pc, #28]	; (80013f0 <__NVIC_EnableIRQ+0x38>)
 80013d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d6:	095b      	lsrs	r3, r3, #5
 80013d8:	2001      	movs	r0, #1
 80013da:	fa00 f202 	lsl.w	r2, r0, r2
 80013de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013e2:	bf00      	nop
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	e000e100 	.word	0xe000e100

080013f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	4603      	mov	r3, r0
 80013fc:	6039      	str	r1, [r7, #0]
 80013fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001404:	2b00      	cmp	r3, #0
 8001406:	db0a      	blt.n	800141e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	b2da      	uxtb	r2, r3
 800140c:	490c      	ldr	r1, [pc, #48]	; (8001440 <__NVIC_SetPriority+0x4c>)
 800140e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001412:	0112      	lsls	r2, r2, #4
 8001414:	b2d2      	uxtb	r2, r2
 8001416:	440b      	add	r3, r1
 8001418:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800141c:	e00a      	b.n	8001434 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	b2da      	uxtb	r2, r3
 8001422:	4908      	ldr	r1, [pc, #32]	; (8001444 <__NVIC_SetPriority+0x50>)
 8001424:	79fb      	ldrb	r3, [r7, #7]
 8001426:	f003 030f 	and.w	r3, r3, #15
 800142a:	3b04      	subs	r3, #4
 800142c:	0112      	lsls	r2, r2, #4
 800142e:	b2d2      	uxtb	r2, r2
 8001430:	440b      	add	r3, r1
 8001432:	761a      	strb	r2, [r3, #24]
}
 8001434:	bf00      	nop
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr
 8001440:	e000e100 	.word	0xe000e100
 8001444:	e000ed00 	.word	0xe000ed00

08001448 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001448:	b480      	push	{r7}
 800144a:	b089      	sub	sp, #36	; 0x24
 800144c:	af00      	add	r7, sp, #0
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	60b9      	str	r1, [r7, #8]
 8001452:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	f003 0307 	and.w	r3, r3, #7
 800145a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	f1c3 0307 	rsb	r3, r3, #7
 8001462:	2b04      	cmp	r3, #4
 8001464:	bf28      	it	cs
 8001466:	2304      	movcs	r3, #4
 8001468:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	3304      	adds	r3, #4
 800146e:	2b06      	cmp	r3, #6
 8001470:	d902      	bls.n	8001478 <NVIC_EncodePriority+0x30>
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	3b03      	subs	r3, #3
 8001476:	e000      	b.n	800147a <NVIC_EncodePriority+0x32>
 8001478:	2300      	movs	r3, #0
 800147a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800147c:	f04f 32ff 	mov.w	r2, #4294967295
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	fa02 f303 	lsl.w	r3, r2, r3
 8001486:	43da      	mvns	r2, r3
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	401a      	ands	r2, r3
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001490:	f04f 31ff 	mov.w	r1, #4294967295
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	fa01 f303 	lsl.w	r3, r1, r3
 800149a:	43d9      	mvns	r1, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a0:	4313      	orrs	r3, r2
         );
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3724      	adds	r7, #36	; 0x24
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
	...

080014b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	3b01      	subs	r3, #1
 80014bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014c0:	d301      	bcc.n	80014c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014c2:	2301      	movs	r3, #1
 80014c4:	e00f      	b.n	80014e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014c6:	4a0a      	ldr	r2, [pc, #40]	; (80014f0 <SysTick_Config+0x40>)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	3b01      	subs	r3, #1
 80014cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014ce:	210f      	movs	r1, #15
 80014d0:	f04f 30ff 	mov.w	r0, #4294967295
 80014d4:	f7ff ff8e 	bl	80013f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014d8:	4b05      	ldr	r3, [pc, #20]	; (80014f0 <SysTick_Config+0x40>)
 80014da:	2200      	movs	r2, #0
 80014dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014de:	4b04      	ldr	r3, [pc, #16]	; (80014f0 <SysTick_Config+0x40>)
 80014e0:	2207      	movs	r2, #7
 80014e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014e4:	2300      	movs	r3, #0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	e000e010 	.word	0xe000e010

080014f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f7ff ff29 	bl	8001354 <__NVIC_SetPriorityGrouping>
}
 8001502:	bf00      	nop
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800150a:	b580      	push	{r7, lr}
 800150c:	b086      	sub	sp, #24
 800150e:	af00      	add	r7, sp, #0
 8001510:	4603      	mov	r3, r0
 8001512:	60b9      	str	r1, [r7, #8]
 8001514:	607a      	str	r2, [r7, #4]
 8001516:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001518:	2300      	movs	r3, #0
 800151a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800151c:	f7ff ff3e 	bl	800139c <__NVIC_GetPriorityGrouping>
 8001520:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	68b9      	ldr	r1, [r7, #8]
 8001526:	6978      	ldr	r0, [r7, #20]
 8001528:	f7ff ff8e 	bl	8001448 <NVIC_EncodePriority>
 800152c:	4602      	mov	r2, r0
 800152e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001532:	4611      	mov	r1, r2
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff ff5d 	bl	80013f4 <__NVIC_SetPriority>
}
 800153a:	bf00      	nop
 800153c:	3718      	adds	r7, #24
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}

08001542 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001542:	b580      	push	{r7, lr}
 8001544:	b082      	sub	sp, #8
 8001546:	af00      	add	r7, sp, #0
 8001548:	4603      	mov	r3, r0
 800154a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800154c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff ff31 	bl	80013b8 <__NVIC_EnableIRQ>
}
 8001556:	bf00      	nop
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800155e:	b580      	push	{r7, lr}
 8001560:	b082      	sub	sp, #8
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f7ff ffa2 	bl	80014b0 <SysTick_Config>
 800156c:	4603      	mov	r3, r0
}
 800156e:	4618      	mov	r0, r3
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
	...

08001578 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001578:	b480      	push	{r7}
 800157a:	b089      	sub	sp, #36	; 0x24
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001582:	2300      	movs	r3, #0
 8001584:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001586:	2300      	movs	r3, #0
 8001588:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800158a:	2300      	movs	r3, #0
 800158c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800158e:	2300      	movs	r3, #0
 8001590:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001592:	2300      	movs	r3, #0
 8001594:	61fb      	str	r3, [r7, #28]
 8001596:	e175      	b.n	8001884 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001598:	2201      	movs	r2, #1
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	697a      	ldr	r2, [r7, #20]
 80015a8:	4013      	ands	r3, r2
 80015aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015ac:	693a      	ldr	r2, [r7, #16]
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	f040 8164 	bne.w	800187e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f003 0303 	and.w	r3, r3, #3
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d005      	beq.n	80015ce <HAL_GPIO_Init+0x56>
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f003 0303 	and.w	r3, r3, #3
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d130      	bne.n	8001630 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	005b      	lsls	r3, r3, #1
 80015d8:	2203      	movs	r2, #3
 80015da:	fa02 f303 	lsl.w	r3, r2, r3
 80015de:	43db      	mvns	r3, r3
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	4013      	ands	r3, r2
 80015e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	68da      	ldr	r2, [r3, #12]
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	fa02 f303 	lsl.w	r3, r2, r3
 80015f2:	69ba      	ldr	r2, [r7, #24]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	69ba      	ldr	r2, [r7, #24]
 80015fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001604:	2201      	movs	r2, #1
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	43db      	mvns	r3, r3
 800160e:	69ba      	ldr	r2, [r7, #24]
 8001610:	4013      	ands	r3, r2
 8001612:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	091b      	lsrs	r3, r3, #4
 800161a:	f003 0201 	and.w	r2, r3, #1
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	fa02 f303 	lsl.w	r3, r2, r3
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	4313      	orrs	r3, r2
 8001628:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f003 0303 	and.w	r3, r3, #3
 8001638:	2b03      	cmp	r3, #3
 800163a:	d017      	beq.n	800166c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	2203      	movs	r2, #3
 8001648:	fa02 f303 	lsl.w	r3, r2, r3
 800164c:	43db      	mvns	r3, r3
 800164e:	69ba      	ldr	r2, [r7, #24]
 8001650:	4013      	ands	r3, r2
 8001652:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	689a      	ldr	r2, [r3, #8]
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	fa02 f303 	lsl.w	r3, r2, r3
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	4313      	orrs	r3, r2
 8001664:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f003 0303 	and.w	r3, r3, #3
 8001674:	2b02      	cmp	r3, #2
 8001676:	d123      	bne.n	80016c0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	08da      	lsrs	r2, r3, #3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	3208      	adds	r2, #8
 8001680:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001684:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	f003 0307 	and.w	r3, r3, #7
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	220f      	movs	r2, #15
 8001690:	fa02 f303 	lsl.w	r3, r2, r3
 8001694:	43db      	mvns	r3, r3
 8001696:	69ba      	ldr	r2, [r7, #24]
 8001698:	4013      	ands	r3, r2
 800169a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	691a      	ldr	r2, [r3, #16]
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	f003 0307 	and.w	r3, r3, #7
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ac:	69ba      	ldr	r2, [r7, #24]
 80016ae:	4313      	orrs	r3, r2
 80016b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	08da      	lsrs	r2, r3, #3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	3208      	adds	r2, #8
 80016ba:	69b9      	ldr	r1, [r7, #24]
 80016bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	005b      	lsls	r3, r3, #1
 80016ca:	2203      	movs	r2, #3
 80016cc:	fa02 f303 	lsl.w	r3, r2, r3
 80016d0:	43db      	mvns	r3, r3
 80016d2:	69ba      	ldr	r2, [r7, #24]
 80016d4:	4013      	ands	r3, r2
 80016d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f003 0203 	and.w	r2, r3, #3
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	fa02 f303 	lsl.w	r3, r2, r3
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	69ba      	ldr	r2, [r7, #24]
 80016f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	f000 80be 	beq.w	800187e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001702:	4b66      	ldr	r3, [pc, #408]	; (800189c <HAL_GPIO_Init+0x324>)
 8001704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001706:	4a65      	ldr	r2, [pc, #404]	; (800189c <HAL_GPIO_Init+0x324>)
 8001708:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800170c:	6453      	str	r3, [r2, #68]	; 0x44
 800170e:	4b63      	ldr	r3, [pc, #396]	; (800189c <HAL_GPIO_Init+0x324>)
 8001710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001712:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800171a:	4a61      	ldr	r2, [pc, #388]	; (80018a0 <HAL_GPIO_Init+0x328>)
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	089b      	lsrs	r3, r3, #2
 8001720:	3302      	adds	r3, #2
 8001722:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001726:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	f003 0303 	and.w	r3, r3, #3
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	220f      	movs	r2, #15
 8001732:	fa02 f303 	lsl.w	r3, r2, r3
 8001736:	43db      	mvns	r3, r3
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	4013      	ands	r3, r2
 800173c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4a58      	ldr	r2, [pc, #352]	; (80018a4 <HAL_GPIO_Init+0x32c>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d037      	beq.n	80017b6 <HAL_GPIO_Init+0x23e>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4a57      	ldr	r2, [pc, #348]	; (80018a8 <HAL_GPIO_Init+0x330>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d031      	beq.n	80017b2 <HAL_GPIO_Init+0x23a>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4a56      	ldr	r2, [pc, #344]	; (80018ac <HAL_GPIO_Init+0x334>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d02b      	beq.n	80017ae <HAL_GPIO_Init+0x236>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a55      	ldr	r2, [pc, #340]	; (80018b0 <HAL_GPIO_Init+0x338>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d025      	beq.n	80017aa <HAL_GPIO_Init+0x232>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4a54      	ldr	r2, [pc, #336]	; (80018b4 <HAL_GPIO_Init+0x33c>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d01f      	beq.n	80017a6 <HAL_GPIO_Init+0x22e>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4a53      	ldr	r2, [pc, #332]	; (80018b8 <HAL_GPIO_Init+0x340>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d019      	beq.n	80017a2 <HAL_GPIO_Init+0x22a>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4a52      	ldr	r2, [pc, #328]	; (80018bc <HAL_GPIO_Init+0x344>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d013      	beq.n	800179e <HAL_GPIO_Init+0x226>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4a51      	ldr	r2, [pc, #324]	; (80018c0 <HAL_GPIO_Init+0x348>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d00d      	beq.n	800179a <HAL_GPIO_Init+0x222>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a50      	ldr	r2, [pc, #320]	; (80018c4 <HAL_GPIO_Init+0x34c>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d007      	beq.n	8001796 <HAL_GPIO_Init+0x21e>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a4f      	ldr	r2, [pc, #316]	; (80018c8 <HAL_GPIO_Init+0x350>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d101      	bne.n	8001792 <HAL_GPIO_Init+0x21a>
 800178e:	2309      	movs	r3, #9
 8001790:	e012      	b.n	80017b8 <HAL_GPIO_Init+0x240>
 8001792:	230a      	movs	r3, #10
 8001794:	e010      	b.n	80017b8 <HAL_GPIO_Init+0x240>
 8001796:	2308      	movs	r3, #8
 8001798:	e00e      	b.n	80017b8 <HAL_GPIO_Init+0x240>
 800179a:	2307      	movs	r3, #7
 800179c:	e00c      	b.n	80017b8 <HAL_GPIO_Init+0x240>
 800179e:	2306      	movs	r3, #6
 80017a0:	e00a      	b.n	80017b8 <HAL_GPIO_Init+0x240>
 80017a2:	2305      	movs	r3, #5
 80017a4:	e008      	b.n	80017b8 <HAL_GPIO_Init+0x240>
 80017a6:	2304      	movs	r3, #4
 80017a8:	e006      	b.n	80017b8 <HAL_GPIO_Init+0x240>
 80017aa:	2303      	movs	r3, #3
 80017ac:	e004      	b.n	80017b8 <HAL_GPIO_Init+0x240>
 80017ae:	2302      	movs	r3, #2
 80017b0:	e002      	b.n	80017b8 <HAL_GPIO_Init+0x240>
 80017b2:	2301      	movs	r3, #1
 80017b4:	e000      	b.n	80017b8 <HAL_GPIO_Init+0x240>
 80017b6:	2300      	movs	r3, #0
 80017b8:	69fa      	ldr	r2, [r7, #28]
 80017ba:	f002 0203 	and.w	r2, r2, #3
 80017be:	0092      	lsls	r2, r2, #2
 80017c0:	4093      	lsls	r3, r2
 80017c2:	69ba      	ldr	r2, [r7, #24]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80017c8:	4935      	ldr	r1, [pc, #212]	; (80018a0 <HAL_GPIO_Init+0x328>)
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	089b      	lsrs	r3, r3, #2
 80017ce:	3302      	adds	r3, #2
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017d6:	4b3d      	ldr	r3, [pc, #244]	; (80018cc <HAL_GPIO_Init+0x354>)
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	43db      	mvns	r3, r3
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	4013      	ands	r3, r2
 80017e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d003      	beq.n	80017fa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017fa:	4a34      	ldr	r2, [pc, #208]	; (80018cc <HAL_GPIO_Init+0x354>)
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001800:	4b32      	ldr	r3, [pc, #200]	; (80018cc <HAL_GPIO_Init+0x354>)
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	43db      	mvns	r3, r3
 800180a:	69ba      	ldr	r2, [r7, #24]
 800180c:	4013      	ands	r3, r2
 800180e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001818:	2b00      	cmp	r3, #0
 800181a:	d003      	beq.n	8001824 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	4313      	orrs	r3, r2
 8001822:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001824:	4a29      	ldr	r2, [pc, #164]	; (80018cc <HAL_GPIO_Init+0x354>)
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800182a:	4b28      	ldr	r3, [pc, #160]	; (80018cc <HAL_GPIO_Init+0x354>)
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	43db      	mvns	r3, r3
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	4013      	ands	r3, r2
 8001838:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d003      	beq.n	800184e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001846:	69ba      	ldr	r2, [r7, #24]
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	4313      	orrs	r3, r2
 800184c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800184e:	4a1f      	ldr	r2, [pc, #124]	; (80018cc <HAL_GPIO_Init+0x354>)
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001854:	4b1d      	ldr	r3, [pc, #116]	; (80018cc <HAL_GPIO_Init+0x354>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	43db      	mvns	r3, r3
 800185e:	69ba      	ldr	r2, [r7, #24]
 8001860:	4013      	ands	r3, r2
 8001862:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800186c:	2b00      	cmp	r3, #0
 800186e:	d003      	beq.n	8001878 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	4313      	orrs	r3, r2
 8001876:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001878:	4a14      	ldr	r2, [pc, #80]	; (80018cc <HAL_GPIO_Init+0x354>)
 800187a:	69bb      	ldr	r3, [r7, #24]
 800187c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	3301      	adds	r3, #1
 8001882:	61fb      	str	r3, [r7, #28]
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	2b0f      	cmp	r3, #15
 8001888:	f67f ae86 	bls.w	8001598 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800188c:	bf00      	nop
 800188e:	bf00      	nop
 8001890:	3724      	adds	r7, #36	; 0x24
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	40023800 	.word	0x40023800
 80018a0:	40013800 	.word	0x40013800
 80018a4:	40020000 	.word	0x40020000
 80018a8:	40020400 	.word	0x40020400
 80018ac:	40020800 	.word	0x40020800
 80018b0:	40020c00 	.word	0x40020c00
 80018b4:	40021000 	.word	0x40021000
 80018b8:	40021400 	.word	0x40021400
 80018bc:	40021800 	.word	0x40021800
 80018c0:	40021c00 	.word	0x40021c00
 80018c4:	40022000 	.word	0x40022000
 80018c8:	40022400 	.word	0x40022400
 80018cc:	40013c00 	.word	0x40013c00

080018d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	460b      	mov	r3, r1
 80018da:	807b      	strh	r3, [r7, #2]
 80018dc:	4613      	mov	r3, r2
 80018de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018e0:	787b      	ldrb	r3, [r7, #1]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d003      	beq.n	80018ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018e6:	887a      	ldrh	r2, [r7, #2]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80018ec:	e003      	b.n	80018f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80018ee:	887b      	ldrh	r3, [r7, #2]
 80018f0:	041a      	lsls	r2, r3, #16
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	619a      	str	r2, [r3, #24]
}
 80018f6:	bf00      	nop
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
	...

08001904 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001908:	4b05      	ldr	r3, [pc, #20]	; (8001920 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a04      	ldr	r2, [pc, #16]	; (8001920 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800190e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001912:	6013      	str	r3, [r2, #0]
}
 8001914:	bf00      	nop
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	40007000 	.word	0x40007000

08001924 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b086      	sub	sp, #24
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800192c:	2300      	movs	r3, #0
 800192e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d101      	bne.n	800193a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e291      	b.n	8001e5e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	2b00      	cmp	r3, #0
 8001944:	f000 8087 	beq.w	8001a56 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001948:	4b96      	ldr	r3, [pc, #600]	; (8001ba4 <HAL_RCC_OscConfig+0x280>)
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	f003 030c 	and.w	r3, r3, #12
 8001950:	2b04      	cmp	r3, #4
 8001952:	d00c      	beq.n	800196e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001954:	4b93      	ldr	r3, [pc, #588]	; (8001ba4 <HAL_RCC_OscConfig+0x280>)
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	f003 030c 	and.w	r3, r3, #12
 800195c:	2b08      	cmp	r3, #8
 800195e:	d112      	bne.n	8001986 <HAL_RCC_OscConfig+0x62>
 8001960:	4b90      	ldr	r3, [pc, #576]	; (8001ba4 <HAL_RCC_OscConfig+0x280>)
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001968:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800196c:	d10b      	bne.n	8001986 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800196e:	4b8d      	ldr	r3, [pc, #564]	; (8001ba4 <HAL_RCC_OscConfig+0x280>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d06c      	beq.n	8001a54 <HAL_RCC_OscConfig+0x130>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d168      	bne.n	8001a54 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e26b      	b.n	8001e5e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800198e:	d106      	bne.n	800199e <HAL_RCC_OscConfig+0x7a>
 8001990:	4b84      	ldr	r3, [pc, #528]	; (8001ba4 <HAL_RCC_OscConfig+0x280>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a83      	ldr	r2, [pc, #524]	; (8001ba4 <HAL_RCC_OscConfig+0x280>)
 8001996:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800199a:	6013      	str	r3, [r2, #0]
 800199c:	e02e      	b.n	80019fc <HAL_RCC_OscConfig+0xd8>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d10c      	bne.n	80019c0 <HAL_RCC_OscConfig+0x9c>
 80019a6:	4b7f      	ldr	r3, [pc, #508]	; (8001ba4 <HAL_RCC_OscConfig+0x280>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a7e      	ldr	r2, [pc, #504]	; (8001ba4 <HAL_RCC_OscConfig+0x280>)
 80019ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019b0:	6013      	str	r3, [r2, #0]
 80019b2:	4b7c      	ldr	r3, [pc, #496]	; (8001ba4 <HAL_RCC_OscConfig+0x280>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a7b      	ldr	r2, [pc, #492]	; (8001ba4 <HAL_RCC_OscConfig+0x280>)
 80019b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019bc:	6013      	str	r3, [r2, #0]
 80019be:	e01d      	b.n	80019fc <HAL_RCC_OscConfig+0xd8>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019c8:	d10c      	bne.n	80019e4 <HAL_RCC_OscConfig+0xc0>
 80019ca:	4b76      	ldr	r3, [pc, #472]	; (8001ba4 <HAL_RCC_OscConfig+0x280>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a75      	ldr	r2, [pc, #468]	; (8001ba4 <HAL_RCC_OscConfig+0x280>)
 80019d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019d4:	6013      	str	r3, [r2, #0]
 80019d6:	4b73      	ldr	r3, [pc, #460]	; (8001ba4 <HAL_RCC_OscConfig+0x280>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a72      	ldr	r2, [pc, #456]	; (8001ba4 <HAL_RCC_OscConfig+0x280>)
 80019dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019e0:	6013      	str	r3, [r2, #0]
 80019e2:	e00b      	b.n	80019fc <HAL_RCC_OscConfig+0xd8>
 80019e4:	4b6f      	ldr	r3, [pc, #444]	; (8001ba4 <HAL_RCC_OscConfig+0x280>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a6e      	ldr	r2, [pc, #440]	; (8001ba4 <HAL_RCC_OscConfig+0x280>)
 80019ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019ee:	6013      	str	r3, [r2, #0]
 80019f0:	4b6c      	ldr	r3, [pc, #432]	; (8001ba4 <HAL_RCC_OscConfig+0x280>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a6b      	ldr	r2, [pc, #428]	; (8001ba4 <HAL_RCC_OscConfig+0x280>)
 80019f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d013      	beq.n	8001a2c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a04:	f7ff fc9a 	bl	800133c <HAL_GetTick>
 8001a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a0a:	e008      	b.n	8001a1e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a0c:	f7ff fc96 	bl	800133c <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b64      	cmp	r3, #100	; 0x64
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e21f      	b.n	8001e5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a1e:	4b61      	ldr	r3, [pc, #388]	; (8001ba4 <HAL_RCC_OscConfig+0x280>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d0f0      	beq.n	8001a0c <HAL_RCC_OscConfig+0xe8>
 8001a2a:	e014      	b.n	8001a56 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a2c:	f7ff fc86 	bl	800133c <HAL_GetTick>
 8001a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a32:	e008      	b.n	8001a46 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a34:	f7ff fc82 	bl	800133c <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b64      	cmp	r3, #100	; 0x64
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e20b      	b.n	8001e5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a46:	4b57      	ldr	r3, [pc, #348]	; (8001ba4 <HAL_RCC_OscConfig+0x280>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d1f0      	bne.n	8001a34 <HAL_RCC_OscConfig+0x110>
 8001a52:	e000      	b.n	8001a56 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d069      	beq.n	8001b36 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a62:	4b50      	ldr	r3, [pc, #320]	; (8001ba4 <HAL_RCC_OscConfig+0x280>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f003 030c 	and.w	r3, r3, #12
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d00b      	beq.n	8001a86 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a6e:	4b4d      	ldr	r3, [pc, #308]	; (8001ba4 <HAL_RCC_OscConfig+0x280>)
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	f003 030c 	and.w	r3, r3, #12
 8001a76:	2b08      	cmp	r3, #8
 8001a78:	d11c      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x190>
 8001a7a:	4b4a      	ldr	r3, [pc, #296]	; (8001ba4 <HAL_RCC_OscConfig+0x280>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d116      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a86:	4b47      	ldr	r3, [pc, #284]	; (8001ba4 <HAL_RCC_OscConfig+0x280>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d005      	beq.n	8001a9e <HAL_RCC_OscConfig+0x17a>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d001      	beq.n	8001a9e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e1df      	b.n	8001e5e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a9e:	4b41      	ldr	r3, [pc, #260]	; (8001ba4 <HAL_RCC_OscConfig+0x280>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	691b      	ldr	r3, [r3, #16]
 8001aaa:	00db      	lsls	r3, r3, #3
 8001aac:	493d      	ldr	r1, [pc, #244]	; (8001ba4 <HAL_RCC_OscConfig+0x280>)
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ab2:	e040      	b.n	8001b36 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d023      	beq.n	8001b04 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001abc:	4b39      	ldr	r3, [pc, #228]	; (8001ba4 <HAL_RCC_OscConfig+0x280>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a38      	ldr	r2, [pc, #224]	; (8001ba4 <HAL_RCC_OscConfig+0x280>)
 8001ac2:	f043 0301 	orr.w	r3, r3, #1
 8001ac6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac8:	f7ff fc38 	bl	800133c <HAL_GetTick>
 8001acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ace:	e008      	b.n	8001ae2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ad0:	f7ff fc34 	bl	800133c <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e1bd      	b.n	8001e5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ae2:	4b30      	ldr	r3, [pc, #192]	; (8001ba4 <HAL_RCC_OscConfig+0x280>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0302 	and.w	r3, r3, #2
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d0f0      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aee:	4b2d      	ldr	r3, [pc, #180]	; (8001ba4 <HAL_RCC_OscConfig+0x280>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	691b      	ldr	r3, [r3, #16]
 8001afa:	00db      	lsls	r3, r3, #3
 8001afc:	4929      	ldr	r1, [pc, #164]	; (8001ba4 <HAL_RCC_OscConfig+0x280>)
 8001afe:	4313      	orrs	r3, r2
 8001b00:	600b      	str	r3, [r1, #0]
 8001b02:	e018      	b.n	8001b36 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b04:	4b27      	ldr	r3, [pc, #156]	; (8001ba4 <HAL_RCC_OscConfig+0x280>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a26      	ldr	r2, [pc, #152]	; (8001ba4 <HAL_RCC_OscConfig+0x280>)
 8001b0a:	f023 0301 	bic.w	r3, r3, #1
 8001b0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b10:	f7ff fc14 	bl	800133c <HAL_GetTick>
 8001b14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b16:	e008      	b.n	8001b2a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b18:	f7ff fc10 	bl	800133c <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d901      	bls.n	8001b2a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e199      	b.n	8001e5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b2a:	4b1e      	ldr	r3, [pc, #120]	; (8001ba4 <HAL_RCC_OscConfig+0x280>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d1f0      	bne.n	8001b18 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0308 	and.w	r3, r3, #8
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d038      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	695b      	ldr	r3, [r3, #20]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d019      	beq.n	8001b7e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b4a:	4b16      	ldr	r3, [pc, #88]	; (8001ba4 <HAL_RCC_OscConfig+0x280>)
 8001b4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b4e:	4a15      	ldr	r2, [pc, #84]	; (8001ba4 <HAL_RCC_OscConfig+0x280>)
 8001b50:	f043 0301 	orr.w	r3, r3, #1
 8001b54:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b56:	f7ff fbf1 	bl	800133c <HAL_GetTick>
 8001b5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b5c:	e008      	b.n	8001b70 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b5e:	f7ff fbed 	bl	800133c <HAL_GetTick>
 8001b62:	4602      	mov	r2, r0
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d901      	bls.n	8001b70 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	e176      	b.n	8001e5e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b70:	4b0c      	ldr	r3, [pc, #48]	; (8001ba4 <HAL_RCC_OscConfig+0x280>)
 8001b72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b74:	f003 0302 	and.w	r3, r3, #2
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d0f0      	beq.n	8001b5e <HAL_RCC_OscConfig+0x23a>
 8001b7c:	e01a      	b.n	8001bb4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b7e:	4b09      	ldr	r3, [pc, #36]	; (8001ba4 <HAL_RCC_OscConfig+0x280>)
 8001b80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b82:	4a08      	ldr	r2, [pc, #32]	; (8001ba4 <HAL_RCC_OscConfig+0x280>)
 8001b84:	f023 0301 	bic.w	r3, r3, #1
 8001b88:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b8a:	f7ff fbd7 	bl	800133c <HAL_GetTick>
 8001b8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b90:	e00a      	b.n	8001ba8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b92:	f7ff fbd3 	bl	800133c <HAL_GetTick>
 8001b96:	4602      	mov	r2, r0
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	d903      	bls.n	8001ba8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	e15c      	b.n	8001e5e <HAL_RCC_OscConfig+0x53a>
 8001ba4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ba8:	4b91      	ldr	r3, [pc, #580]	; (8001df0 <HAL_RCC_OscConfig+0x4cc>)
 8001baa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bac:	f003 0302 	and.w	r3, r3, #2
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d1ee      	bne.n	8001b92 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0304 	and.w	r3, r3, #4
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	f000 80a4 	beq.w	8001d0a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bc2:	4b8b      	ldr	r3, [pc, #556]	; (8001df0 <HAL_RCC_OscConfig+0x4cc>)
 8001bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d10d      	bne.n	8001bea <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bce:	4b88      	ldr	r3, [pc, #544]	; (8001df0 <HAL_RCC_OscConfig+0x4cc>)
 8001bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd2:	4a87      	ldr	r2, [pc, #540]	; (8001df0 <HAL_RCC_OscConfig+0x4cc>)
 8001bd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bd8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bda:	4b85      	ldr	r3, [pc, #532]	; (8001df0 <HAL_RCC_OscConfig+0x4cc>)
 8001bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001be2:	60bb      	str	r3, [r7, #8]
 8001be4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001be6:	2301      	movs	r3, #1
 8001be8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bea:	4b82      	ldr	r3, [pc, #520]	; (8001df4 <HAL_RCC_OscConfig+0x4d0>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d118      	bne.n	8001c28 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001bf6:	4b7f      	ldr	r3, [pc, #508]	; (8001df4 <HAL_RCC_OscConfig+0x4d0>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a7e      	ldr	r2, [pc, #504]	; (8001df4 <HAL_RCC_OscConfig+0x4d0>)
 8001bfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c02:	f7ff fb9b 	bl	800133c <HAL_GetTick>
 8001c06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c08:	e008      	b.n	8001c1c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c0a:	f7ff fb97 	bl	800133c <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	2b64      	cmp	r3, #100	; 0x64
 8001c16:	d901      	bls.n	8001c1c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e120      	b.n	8001e5e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c1c:	4b75      	ldr	r3, [pc, #468]	; (8001df4 <HAL_RCC_OscConfig+0x4d0>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d0f0      	beq.n	8001c0a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d106      	bne.n	8001c3e <HAL_RCC_OscConfig+0x31a>
 8001c30:	4b6f      	ldr	r3, [pc, #444]	; (8001df0 <HAL_RCC_OscConfig+0x4cc>)
 8001c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c34:	4a6e      	ldr	r2, [pc, #440]	; (8001df0 <HAL_RCC_OscConfig+0x4cc>)
 8001c36:	f043 0301 	orr.w	r3, r3, #1
 8001c3a:	6713      	str	r3, [r2, #112]	; 0x70
 8001c3c:	e02d      	b.n	8001c9a <HAL_RCC_OscConfig+0x376>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d10c      	bne.n	8001c60 <HAL_RCC_OscConfig+0x33c>
 8001c46:	4b6a      	ldr	r3, [pc, #424]	; (8001df0 <HAL_RCC_OscConfig+0x4cc>)
 8001c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c4a:	4a69      	ldr	r2, [pc, #420]	; (8001df0 <HAL_RCC_OscConfig+0x4cc>)
 8001c4c:	f023 0301 	bic.w	r3, r3, #1
 8001c50:	6713      	str	r3, [r2, #112]	; 0x70
 8001c52:	4b67      	ldr	r3, [pc, #412]	; (8001df0 <HAL_RCC_OscConfig+0x4cc>)
 8001c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c56:	4a66      	ldr	r2, [pc, #408]	; (8001df0 <HAL_RCC_OscConfig+0x4cc>)
 8001c58:	f023 0304 	bic.w	r3, r3, #4
 8001c5c:	6713      	str	r3, [r2, #112]	; 0x70
 8001c5e:	e01c      	b.n	8001c9a <HAL_RCC_OscConfig+0x376>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	2b05      	cmp	r3, #5
 8001c66:	d10c      	bne.n	8001c82 <HAL_RCC_OscConfig+0x35e>
 8001c68:	4b61      	ldr	r3, [pc, #388]	; (8001df0 <HAL_RCC_OscConfig+0x4cc>)
 8001c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c6c:	4a60      	ldr	r2, [pc, #384]	; (8001df0 <HAL_RCC_OscConfig+0x4cc>)
 8001c6e:	f043 0304 	orr.w	r3, r3, #4
 8001c72:	6713      	str	r3, [r2, #112]	; 0x70
 8001c74:	4b5e      	ldr	r3, [pc, #376]	; (8001df0 <HAL_RCC_OscConfig+0x4cc>)
 8001c76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c78:	4a5d      	ldr	r2, [pc, #372]	; (8001df0 <HAL_RCC_OscConfig+0x4cc>)
 8001c7a:	f043 0301 	orr.w	r3, r3, #1
 8001c7e:	6713      	str	r3, [r2, #112]	; 0x70
 8001c80:	e00b      	b.n	8001c9a <HAL_RCC_OscConfig+0x376>
 8001c82:	4b5b      	ldr	r3, [pc, #364]	; (8001df0 <HAL_RCC_OscConfig+0x4cc>)
 8001c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c86:	4a5a      	ldr	r2, [pc, #360]	; (8001df0 <HAL_RCC_OscConfig+0x4cc>)
 8001c88:	f023 0301 	bic.w	r3, r3, #1
 8001c8c:	6713      	str	r3, [r2, #112]	; 0x70
 8001c8e:	4b58      	ldr	r3, [pc, #352]	; (8001df0 <HAL_RCC_OscConfig+0x4cc>)
 8001c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c92:	4a57      	ldr	r2, [pc, #348]	; (8001df0 <HAL_RCC_OscConfig+0x4cc>)
 8001c94:	f023 0304 	bic.w	r3, r3, #4
 8001c98:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d015      	beq.n	8001cce <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ca2:	f7ff fb4b 	bl	800133c <HAL_GetTick>
 8001ca6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ca8:	e00a      	b.n	8001cc0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001caa:	f7ff fb47 	bl	800133c <HAL_GetTick>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d901      	bls.n	8001cc0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	e0ce      	b.n	8001e5e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cc0:	4b4b      	ldr	r3, [pc, #300]	; (8001df0 <HAL_RCC_OscConfig+0x4cc>)
 8001cc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cc4:	f003 0302 	and.w	r3, r3, #2
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d0ee      	beq.n	8001caa <HAL_RCC_OscConfig+0x386>
 8001ccc:	e014      	b.n	8001cf8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cce:	f7ff fb35 	bl	800133c <HAL_GetTick>
 8001cd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cd4:	e00a      	b.n	8001cec <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cd6:	f7ff fb31 	bl	800133c <HAL_GetTick>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d901      	bls.n	8001cec <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	e0b8      	b.n	8001e5e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cec:	4b40      	ldr	r3, [pc, #256]	; (8001df0 <HAL_RCC_OscConfig+0x4cc>)
 8001cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cf0:	f003 0302 	and.w	r3, r3, #2
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d1ee      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001cf8:	7dfb      	ldrb	r3, [r7, #23]
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d105      	bne.n	8001d0a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cfe:	4b3c      	ldr	r3, [pc, #240]	; (8001df0 <HAL_RCC_OscConfig+0x4cc>)
 8001d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d02:	4a3b      	ldr	r2, [pc, #236]	; (8001df0 <HAL_RCC_OscConfig+0x4cc>)
 8001d04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d08:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	699b      	ldr	r3, [r3, #24]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	f000 80a4 	beq.w	8001e5c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d14:	4b36      	ldr	r3, [pc, #216]	; (8001df0 <HAL_RCC_OscConfig+0x4cc>)
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f003 030c 	and.w	r3, r3, #12
 8001d1c:	2b08      	cmp	r3, #8
 8001d1e:	d06b      	beq.n	8001df8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	699b      	ldr	r3, [r3, #24]
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d149      	bne.n	8001dbc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d28:	4b31      	ldr	r3, [pc, #196]	; (8001df0 <HAL_RCC_OscConfig+0x4cc>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a30      	ldr	r2, [pc, #192]	; (8001df0 <HAL_RCC_OscConfig+0x4cc>)
 8001d2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d34:	f7ff fb02 	bl	800133c <HAL_GetTick>
 8001d38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d3a:	e008      	b.n	8001d4e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d3c:	f7ff fafe 	bl	800133c <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e087      	b.n	8001e5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d4e:	4b28      	ldr	r3, [pc, #160]	; (8001df0 <HAL_RCC_OscConfig+0x4cc>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d1f0      	bne.n	8001d3c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	69da      	ldr	r2, [r3, #28]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6a1b      	ldr	r3, [r3, #32]
 8001d62:	431a      	orrs	r2, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d68:	019b      	lsls	r3, r3, #6
 8001d6a:	431a      	orrs	r2, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d70:	085b      	lsrs	r3, r3, #1
 8001d72:	3b01      	subs	r3, #1
 8001d74:	041b      	lsls	r3, r3, #16
 8001d76:	431a      	orrs	r2, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d7c:	061b      	lsls	r3, r3, #24
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	4a1b      	ldr	r2, [pc, #108]	; (8001df0 <HAL_RCC_OscConfig+0x4cc>)
 8001d82:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001d86:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d88:	4b19      	ldr	r3, [pc, #100]	; (8001df0 <HAL_RCC_OscConfig+0x4cc>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a18      	ldr	r2, [pc, #96]	; (8001df0 <HAL_RCC_OscConfig+0x4cc>)
 8001d8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d94:	f7ff fad2 	bl	800133c <HAL_GetTick>
 8001d98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d9a:	e008      	b.n	8001dae <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d9c:	f7ff face 	bl	800133c <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e057      	b.n	8001e5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dae:	4b10      	ldr	r3, [pc, #64]	; (8001df0 <HAL_RCC_OscConfig+0x4cc>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d0f0      	beq.n	8001d9c <HAL_RCC_OscConfig+0x478>
 8001dba:	e04f      	b.n	8001e5c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dbc:	4b0c      	ldr	r3, [pc, #48]	; (8001df0 <HAL_RCC_OscConfig+0x4cc>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a0b      	ldr	r2, [pc, #44]	; (8001df0 <HAL_RCC_OscConfig+0x4cc>)
 8001dc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001dc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc8:	f7ff fab8 	bl	800133c <HAL_GetTick>
 8001dcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dce:	e008      	b.n	8001de2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dd0:	f7ff fab4 	bl	800133c <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d901      	bls.n	8001de2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e03d      	b.n	8001e5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001de2:	4b03      	ldr	r3, [pc, #12]	; (8001df0 <HAL_RCC_OscConfig+0x4cc>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d1f0      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x4ac>
 8001dee:	e035      	b.n	8001e5c <HAL_RCC_OscConfig+0x538>
 8001df0:	40023800 	.word	0x40023800
 8001df4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001df8:	4b1b      	ldr	r3, [pc, #108]	; (8001e68 <HAL_RCC_OscConfig+0x544>)
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	699b      	ldr	r3, [r3, #24]
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d028      	beq.n	8001e58 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d121      	bne.n	8001e58 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d11a      	bne.n	8001e58 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e22:	68fa      	ldr	r2, [r7, #12]
 8001e24:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e28:	4013      	ands	r3, r2
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e2e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d111      	bne.n	8001e58 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e3e:	085b      	lsrs	r3, r3, #1
 8001e40:	3b01      	subs	r3, #1
 8001e42:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d107      	bne.n	8001e58 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e52:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d001      	beq.n	8001e5c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e000      	b.n	8001e5e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3718      	adds	r7, #24
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	40023800 	.word	0x40023800

08001e6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001e76:	2300      	movs	r3, #0
 8001e78:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d101      	bne.n	8001e84 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e0d0      	b.n	8002026 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e84:	4b6a      	ldr	r3, [pc, #424]	; (8002030 <HAL_RCC_ClockConfig+0x1c4>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 030f 	and.w	r3, r3, #15
 8001e8c:	683a      	ldr	r2, [r7, #0]
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d910      	bls.n	8001eb4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e92:	4b67      	ldr	r3, [pc, #412]	; (8002030 <HAL_RCC_ClockConfig+0x1c4>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f023 020f 	bic.w	r2, r3, #15
 8001e9a:	4965      	ldr	r1, [pc, #404]	; (8002030 <HAL_RCC_ClockConfig+0x1c4>)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ea2:	4b63      	ldr	r3, [pc, #396]	; (8002030 <HAL_RCC_ClockConfig+0x1c4>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 030f 	and.w	r3, r3, #15
 8001eaa:	683a      	ldr	r2, [r7, #0]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d001      	beq.n	8001eb4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e0b8      	b.n	8002026 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0302 	and.w	r3, r3, #2
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d020      	beq.n	8001f02 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0304 	and.w	r3, r3, #4
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d005      	beq.n	8001ed8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ecc:	4b59      	ldr	r3, [pc, #356]	; (8002034 <HAL_RCC_ClockConfig+0x1c8>)
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	4a58      	ldr	r2, [pc, #352]	; (8002034 <HAL_RCC_ClockConfig+0x1c8>)
 8001ed2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ed6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0308 	and.w	r3, r3, #8
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d005      	beq.n	8001ef0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ee4:	4b53      	ldr	r3, [pc, #332]	; (8002034 <HAL_RCC_ClockConfig+0x1c8>)
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	4a52      	ldr	r2, [pc, #328]	; (8002034 <HAL_RCC_ClockConfig+0x1c8>)
 8001eea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001eee:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ef0:	4b50      	ldr	r3, [pc, #320]	; (8002034 <HAL_RCC_ClockConfig+0x1c8>)
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	494d      	ldr	r1, [pc, #308]	; (8002034 <HAL_RCC_ClockConfig+0x1c8>)
 8001efe:	4313      	orrs	r3, r2
 8001f00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d040      	beq.n	8001f90 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d107      	bne.n	8001f26 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f16:	4b47      	ldr	r3, [pc, #284]	; (8002034 <HAL_RCC_ClockConfig+0x1c8>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d115      	bne.n	8001f4e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e07f      	b.n	8002026 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d107      	bne.n	8001f3e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f2e:	4b41      	ldr	r3, [pc, #260]	; (8002034 <HAL_RCC_ClockConfig+0x1c8>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d109      	bne.n	8001f4e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e073      	b.n	8002026 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f3e:	4b3d      	ldr	r3, [pc, #244]	; (8002034 <HAL_RCC_ClockConfig+0x1c8>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d101      	bne.n	8001f4e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e06b      	b.n	8002026 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f4e:	4b39      	ldr	r3, [pc, #228]	; (8002034 <HAL_RCC_ClockConfig+0x1c8>)
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	f023 0203 	bic.w	r2, r3, #3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	4936      	ldr	r1, [pc, #216]	; (8002034 <HAL_RCC_ClockConfig+0x1c8>)
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f60:	f7ff f9ec 	bl	800133c <HAL_GetTick>
 8001f64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f66:	e00a      	b.n	8001f7e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f68:	f7ff f9e8 	bl	800133c <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e053      	b.n	8002026 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f7e:	4b2d      	ldr	r3, [pc, #180]	; (8002034 <HAL_RCC_ClockConfig+0x1c8>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	f003 020c 	and.w	r2, r3, #12
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d1eb      	bne.n	8001f68 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f90:	4b27      	ldr	r3, [pc, #156]	; (8002030 <HAL_RCC_ClockConfig+0x1c4>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 030f 	and.w	r3, r3, #15
 8001f98:	683a      	ldr	r2, [r7, #0]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d210      	bcs.n	8001fc0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f9e:	4b24      	ldr	r3, [pc, #144]	; (8002030 <HAL_RCC_ClockConfig+0x1c4>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f023 020f 	bic.w	r2, r3, #15
 8001fa6:	4922      	ldr	r1, [pc, #136]	; (8002030 <HAL_RCC_ClockConfig+0x1c4>)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fae:	4b20      	ldr	r3, [pc, #128]	; (8002030 <HAL_RCC_ClockConfig+0x1c4>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 030f 	and.w	r3, r3, #15
 8001fb6:	683a      	ldr	r2, [r7, #0]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d001      	beq.n	8001fc0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e032      	b.n	8002026 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0304 	and.w	r3, r3, #4
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d008      	beq.n	8001fde <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fcc:	4b19      	ldr	r3, [pc, #100]	; (8002034 <HAL_RCC_ClockConfig+0x1c8>)
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	4916      	ldr	r1, [pc, #88]	; (8002034 <HAL_RCC_ClockConfig+0x1c8>)
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0308 	and.w	r3, r3, #8
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d009      	beq.n	8001ffe <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001fea:	4b12      	ldr	r3, [pc, #72]	; (8002034 <HAL_RCC_ClockConfig+0x1c8>)
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	691b      	ldr	r3, [r3, #16]
 8001ff6:	00db      	lsls	r3, r3, #3
 8001ff8:	490e      	ldr	r1, [pc, #56]	; (8002034 <HAL_RCC_ClockConfig+0x1c8>)
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ffe:	f000 f821 	bl	8002044 <HAL_RCC_GetSysClockFreq>
 8002002:	4602      	mov	r2, r0
 8002004:	4b0b      	ldr	r3, [pc, #44]	; (8002034 <HAL_RCC_ClockConfig+0x1c8>)
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	091b      	lsrs	r3, r3, #4
 800200a:	f003 030f 	and.w	r3, r3, #15
 800200e:	490a      	ldr	r1, [pc, #40]	; (8002038 <HAL_RCC_ClockConfig+0x1cc>)
 8002010:	5ccb      	ldrb	r3, [r1, r3]
 8002012:	fa22 f303 	lsr.w	r3, r2, r3
 8002016:	4a09      	ldr	r2, [pc, #36]	; (800203c <HAL_RCC_ClockConfig+0x1d0>)
 8002018:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800201a:	4b09      	ldr	r3, [pc, #36]	; (8002040 <HAL_RCC_ClockConfig+0x1d4>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4618      	mov	r0, r3
 8002020:	f7ff f948 	bl	80012b4 <HAL_InitTick>

  return HAL_OK;
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3710      	adds	r7, #16
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	40023c00 	.word	0x40023c00
 8002034:	40023800 	.word	0x40023800
 8002038:	080047d0 	.word	0x080047d0
 800203c:	20000098 	.word	0x20000098
 8002040:	2000009c 	.word	0x2000009c

08002044 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002044:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002048:	b094      	sub	sp, #80	; 0x50
 800204a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800204c:	2300      	movs	r3, #0
 800204e:	647b      	str	r3, [r7, #68]	; 0x44
 8002050:	2300      	movs	r3, #0
 8002052:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002054:	2300      	movs	r3, #0
 8002056:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002058:	2300      	movs	r3, #0
 800205a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800205c:	4b79      	ldr	r3, [pc, #484]	; (8002244 <HAL_RCC_GetSysClockFreq+0x200>)
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	f003 030c 	and.w	r3, r3, #12
 8002064:	2b08      	cmp	r3, #8
 8002066:	d00d      	beq.n	8002084 <HAL_RCC_GetSysClockFreq+0x40>
 8002068:	2b08      	cmp	r3, #8
 800206a:	f200 80e1 	bhi.w	8002230 <HAL_RCC_GetSysClockFreq+0x1ec>
 800206e:	2b00      	cmp	r3, #0
 8002070:	d002      	beq.n	8002078 <HAL_RCC_GetSysClockFreq+0x34>
 8002072:	2b04      	cmp	r3, #4
 8002074:	d003      	beq.n	800207e <HAL_RCC_GetSysClockFreq+0x3a>
 8002076:	e0db      	b.n	8002230 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002078:	4b73      	ldr	r3, [pc, #460]	; (8002248 <HAL_RCC_GetSysClockFreq+0x204>)
 800207a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800207c:	e0db      	b.n	8002236 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800207e:	4b73      	ldr	r3, [pc, #460]	; (800224c <HAL_RCC_GetSysClockFreq+0x208>)
 8002080:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002082:	e0d8      	b.n	8002236 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002084:	4b6f      	ldr	r3, [pc, #444]	; (8002244 <HAL_RCC_GetSysClockFreq+0x200>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800208c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800208e:	4b6d      	ldr	r3, [pc, #436]	; (8002244 <HAL_RCC_GetSysClockFreq+0x200>)
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d063      	beq.n	8002162 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800209a:	4b6a      	ldr	r3, [pc, #424]	; (8002244 <HAL_RCC_GetSysClockFreq+0x200>)
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	099b      	lsrs	r3, r3, #6
 80020a0:	2200      	movs	r2, #0
 80020a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80020a4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80020a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020ac:	633b      	str	r3, [r7, #48]	; 0x30
 80020ae:	2300      	movs	r3, #0
 80020b0:	637b      	str	r3, [r7, #52]	; 0x34
 80020b2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80020b6:	4622      	mov	r2, r4
 80020b8:	462b      	mov	r3, r5
 80020ba:	f04f 0000 	mov.w	r0, #0
 80020be:	f04f 0100 	mov.w	r1, #0
 80020c2:	0159      	lsls	r1, r3, #5
 80020c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020c8:	0150      	lsls	r0, r2, #5
 80020ca:	4602      	mov	r2, r0
 80020cc:	460b      	mov	r3, r1
 80020ce:	4621      	mov	r1, r4
 80020d0:	1a51      	subs	r1, r2, r1
 80020d2:	6139      	str	r1, [r7, #16]
 80020d4:	4629      	mov	r1, r5
 80020d6:	eb63 0301 	sbc.w	r3, r3, r1
 80020da:	617b      	str	r3, [r7, #20]
 80020dc:	f04f 0200 	mov.w	r2, #0
 80020e0:	f04f 0300 	mov.w	r3, #0
 80020e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80020e8:	4659      	mov	r1, fp
 80020ea:	018b      	lsls	r3, r1, #6
 80020ec:	4651      	mov	r1, sl
 80020ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80020f2:	4651      	mov	r1, sl
 80020f4:	018a      	lsls	r2, r1, #6
 80020f6:	4651      	mov	r1, sl
 80020f8:	ebb2 0801 	subs.w	r8, r2, r1
 80020fc:	4659      	mov	r1, fp
 80020fe:	eb63 0901 	sbc.w	r9, r3, r1
 8002102:	f04f 0200 	mov.w	r2, #0
 8002106:	f04f 0300 	mov.w	r3, #0
 800210a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800210e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002112:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002116:	4690      	mov	r8, r2
 8002118:	4699      	mov	r9, r3
 800211a:	4623      	mov	r3, r4
 800211c:	eb18 0303 	adds.w	r3, r8, r3
 8002120:	60bb      	str	r3, [r7, #8]
 8002122:	462b      	mov	r3, r5
 8002124:	eb49 0303 	adc.w	r3, r9, r3
 8002128:	60fb      	str	r3, [r7, #12]
 800212a:	f04f 0200 	mov.w	r2, #0
 800212e:	f04f 0300 	mov.w	r3, #0
 8002132:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002136:	4629      	mov	r1, r5
 8002138:	024b      	lsls	r3, r1, #9
 800213a:	4621      	mov	r1, r4
 800213c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002140:	4621      	mov	r1, r4
 8002142:	024a      	lsls	r2, r1, #9
 8002144:	4610      	mov	r0, r2
 8002146:	4619      	mov	r1, r3
 8002148:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800214a:	2200      	movs	r2, #0
 800214c:	62bb      	str	r3, [r7, #40]	; 0x28
 800214e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002150:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002154:	f7fe f858 	bl	8000208 <__aeabi_uldivmod>
 8002158:	4602      	mov	r2, r0
 800215a:	460b      	mov	r3, r1
 800215c:	4613      	mov	r3, r2
 800215e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002160:	e058      	b.n	8002214 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002162:	4b38      	ldr	r3, [pc, #224]	; (8002244 <HAL_RCC_GetSysClockFreq+0x200>)
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	099b      	lsrs	r3, r3, #6
 8002168:	2200      	movs	r2, #0
 800216a:	4618      	mov	r0, r3
 800216c:	4611      	mov	r1, r2
 800216e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002172:	623b      	str	r3, [r7, #32]
 8002174:	2300      	movs	r3, #0
 8002176:	627b      	str	r3, [r7, #36]	; 0x24
 8002178:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800217c:	4642      	mov	r2, r8
 800217e:	464b      	mov	r3, r9
 8002180:	f04f 0000 	mov.w	r0, #0
 8002184:	f04f 0100 	mov.w	r1, #0
 8002188:	0159      	lsls	r1, r3, #5
 800218a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800218e:	0150      	lsls	r0, r2, #5
 8002190:	4602      	mov	r2, r0
 8002192:	460b      	mov	r3, r1
 8002194:	4641      	mov	r1, r8
 8002196:	ebb2 0a01 	subs.w	sl, r2, r1
 800219a:	4649      	mov	r1, r9
 800219c:	eb63 0b01 	sbc.w	fp, r3, r1
 80021a0:	f04f 0200 	mov.w	r2, #0
 80021a4:	f04f 0300 	mov.w	r3, #0
 80021a8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80021ac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80021b0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80021b4:	ebb2 040a 	subs.w	r4, r2, sl
 80021b8:	eb63 050b 	sbc.w	r5, r3, fp
 80021bc:	f04f 0200 	mov.w	r2, #0
 80021c0:	f04f 0300 	mov.w	r3, #0
 80021c4:	00eb      	lsls	r3, r5, #3
 80021c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80021ca:	00e2      	lsls	r2, r4, #3
 80021cc:	4614      	mov	r4, r2
 80021ce:	461d      	mov	r5, r3
 80021d0:	4643      	mov	r3, r8
 80021d2:	18e3      	adds	r3, r4, r3
 80021d4:	603b      	str	r3, [r7, #0]
 80021d6:	464b      	mov	r3, r9
 80021d8:	eb45 0303 	adc.w	r3, r5, r3
 80021dc:	607b      	str	r3, [r7, #4]
 80021de:	f04f 0200 	mov.w	r2, #0
 80021e2:	f04f 0300 	mov.w	r3, #0
 80021e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80021ea:	4629      	mov	r1, r5
 80021ec:	028b      	lsls	r3, r1, #10
 80021ee:	4621      	mov	r1, r4
 80021f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80021f4:	4621      	mov	r1, r4
 80021f6:	028a      	lsls	r2, r1, #10
 80021f8:	4610      	mov	r0, r2
 80021fa:	4619      	mov	r1, r3
 80021fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021fe:	2200      	movs	r2, #0
 8002200:	61bb      	str	r3, [r7, #24]
 8002202:	61fa      	str	r2, [r7, #28]
 8002204:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002208:	f7fd fffe 	bl	8000208 <__aeabi_uldivmod>
 800220c:	4602      	mov	r2, r0
 800220e:	460b      	mov	r3, r1
 8002210:	4613      	mov	r3, r2
 8002212:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002214:	4b0b      	ldr	r3, [pc, #44]	; (8002244 <HAL_RCC_GetSysClockFreq+0x200>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	0c1b      	lsrs	r3, r3, #16
 800221a:	f003 0303 	and.w	r3, r3, #3
 800221e:	3301      	adds	r3, #1
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002224:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002226:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002228:	fbb2 f3f3 	udiv	r3, r2, r3
 800222c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800222e:	e002      	b.n	8002236 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002230:	4b05      	ldr	r3, [pc, #20]	; (8002248 <HAL_RCC_GetSysClockFreq+0x204>)
 8002232:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002234:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002236:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002238:	4618      	mov	r0, r3
 800223a:	3750      	adds	r7, #80	; 0x50
 800223c:	46bd      	mov	sp, r7
 800223e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002242:	bf00      	nop
 8002244:	40023800 	.word	0x40023800
 8002248:	00f42400 	.word	0x00f42400
 800224c:	007a1200 	.word	0x007a1200

08002250 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002254:	4b03      	ldr	r3, [pc, #12]	; (8002264 <HAL_RCC_GetHCLKFreq+0x14>)
 8002256:	681b      	ldr	r3, [r3, #0]
}
 8002258:	4618      	mov	r0, r3
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	20000098 	.word	0x20000098

08002268 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800226c:	f7ff fff0 	bl	8002250 <HAL_RCC_GetHCLKFreq>
 8002270:	4602      	mov	r2, r0
 8002272:	4b05      	ldr	r3, [pc, #20]	; (8002288 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	0a9b      	lsrs	r3, r3, #10
 8002278:	f003 0307 	and.w	r3, r3, #7
 800227c:	4903      	ldr	r1, [pc, #12]	; (800228c <HAL_RCC_GetPCLK1Freq+0x24>)
 800227e:	5ccb      	ldrb	r3, [r1, r3]
 8002280:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002284:	4618      	mov	r0, r3
 8002286:	bd80      	pop	{r7, pc}
 8002288:	40023800 	.word	0x40023800
 800228c:	080047e0 	.word	0x080047e0

08002290 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002294:	f7ff ffdc 	bl	8002250 <HAL_RCC_GetHCLKFreq>
 8002298:	4602      	mov	r2, r0
 800229a:	4b05      	ldr	r3, [pc, #20]	; (80022b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	0b5b      	lsrs	r3, r3, #13
 80022a0:	f003 0307 	and.w	r3, r3, #7
 80022a4:	4903      	ldr	r1, [pc, #12]	; (80022b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022a6:	5ccb      	ldrb	r3, [r1, r3]
 80022a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	40023800 	.word	0x40023800
 80022b4:	080047e0 	.word	0x080047e0

080022b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b088      	sub	sp, #32
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80022c0:	2300      	movs	r3, #0
 80022c2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80022c4:	2300      	movs	r3, #0
 80022c6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80022c8:	2300      	movs	r3, #0
 80022ca:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80022cc:	2300      	movs	r3, #0
 80022ce:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80022d0:	2300      	movs	r3, #0
 80022d2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0301 	and.w	r3, r3, #1
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d012      	beq.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80022e0:	4b69      	ldr	r3, [pc, #420]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	4a68      	ldr	r2, [pc, #416]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022e6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80022ea:	6093      	str	r3, [r2, #8]
 80022ec:	4b66      	ldr	r3, [pc, #408]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022ee:	689a      	ldr	r2, [r3, #8]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022f4:	4964      	ldr	r1, [pc, #400]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d101      	bne.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002302:	2301      	movs	r3, #1
 8002304:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d017      	beq.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002312:	4b5d      	ldr	r3, [pc, #372]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002314:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002318:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002320:	4959      	ldr	r1, [pc, #356]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002322:	4313      	orrs	r3, r2
 8002324:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800232c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002330:	d101      	bne.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002332:	2301      	movs	r3, #1
 8002334:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800233a:	2b00      	cmp	r3, #0
 800233c:	d101      	bne.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800233e:	2301      	movs	r3, #1
 8002340:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d017      	beq.n	800237e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800234e:	4b4e      	ldr	r3, [pc, #312]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002350:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002354:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235c:	494a      	ldr	r1, [pc, #296]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800235e:	4313      	orrs	r3, r2
 8002360:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002368:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800236c:	d101      	bne.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800236e:	2301      	movs	r3, #1
 8002370:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002376:	2b00      	cmp	r3, #0
 8002378:	d101      	bne.n	800237e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800237a:	2301      	movs	r3, #1
 800237c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800238a:	2301      	movs	r3, #1
 800238c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0320 	and.w	r3, r3, #32
 8002396:	2b00      	cmp	r3, #0
 8002398:	f000 808b 	beq.w	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800239c:	4b3a      	ldr	r3, [pc, #232]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800239e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a0:	4a39      	ldr	r2, [pc, #228]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023a6:	6413      	str	r3, [r2, #64]	; 0x40
 80023a8:	4b37      	ldr	r3, [pc, #220]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023b0:	60bb      	str	r3, [r7, #8]
 80023b2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80023b4:	4b35      	ldr	r3, [pc, #212]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a34      	ldr	r2, [pc, #208]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80023ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023c0:	f7fe ffbc 	bl	800133c <HAL_GetTick>
 80023c4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80023c6:	e008      	b.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023c8:	f7fe ffb8 	bl	800133c <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b64      	cmp	r3, #100	; 0x64
 80023d4:	d901      	bls.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e357      	b.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80023da:	4b2c      	ldr	r3, [pc, #176]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d0f0      	beq.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80023e6:	4b28      	ldr	r3, [pc, #160]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023ee:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d035      	beq.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	429a      	cmp	r2, r3
 8002402:	d02e      	beq.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002404:	4b20      	ldr	r3, [pc, #128]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002408:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800240c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800240e:	4b1e      	ldr	r3, [pc, #120]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002412:	4a1d      	ldr	r2, [pc, #116]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002414:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002418:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800241a:	4b1b      	ldr	r3, [pc, #108]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800241c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800241e:	4a1a      	ldr	r2, [pc, #104]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002420:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002424:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002426:	4a18      	ldr	r2, [pc, #96]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800242c:	4b16      	ldr	r3, [pc, #88]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800242e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002430:	f003 0301 	and.w	r3, r3, #1
 8002434:	2b01      	cmp	r3, #1
 8002436:	d114      	bne.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002438:	f7fe ff80 	bl	800133c <HAL_GetTick>
 800243c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800243e:	e00a      	b.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002440:	f7fe ff7c 	bl	800133c <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	f241 3288 	movw	r2, #5000	; 0x1388
 800244e:	4293      	cmp	r3, r2
 8002450:	d901      	bls.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e319      	b.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002456:	4b0c      	ldr	r3, [pc, #48]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800245a:	f003 0302 	and.w	r3, r3, #2
 800245e:	2b00      	cmp	r3, #0
 8002460:	d0ee      	beq.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002466:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800246a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800246e:	d111      	bne.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002470:	4b05      	ldr	r3, [pc, #20]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800247c:	4b04      	ldr	r3, [pc, #16]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800247e:	400b      	ands	r3, r1
 8002480:	4901      	ldr	r1, [pc, #4]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002482:	4313      	orrs	r3, r2
 8002484:	608b      	str	r3, [r1, #8]
 8002486:	e00b      	b.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002488:	40023800 	.word	0x40023800
 800248c:	40007000 	.word	0x40007000
 8002490:	0ffffcff 	.word	0x0ffffcff
 8002494:	4baa      	ldr	r3, [pc, #680]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	4aa9      	ldr	r2, [pc, #676]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800249a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800249e:	6093      	str	r3, [r2, #8]
 80024a0:	4ba7      	ldr	r3, [pc, #668]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024ac:	49a4      	ldr	r1, [pc, #656]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024ae:	4313      	orrs	r3, r2
 80024b0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0310 	and.w	r3, r3, #16
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d010      	beq.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80024be:	4ba0      	ldr	r3, [pc, #640]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024c4:	4a9e      	ldr	r2, [pc, #632]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024ca:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80024ce:	4b9c      	ldr	r3, [pc, #624]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024d0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024d8:	4999      	ldr	r1, [pc, #612]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d00a      	beq.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024ec:	4b94      	ldr	r3, [pc, #592]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024f2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024fa:	4991      	ldr	r1, [pc, #580]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024fc:	4313      	orrs	r3, r2
 80024fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d00a      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800250e:	4b8c      	ldr	r3, [pc, #560]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002514:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800251c:	4988      	ldr	r1, [pc, #544]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800251e:	4313      	orrs	r3, r2
 8002520:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d00a      	beq.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002530:	4b83      	ldr	r3, [pc, #524]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002536:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800253e:	4980      	ldr	r1, [pc, #512]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002540:	4313      	orrs	r3, r2
 8002542:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00a      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002552:	4b7b      	ldr	r3, [pc, #492]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002554:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002558:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002560:	4977      	ldr	r1, [pc, #476]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002562:	4313      	orrs	r3, r2
 8002564:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002570:	2b00      	cmp	r3, #0
 8002572:	d00a      	beq.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002574:	4b72      	ldr	r3, [pc, #456]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800257a:	f023 0203 	bic.w	r2, r3, #3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002582:	496f      	ldr	r1, [pc, #444]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002584:	4313      	orrs	r3, r2
 8002586:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002592:	2b00      	cmp	r3, #0
 8002594:	d00a      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002596:	4b6a      	ldr	r3, [pc, #424]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002598:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800259c:	f023 020c 	bic.w	r2, r3, #12
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025a4:	4966      	ldr	r1, [pc, #408]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d00a      	beq.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80025b8:	4b61      	ldr	r3, [pc, #388]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025be:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025c6:	495e      	ldr	r1, [pc, #376]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d00a      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80025da:	4b59      	ldr	r3, [pc, #356]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025e0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025e8:	4955      	ldr	r1, [pc, #340]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d00a      	beq.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80025fc:	4b50      	ldr	r3, [pc, #320]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002602:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800260a:	494d      	ldr	r1, [pc, #308]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800260c:	4313      	orrs	r3, r2
 800260e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800261a:	2b00      	cmp	r3, #0
 800261c:	d00a      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800261e:	4b48      	ldr	r3, [pc, #288]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002620:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002624:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800262c:	4944      	ldr	r1, [pc, #272]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800262e:	4313      	orrs	r3, r2
 8002630:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d00a      	beq.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002640:	4b3f      	ldr	r3, [pc, #252]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002642:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002646:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800264e:	493c      	ldr	r1, [pc, #240]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002650:	4313      	orrs	r3, r2
 8002652:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00a      	beq.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002662:	4b37      	ldr	r3, [pc, #220]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002664:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002668:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002670:	4933      	ldr	r1, [pc, #204]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002672:	4313      	orrs	r3, r2
 8002674:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d00a      	beq.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002684:	4b2e      	ldr	r3, [pc, #184]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800268a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002692:	492b      	ldr	r1, [pc, #172]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002694:	4313      	orrs	r3, r2
 8002696:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d011      	beq.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80026a6:	4b26      	ldr	r3, [pc, #152]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ac:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026b4:	4922      	ldr	r1, [pc, #136]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026c4:	d101      	bne.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80026c6:	2301      	movs	r3, #1
 80026c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0308 	and.w	r3, r3, #8
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80026d6:	2301      	movs	r3, #1
 80026d8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d00a      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80026e6:	4b16      	ldr	r3, [pc, #88]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ec:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026f4:	4912      	ldr	r1, [pc, #72]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026f6:	4313      	orrs	r3, r2
 80026f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d00b      	beq.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002708:	4b0d      	ldr	r3, [pc, #52]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800270a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800270e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002718:	4909      	ldr	r1, [pc, #36]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800271a:	4313      	orrs	r3, r2
 800271c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	2b01      	cmp	r3, #1
 8002724:	d006      	beq.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800272e:	2b00      	cmp	r3, #0
 8002730:	f000 80d9 	beq.w	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002734:	4b02      	ldr	r3, [pc, #8]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a01      	ldr	r2, [pc, #4]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800273a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800273e:	e001      	b.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002740:	40023800 	.word	0x40023800
 8002744:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002746:	f7fe fdf9 	bl	800133c <HAL_GetTick>
 800274a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800274c:	e008      	b.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800274e:	f7fe fdf5 	bl	800133c <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	2b64      	cmp	r3, #100	; 0x64
 800275a:	d901      	bls.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	e194      	b.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002760:	4b6c      	ldr	r3, [pc, #432]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d1f0      	bne.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0301 	and.w	r3, r3, #1
 8002774:	2b00      	cmp	r3, #0
 8002776:	d021      	beq.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800277c:	2b00      	cmp	r3, #0
 800277e:	d11d      	bne.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002780:	4b64      	ldr	r3, [pc, #400]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002782:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002786:	0c1b      	lsrs	r3, r3, #16
 8002788:	f003 0303 	and.w	r3, r3, #3
 800278c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800278e:	4b61      	ldr	r3, [pc, #388]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002790:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002794:	0e1b      	lsrs	r3, r3, #24
 8002796:	f003 030f 	and.w	r3, r3, #15
 800279a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	019a      	lsls	r2, r3, #6
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	041b      	lsls	r3, r3, #16
 80027a6:	431a      	orrs	r2, r3
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	061b      	lsls	r3, r3, #24
 80027ac:	431a      	orrs	r2, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	071b      	lsls	r3, r3, #28
 80027b4:	4957      	ldr	r1, [pc, #348]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027b6:	4313      	orrs	r3, r2
 80027b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d004      	beq.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027d0:	d00a      	beq.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d02e      	beq.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027e6:	d129      	bne.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80027e8:	4b4a      	ldr	r3, [pc, #296]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027ee:	0c1b      	lsrs	r3, r3, #16
 80027f0:	f003 0303 	and.w	r3, r3, #3
 80027f4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80027f6:	4b47      	ldr	r3, [pc, #284]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027fc:	0f1b      	lsrs	r3, r3, #28
 80027fe:	f003 0307 	and.w	r3, r3, #7
 8002802:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	019a      	lsls	r2, r3, #6
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	041b      	lsls	r3, r3, #16
 800280e:	431a      	orrs	r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	061b      	lsls	r3, r3, #24
 8002816:	431a      	orrs	r2, r3
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	071b      	lsls	r3, r3, #28
 800281c:	493d      	ldr	r1, [pc, #244]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800281e:	4313      	orrs	r3, r2
 8002820:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002824:	4b3b      	ldr	r3, [pc, #236]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002826:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800282a:	f023 021f 	bic.w	r2, r3, #31
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002832:	3b01      	subs	r3, #1
 8002834:	4937      	ldr	r1, [pc, #220]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002836:	4313      	orrs	r3, r2
 8002838:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d01d      	beq.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002848:	4b32      	ldr	r3, [pc, #200]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800284a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800284e:	0e1b      	lsrs	r3, r3, #24
 8002850:	f003 030f 	and.w	r3, r3, #15
 8002854:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002856:	4b2f      	ldr	r3, [pc, #188]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002858:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800285c:	0f1b      	lsrs	r3, r3, #28
 800285e:	f003 0307 	and.w	r3, r3, #7
 8002862:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	019a      	lsls	r2, r3, #6
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	041b      	lsls	r3, r3, #16
 8002870:	431a      	orrs	r2, r3
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	061b      	lsls	r3, r3, #24
 8002876:	431a      	orrs	r2, r3
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	071b      	lsls	r3, r3, #28
 800287c:	4925      	ldr	r1, [pc, #148]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800287e:	4313      	orrs	r3, r2
 8002880:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d011      	beq.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	019a      	lsls	r2, r3, #6
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	041b      	lsls	r3, r3, #16
 800289c:	431a      	orrs	r2, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	061b      	lsls	r3, r3, #24
 80028a4:	431a      	orrs	r2, r3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	071b      	lsls	r3, r3, #28
 80028ac:	4919      	ldr	r1, [pc, #100]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80028b4:	4b17      	ldr	r3, [pc, #92]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a16      	ldr	r2, [pc, #88]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80028be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028c0:	f7fe fd3c 	bl	800133c <HAL_GetTick>
 80028c4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80028c6:	e008      	b.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80028c8:	f7fe fd38 	bl	800133c <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b64      	cmp	r3, #100	; 0x64
 80028d4:	d901      	bls.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e0d7      	b.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80028da:	4b0e      	ldr	r3, [pc, #56]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d0f0      	beq.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	f040 80cd 	bne.w	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80028ee:	4b09      	ldr	r3, [pc, #36]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a08      	ldr	r2, [pc, #32]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028fa:	f7fe fd1f 	bl	800133c <HAL_GetTick>
 80028fe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002900:	e00a      	b.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002902:	f7fe fd1b 	bl	800133c <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	2b64      	cmp	r3, #100	; 0x64
 800290e:	d903      	bls.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e0ba      	b.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002914:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002918:	4b5e      	ldr	r3, [pc, #376]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002920:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002924:	d0ed      	beq.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d003      	beq.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002936:	2b00      	cmp	r3, #0
 8002938:	d009      	beq.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002942:	2b00      	cmp	r3, #0
 8002944:	d02e      	beq.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294a:	2b00      	cmp	r3, #0
 800294c:	d12a      	bne.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800294e:	4b51      	ldr	r3, [pc, #324]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002950:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002954:	0c1b      	lsrs	r3, r3, #16
 8002956:	f003 0303 	and.w	r3, r3, #3
 800295a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800295c:	4b4d      	ldr	r3, [pc, #308]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800295e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002962:	0f1b      	lsrs	r3, r3, #28
 8002964:	f003 0307 	and.w	r3, r3, #7
 8002968:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	695b      	ldr	r3, [r3, #20]
 800296e:	019a      	lsls	r2, r3, #6
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	041b      	lsls	r3, r3, #16
 8002974:	431a      	orrs	r2, r3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	699b      	ldr	r3, [r3, #24]
 800297a:	061b      	lsls	r3, r3, #24
 800297c:	431a      	orrs	r2, r3
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	071b      	lsls	r3, r3, #28
 8002982:	4944      	ldr	r1, [pc, #272]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002984:	4313      	orrs	r3, r2
 8002986:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800298a:	4b42      	ldr	r3, [pc, #264]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800298c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002990:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002998:	3b01      	subs	r3, #1
 800299a:	021b      	lsls	r3, r3, #8
 800299c:	493d      	ldr	r1, [pc, #244]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d022      	beq.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029b8:	d11d      	bne.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80029ba:	4b36      	ldr	r3, [pc, #216]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80029bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029c0:	0e1b      	lsrs	r3, r3, #24
 80029c2:	f003 030f 	and.w	r3, r3, #15
 80029c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80029c8:	4b32      	ldr	r3, [pc, #200]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80029ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ce:	0f1b      	lsrs	r3, r3, #28
 80029d0:	f003 0307 	and.w	r3, r3, #7
 80029d4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	019a      	lsls	r2, r3, #6
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6a1b      	ldr	r3, [r3, #32]
 80029e0:	041b      	lsls	r3, r3, #16
 80029e2:	431a      	orrs	r2, r3
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	061b      	lsls	r3, r3, #24
 80029e8:	431a      	orrs	r2, r3
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	071b      	lsls	r3, r3, #28
 80029ee:	4929      	ldr	r1, [pc, #164]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0308 	and.w	r3, r3, #8
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d028      	beq.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002a02:	4b24      	ldr	r3, [pc, #144]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a08:	0e1b      	lsrs	r3, r3, #24
 8002a0a:	f003 030f 	and.w	r3, r3, #15
 8002a0e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002a10:	4b20      	ldr	r3, [pc, #128]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a16:	0c1b      	lsrs	r3, r3, #16
 8002a18:	f003 0303 	and.w	r3, r3, #3
 8002a1c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	695b      	ldr	r3, [r3, #20]
 8002a22:	019a      	lsls	r2, r3, #6
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	041b      	lsls	r3, r3, #16
 8002a28:	431a      	orrs	r2, r3
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	061b      	lsls	r3, r3, #24
 8002a2e:	431a      	orrs	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	69db      	ldr	r3, [r3, #28]
 8002a34:	071b      	lsls	r3, r3, #28
 8002a36:	4917      	ldr	r1, [pc, #92]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002a3e:	4b15      	ldr	r3, [pc, #84]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a44:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a4c:	4911      	ldr	r1, [pc, #68]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002a54:	4b0f      	ldr	r3, [pc, #60]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a0e      	ldr	r2, [pc, #56]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a60:	f7fe fc6c 	bl	800133c <HAL_GetTick>
 8002a64:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002a66:	e008      	b.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002a68:	f7fe fc68 	bl	800133c <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b64      	cmp	r3, #100	; 0x64
 8002a74:	d901      	bls.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e007      	b.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002a7a:	4b06      	ldr	r3, [pc, #24]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a86:	d1ef      	bne.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3720      	adds	r7, #32
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	40023800 	.word	0x40023800

08002a98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d101      	bne.n	8002aaa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e049      	b.n	8002b3e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d106      	bne.n	8002ac4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f7fe fa74 	bl	8000fac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2202      	movs	r2, #2
 8002ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	3304      	adds	r3, #4
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	4610      	mov	r0, r2
 8002ad8:	f000 fcf8 	bl	80034cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3708      	adds	r7, #8
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
	...

08002b48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b085      	sub	sp, #20
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d001      	beq.n	8002b60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e054      	b.n	8002c0a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2202      	movs	r2, #2
 8002b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	68da      	ldr	r2, [r3, #12]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f042 0201 	orr.w	r2, r2, #1
 8002b76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a26      	ldr	r2, [pc, #152]	; (8002c18 <HAL_TIM_Base_Start_IT+0xd0>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d022      	beq.n	8002bc8 <HAL_TIM_Base_Start_IT+0x80>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b8a:	d01d      	beq.n	8002bc8 <HAL_TIM_Base_Start_IT+0x80>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a22      	ldr	r2, [pc, #136]	; (8002c1c <HAL_TIM_Base_Start_IT+0xd4>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d018      	beq.n	8002bc8 <HAL_TIM_Base_Start_IT+0x80>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a21      	ldr	r2, [pc, #132]	; (8002c20 <HAL_TIM_Base_Start_IT+0xd8>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d013      	beq.n	8002bc8 <HAL_TIM_Base_Start_IT+0x80>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a1f      	ldr	r2, [pc, #124]	; (8002c24 <HAL_TIM_Base_Start_IT+0xdc>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d00e      	beq.n	8002bc8 <HAL_TIM_Base_Start_IT+0x80>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a1e      	ldr	r2, [pc, #120]	; (8002c28 <HAL_TIM_Base_Start_IT+0xe0>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d009      	beq.n	8002bc8 <HAL_TIM_Base_Start_IT+0x80>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a1c      	ldr	r2, [pc, #112]	; (8002c2c <HAL_TIM_Base_Start_IT+0xe4>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d004      	beq.n	8002bc8 <HAL_TIM_Base_Start_IT+0x80>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a1b      	ldr	r2, [pc, #108]	; (8002c30 <HAL_TIM_Base_Start_IT+0xe8>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d115      	bne.n	8002bf4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	689a      	ldr	r2, [r3, #8]
 8002bce:	4b19      	ldr	r3, [pc, #100]	; (8002c34 <HAL_TIM_Base_Start_IT+0xec>)
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2b06      	cmp	r3, #6
 8002bd8:	d015      	beq.n	8002c06 <HAL_TIM_Base_Start_IT+0xbe>
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002be0:	d011      	beq.n	8002c06 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f042 0201 	orr.w	r2, r2, #1
 8002bf0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bf2:	e008      	b.n	8002c06 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f042 0201 	orr.w	r2, r2, #1
 8002c02:	601a      	str	r2, [r3, #0]
 8002c04:	e000      	b.n	8002c08 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c06:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002c08:	2300      	movs	r3, #0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3714      	adds	r7, #20
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	40010000 	.word	0x40010000
 8002c1c:	40000400 	.word	0x40000400
 8002c20:	40000800 	.word	0x40000800
 8002c24:	40000c00 	.word	0x40000c00
 8002c28:	40010400 	.word	0x40010400
 8002c2c:	40014000 	.word	0x40014000
 8002c30:	40001800 	.word	0x40001800
 8002c34:	00010007 	.word	0x00010007

08002c38 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d101      	bne.n	8002c4a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e049      	b.n	8002cde <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d106      	bne.n	8002c64 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f000 f841 	bl	8002ce6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2202      	movs	r2, #2
 8002c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	3304      	adds	r3, #4
 8002c74:	4619      	mov	r1, r3
 8002c76:	4610      	mov	r0, r2
 8002c78:	f000 fc28 	bl	80034cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3708      	adds	r7, #8
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	b083      	sub	sp, #12
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002cee:	bf00      	nop
 8002cf0:	370c      	adds	r7, #12
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
	...

08002cfc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	6839      	ldr	r1, [r7, #0]
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f001 f808 	bl	8003d24 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a36      	ldr	r2, [pc, #216]	; (8002df4 <HAL_TIM_PWM_Stop+0xf8>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d004      	beq.n	8002d28 <HAL_TIM_PWM_Stop+0x2c>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a35      	ldr	r2, [pc, #212]	; (8002df8 <HAL_TIM_PWM_Stop+0xfc>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d101      	bne.n	8002d2c <HAL_TIM_PWM_Stop+0x30>
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e000      	b.n	8002d2e <HAL_TIM_PWM_Stop+0x32>
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d017      	beq.n	8002d62 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	6a1a      	ldr	r2, [r3, #32]
 8002d38:	f241 1311 	movw	r3, #4369	; 0x1111
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d10f      	bne.n	8002d62 <HAL_TIM_PWM_Stop+0x66>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	6a1a      	ldr	r2, [r3, #32]
 8002d48:	f240 4344 	movw	r3, #1092	; 0x444
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d107      	bne.n	8002d62 <HAL_TIM_PWM_Stop+0x66>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d60:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	6a1a      	ldr	r2, [r3, #32]
 8002d68:	f241 1311 	movw	r3, #4369	; 0x1111
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d10f      	bne.n	8002d92 <HAL_TIM_PWM_Stop+0x96>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	6a1a      	ldr	r2, [r3, #32]
 8002d78:	f240 4344 	movw	r3, #1092	; 0x444
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d107      	bne.n	8002d92 <HAL_TIM_PWM_Stop+0x96>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f022 0201 	bic.w	r2, r2, #1
 8002d90:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d104      	bne.n	8002da2 <HAL_TIM_PWM_Stop+0xa6>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002da0:	e023      	b.n	8002dea <HAL_TIM_PWM_Stop+0xee>
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	2b04      	cmp	r3, #4
 8002da6:	d104      	bne.n	8002db2 <HAL_TIM_PWM_Stop+0xb6>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002db0:	e01b      	b.n	8002dea <HAL_TIM_PWM_Stop+0xee>
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	2b08      	cmp	r3, #8
 8002db6:	d104      	bne.n	8002dc2 <HAL_TIM_PWM_Stop+0xc6>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002dc0:	e013      	b.n	8002dea <HAL_TIM_PWM_Stop+0xee>
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	2b0c      	cmp	r3, #12
 8002dc6:	d104      	bne.n	8002dd2 <HAL_TIM_PWM_Stop+0xd6>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002dd0:	e00b      	b.n	8002dea <HAL_TIM_PWM_Stop+0xee>
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	2b10      	cmp	r3, #16
 8002dd6:	d104      	bne.n	8002de2 <HAL_TIM_PWM_Stop+0xe6>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002de0:	e003      	b.n	8002dea <HAL_TIM_PWM_Stop+0xee>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2201      	movs	r2, #1
 8002de6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8002dea:	2300      	movs	r3, #0
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3708      	adds	r7, #8
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	40010000 	.word	0x40010000
 8002df8:	40010400 	.word	0x40010400

08002dfc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	691b      	ldr	r3, [r3, #16]
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d122      	bne.n	8002e58 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	f003 0302 	and.w	r3, r3, #2
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d11b      	bne.n	8002e58 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f06f 0202 	mvn.w	r2, #2
 8002e28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	699b      	ldr	r3, [r3, #24]
 8002e36:	f003 0303 	and.w	r3, r3, #3
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d003      	beq.n	8002e46 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 fb26 	bl	8003490 <HAL_TIM_IC_CaptureCallback>
 8002e44:	e005      	b.n	8002e52 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f000 fb18 	bl	800347c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f000 fb29 	bl	80034a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	f003 0304 	and.w	r3, r3, #4
 8002e62:	2b04      	cmp	r3, #4
 8002e64:	d122      	bne.n	8002eac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	f003 0304 	and.w	r3, r3, #4
 8002e70:	2b04      	cmp	r3, #4
 8002e72:	d11b      	bne.n	8002eac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f06f 0204 	mvn.w	r2, #4
 8002e7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2202      	movs	r2, #2
 8002e82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d003      	beq.n	8002e9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f000 fafc 	bl	8003490 <HAL_TIM_IC_CaptureCallback>
 8002e98:	e005      	b.n	8002ea6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f000 faee 	bl	800347c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f000 faff 	bl	80034a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	691b      	ldr	r3, [r3, #16]
 8002eb2:	f003 0308 	and.w	r3, r3, #8
 8002eb6:	2b08      	cmp	r3, #8
 8002eb8:	d122      	bne.n	8002f00 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	f003 0308 	and.w	r3, r3, #8
 8002ec4:	2b08      	cmp	r3, #8
 8002ec6:	d11b      	bne.n	8002f00 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f06f 0208 	mvn.w	r2, #8
 8002ed0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2204      	movs	r2, #4
 8002ed6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	69db      	ldr	r3, [r3, #28]
 8002ede:	f003 0303 	and.w	r3, r3, #3
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d003      	beq.n	8002eee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f000 fad2 	bl	8003490 <HAL_TIM_IC_CaptureCallback>
 8002eec:	e005      	b.n	8002efa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f000 fac4 	bl	800347c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f000 fad5 	bl	80034a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	691b      	ldr	r3, [r3, #16]
 8002f06:	f003 0310 	and.w	r3, r3, #16
 8002f0a:	2b10      	cmp	r3, #16
 8002f0c:	d122      	bne.n	8002f54 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	f003 0310 	and.w	r3, r3, #16
 8002f18:	2b10      	cmp	r3, #16
 8002f1a:	d11b      	bne.n	8002f54 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f06f 0210 	mvn.w	r2, #16
 8002f24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2208      	movs	r2, #8
 8002f2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	69db      	ldr	r3, [r3, #28]
 8002f32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d003      	beq.n	8002f42 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f000 faa8 	bl	8003490 <HAL_TIM_IC_CaptureCallback>
 8002f40:	e005      	b.n	8002f4e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f000 fa9a 	bl	800347c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f000 faab 	bl	80034a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	691b      	ldr	r3, [r3, #16]
 8002f5a:	f003 0301 	and.w	r3, r3, #1
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d10e      	bne.n	8002f80 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	f003 0301 	and.w	r3, r3, #1
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d107      	bne.n	8002f80 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f06f 0201 	mvn.w	r2, #1
 8002f78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f7fd fdf2 	bl	8000b64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	691b      	ldr	r3, [r3, #16]
 8002f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f8a:	2b80      	cmp	r3, #128	; 0x80
 8002f8c:	d10e      	bne.n	8002fac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f98:	2b80      	cmp	r3, #128	; 0x80
 8002f9a:	d107      	bne.n	8002fac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002fa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f000 ff7a 	bl	8003ea0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fba:	d10e      	bne.n	8002fda <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fc6:	2b80      	cmp	r3, #128	; 0x80
 8002fc8:	d107      	bne.n	8002fda <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002fd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f000 ff6d 	bl	8003eb4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	691b      	ldr	r3, [r3, #16]
 8002fe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fe4:	2b40      	cmp	r3, #64	; 0x40
 8002fe6:	d10e      	bne.n	8003006 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ff2:	2b40      	cmp	r3, #64	; 0x40
 8002ff4:	d107      	bne.n	8003006 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ffe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f000 fa59 	bl	80034b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	691b      	ldr	r3, [r3, #16]
 800300c:	f003 0320 	and.w	r3, r3, #32
 8003010:	2b20      	cmp	r3, #32
 8003012:	d10e      	bne.n	8003032 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	f003 0320 	and.w	r3, r3, #32
 800301e:	2b20      	cmp	r3, #32
 8003020:	d107      	bne.n	8003032 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f06f 0220 	mvn.w	r2, #32
 800302a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f000 ff2d 	bl	8003e8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003032:	bf00      	nop
 8003034:	3708      	adds	r7, #8
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
	...

0800303c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b086      	sub	sp, #24
 8003040:	af00      	add	r7, sp, #0
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	60b9      	str	r1, [r7, #8]
 8003046:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003048:	2300      	movs	r3, #0
 800304a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003052:	2b01      	cmp	r3, #1
 8003054:	d101      	bne.n	800305a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003056:	2302      	movs	r3, #2
 8003058:	e0ff      	b.n	800325a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2201      	movs	r2, #1
 800305e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2b14      	cmp	r3, #20
 8003066:	f200 80f0 	bhi.w	800324a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800306a:	a201      	add	r2, pc, #4	; (adr r2, 8003070 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800306c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003070:	080030c5 	.word	0x080030c5
 8003074:	0800324b 	.word	0x0800324b
 8003078:	0800324b 	.word	0x0800324b
 800307c:	0800324b 	.word	0x0800324b
 8003080:	08003105 	.word	0x08003105
 8003084:	0800324b 	.word	0x0800324b
 8003088:	0800324b 	.word	0x0800324b
 800308c:	0800324b 	.word	0x0800324b
 8003090:	08003147 	.word	0x08003147
 8003094:	0800324b 	.word	0x0800324b
 8003098:	0800324b 	.word	0x0800324b
 800309c:	0800324b 	.word	0x0800324b
 80030a0:	08003187 	.word	0x08003187
 80030a4:	0800324b 	.word	0x0800324b
 80030a8:	0800324b 	.word	0x0800324b
 80030ac:	0800324b 	.word	0x0800324b
 80030b0:	080031c9 	.word	0x080031c9
 80030b4:	0800324b 	.word	0x0800324b
 80030b8:	0800324b 	.word	0x0800324b
 80030bc:	0800324b 	.word	0x0800324b
 80030c0:	08003209 	.word	0x08003209
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	68b9      	ldr	r1, [r7, #8]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f000 fa9e 	bl	800360c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	699a      	ldr	r2, [r3, #24]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f042 0208 	orr.w	r2, r2, #8
 80030de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	699a      	ldr	r2, [r3, #24]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f022 0204 	bic.w	r2, r2, #4
 80030ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	6999      	ldr	r1, [r3, #24]
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	691a      	ldr	r2, [r3, #16]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	430a      	orrs	r2, r1
 8003100:	619a      	str	r2, [r3, #24]
      break;
 8003102:	e0a5      	b.n	8003250 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	68b9      	ldr	r1, [r7, #8]
 800310a:	4618      	mov	r0, r3
 800310c:	f000 faf0 	bl	80036f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	699a      	ldr	r2, [r3, #24]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800311e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	699a      	ldr	r2, [r3, #24]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800312e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	6999      	ldr	r1, [r3, #24]
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	691b      	ldr	r3, [r3, #16]
 800313a:	021a      	lsls	r2, r3, #8
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	430a      	orrs	r2, r1
 8003142:	619a      	str	r2, [r3, #24]
      break;
 8003144:	e084      	b.n	8003250 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	68b9      	ldr	r1, [r7, #8]
 800314c:	4618      	mov	r0, r3
 800314e:	f000 fb47 	bl	80037e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	69da      	ldr	r2, [r3, #28]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f042 0208 	orr.w	r2, r2, #8
 8003160:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	69da      	ldr	r2, [r3, #28]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f022 0204 	bic.w	r2, r2, #4
 8003170:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	69d9      	ldr	r1, [r3, #28]
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	691a      	ldr	r2, [r3, #16]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	430a      	orrs	r2, r1
 8003182:	61da      	str	r2, [r3, #28]
      break;
 8003184:	e064      	b.n	8003250 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	68b9      	ldr	r1, [r7, #8]
 800318c:	4618      	mov	r0, r3
 800318e:	f000 fb9d 	bl	80038cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	69da      	ldr	r2, [r3, #28]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	69da      	ldr	r2, [r3, #28]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	69d9      	ldr	r1, [r3, #28]
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	691b      	ldr	r3, [r3, #16]
 80031bc:	021a      	lsls	r2, r3, #8
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	430a      	orrs	r2, r1
 80031c4:	61da      	str	r2, [r3, #28]
      break;
 80031c6:	e043      	b.n	8003250 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	68b9      	ldr	r1, [r7, #8]
 80031ce:	4618      	mov	r0, r3
 80031d0:	f000 fbd4 	bl	800397c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f042 0208 	orr.w	r2, r2, #8
 80031e2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f022 0204 	bic.w	r2, r2, #4
 80031f2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	691a      	ldr	r2, [r3, #16]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	430a      	orrs	r2, r1
 8003204:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003206:	e023      	b.n	8003250 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	68b9      	ldr	r1, [r7, #8]
 800320e:	4618      	mov	r0, r3
 8003210:	f000 fc06 	bl	8003a20 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003222:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003232:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	021a      	lsls	r2, r3, #8
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	430a      	orrs	r2, r1
 8003246:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003248:	e002      	b.n	8003250 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	75fb      	strb	r3, [r7, #23]
      break;
 800324e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2200      	movs	r2, #0
 8003254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003258:	7dfb      	ldrb	r3, [r7, #23]
}
 800325a:	4618      	mov	r0, r3
 800325c:	3718      	adds	r7, #24
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop

08003264 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800326e:	2300      	movs	r3, #0
 8003270:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003278:	2b01      	cmp	r3, #1
 800327a:	d101      	bne.n	8003280 <HAL_TIM_ConfigClockSource+0x1c>
 800327c:	2302      	movs	r3, #2
 800327e:	e0b4      	b.n	80033ea <HAL_TIM_ConfigClockSource+0x186>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2202      	movs	r2, #2
 800328c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003298:	68ba      	ldr	r2, [r7, #8]
 800329a:	4b56      	ldr	r3, [pc, #344]	; (80033f4 <HAL_TIM_ConfigClockSource+0x190>)
 800329c:	4013      	ands	r3, r2
 800329e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	68ba      	ldr	r2, [r7, #8]
 80032ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032b8:	d03e      	beq.n	8003338 <HAL_TIM_ConfigClockSource+0xd4>
 80032ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032be:	f200 8087 	bhi.w	80033d0 <HAL_TIM_ConfigClockSource+0x16c>
 80032c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032c6:	f000 8086 	beq.w	80033d6 <HAL_TIM_ConfigClockSource+0x172>
 80032ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032ce:	d87f      	bhi.n	80033d0 <HAL_TIM_ConfigClockSource+0x16c>
 80032d0:	2b70      	cmp	r3, #112	; 0x70
 80032d2:	d01a      	beq.n	800330a <HAL_TIM_ConfigClockSource+0xa6>
 80032d4:	2b70      	cmp	r3, #112	; 0x70
 80032d6:	d87b      	bhi.n	80033d0 <HAL_TIM_ConfigClockSource+0x16c>
 80032d8:	2b60      	cmp	r3, #96	; 0x60
 80032da:	d050      	beq.n	800337e <HAL_TIM_ConfigClockSource+0x11a>
 80032dc:	2b60      	cmp	r3, #96	; 0x60
 80032de:	d877      	bhi.n	80033d0 <HAL_TIM_ConfigClockSource+0x16c>
 80032e0:	2b50      	cmp	r3, #80	; 0x50
 80032e2:	d03c      	beq.n	800335e <HAL_TIM_ConfigClockSource+0xfa>
 80032e4:	2b50      	cmp	r3, #80	; 0x50
 80032e6:	d873      	bhi.n	80033d0 <HAL_TIM_ConfigClockSource+0x16c>
 80032e8:	2b40      	cmp	r3, #64	; 0x40
 80032ea:	d058      	beq.n	800339e <HAL_TIM_ConfigClockSource+0x13a>
 80032ec:	2b40      	cmp	r3, #64	; 0x40
 80032ee:	d86f      	bhi.n	80033d0 <HAL_TIM_ConfigClockSource+0x16c>
 80032f0:	2b30      	cmp	r3, #48	; 0x30
 80032f2:	d064      	beq.n	80033be <HAL_TIM_ConfigClockSource+0x15a>
 80032f4:	2b30      	cmp	r3, #48	; 0x30
 80032f6:	d86b      	bhi.n	80033d0 <HAL_TIM_ConfigClockSource+0x16c>
 80032f8:	2b20      	cmp	r3, #32
 80032fa:	d060      	beq.n	80033be <HAL_TIM_ConfigClockSource+0x15a>
 80032fc:	2b20      	cmp	r3, #32
 80032fe:	d867      	bhi.n	80033d0 <HAL_TIM_ConfigClockSource+0x16c>
 8003300:	2b00      	cmp	r3, #0
 8003302:	d05c      	beq.n	80033be <HAL_TIM_ConfigClockSource+0x15a>
 8003304:	2b10      	cmp	r3, #16
 8003306:	d05a      	beq.n	80033be <HAL_TIM_ConfigClockSource+0x15a>
 8003308:	e062      	b.n	80033d0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6818      	ldr	r0, [r3, #0]
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	6899      	ldr	r1, [r3, #8]
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	685a      	ldr	r2, [r3, #4]
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	f000 fce3 	bl	8003ce4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800332c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	68ba      	ldr	r2, [r7, #8]
 8003334:	609a      	str	r2, [r3, #8]
      break;
 8003336:	e04f      	b.n	80033d8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6818      	ldr	r0, [r3, #0]
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	6899      	ldr	r1, [r3, #8]
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	685a      	ldr	r2, [r3, #4]
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	f000 fccc 	bl	8003ce4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	689a      	ldr	r2, [r3, #8]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800335a:	609a      	str	r2, [r3, #8]
      break;
 800335c:	e03c      	b.n	80033d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6818      	ldr	r0, [r3, #0]
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	6859      	ldr	r1, [r3, #4]
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	461a      	mov	r2, r3
 800336c:	f000 fc40 	bl	8003bf0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2150      	movs	r1, #80	; 0x50
 8003376:	4618      	mov	r0, r3
 8003378:	f000 fc99 	bl	8003cae <TIM_ITRx_SetConfig>
      break;
 800337c:	e02c      	b.n	80033d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6818      	ldr	r0, [r3, #0]
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	6859      	ldr	r1, [r3, #4]
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	461a      	mov	r2, r3
 800338c:	f000 fc5f 	bl	8003c4e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	2160      	movs	r1, #96	; 0x60
 8003396:	4618      	mov	r0, r3
 8003398:	f000 fc89 	bl	8003cae <TIM_ITRx_SetConfig>
      break;
 800339c:	e01c      	b.n	80033d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6818      	ldr	r0, [r3, #0]
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	6859      	ldr	r1, [r3, #4]
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	461a      	mov	r2, r3
 80033ac:	f000 fc20 	bl	8003bf0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2140      	movs	r1, #64	; 0x40
 80033b6:	4618      	mov	r0, r3
 80033b8:	f000 fc79 	bl	8003cae <TIM_ITRx_SetConfig>
      break;
 80033bc:	e00c      	b.n	80033d8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4619      	mov	r1, r3
 80033c8:	4610      	mov	r0, r2
 80033ca:	f000 fc70 	bl	8003cae <TIM_ITRx_SetConfig>
      break;
 80033ce:	e003      	b.n	80033d8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	73fb      	strb	r3, [r7, #15]
      break;
 80033d4:	e000      	b.n	80033d8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80033d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80033e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3710      	adds	r7, #16
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	fffeff88 	.word	0xfffeff88

080033f8 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003408:	2b01      	cmp	r3, #1
 800340a:	d101      	bne.n	8003410 <HAL_TIM_SlaveConfigSynchro+0x18>
 800340c:	2302      	movs	r3, #2
 800340e:	e031      	b.n	8003474 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2202      	movs	r2, #2
 800341c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003420:	6839      	ldr	r1, [r7, #0]
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f000 fb50 	bl	8003ac8 <TIM_SlaveTimer_SetConfig>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d009      	beq.n	8003442 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2201      	movs	r2, #1
 8003432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e018      	b.n	8003474 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	68da      	ldr	r2, [r3, #12]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003450:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	68da      	ldr	r2, [r3, #12]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003460:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2201      	movs	r2, #1
 8003466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003472:	2300      	movs	r3, #0
}
 8003474:	4618      	mov	r0, r3
 8003476:	3708      	adds	r7, #8
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003484:	bf00      	nop
 8003486:	370c      	adds	r7, #12
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr

08003490 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003498:	bf00      	nop
 800349a:	370c      	adds	r7, #12
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr

080034a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034ac:	bf00      	nop
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034c0:	bf00      	nop
 80034c2:	370c      	adds	r7, #12
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr

080034cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b085      	sub	sp, #20
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	4a40      	ldr	r2, [pc, #256]	; (80035e0 <TIM_Base_SetConfig+0x114>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d013      	beq.n	800350c <TIM_Base_SetConfig+0x40>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034ea:	d00f      	beq.n	800350c <TIM_Base_SetConfig+0x40>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	4a3d      	ldr	r2, [pc, #244]	; (80035e4 <TIM_Base_SetConfig+0x118>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d00b      	beq.n	800350c <TIM_Base_SetConfig+0x40>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	4a3c      	ldr	r2, [pc, #240]	; (80035e8 <TIM_Base_SetConfig+0x11c>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d007      	beq.n	800350c <TIM_Base_SetConfig+0x40>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	4a3b      	ldr	r2, [pc, #236]	; (80035ec <TIM_Base_SetConfig+0x120>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d003      	beq.n	800350c <TIM_Base_SetConfig+0x40>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	4a3a      	ldr	r2, [pc, #232]	; (80035f0 <TIM_Base_SetConfig+0x124>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d108      	bne.n	800351e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003512:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	68fa      	ldr	r2, [r7, #12]
 800351a:	4313      	orrs	r3, r2
 800351c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a2f      	ldr	r2, [pc, #188]	; (80035e0 <TIM_Base_SetConfig+0x114>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d02b      	beq.n	800357e <TIM_Base_SetConfig+0xb2>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800352c:	d027      	beq.n	800357e <TIM_Base_SetConfig+0xb2>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a2c      	ldr	r2, [pc, #176]	; (80035e4 <TIM_Base_SetConfig+0x118>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d023      	beq.n	800357e <TIM_Base_SetConfig+0xb2>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a2b      	ldr	r2, [pc, #172]	; (80035e8 <TIM_Base_SetConfig+0x11c>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d01f      	beq.n	800357e <TIM_Base_SetConfig+0xb2>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a2a      	ldr	r2, [pc, #168]	; (80035ec <TIM_Base_SetConfig+0x120>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d01b      	beq.n	800357e <TIM_Base_SetConfig+0xb2>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a29      	ldr	r2, [pc, #164]	; (80035f0 <TIM_Base_SetConfig+0x124>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d017      	beq.n	800357e <TIM_Base_SetConfig+0xb2>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a28      	ldr	r2, [pc, #160]	; (80035f4 <TIM_Base_SetConfig+0x128>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d013      	beq.n	800357e <TIM_Base_SetConfig+0xb2>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a27      	ldr	r2, [pc, #156]	; (80035f8 <TIM_Base_SetConfig+0x12c>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d00f      	beq.n	800357e <TIM_Base_SetConfig+0xb2>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a26      	ldr	r2, [pc, #152]	; (80035fc <TIM_Base_SetConfig+0x130>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d00b      	beq.n	800357e <TIM_Base_SetConfig+0xb2>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a25      	ldr	r2, [pc, #148]	; (8003600 <TIM_Base_SetConfig+0x134>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d007      	beq.n	800357e <TIM_Base_SetConfig+0xb2>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a24      	ldr	r2, [pc, #144]	; (8003604 <TIM_Base_SetConfig+0x138>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d003      	beq.n	800357e <TIM_Base_SetConfig+0xb2>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a23      	ldr	r2, [pc, #140]	; (8003608 <TIM_Base_SetConfig+0x13c>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d108      	bne.n	8003590 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003584:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	68fa      	ldr	r2, [r7, #12]
 800358c:	4313      	orrs	r3, r2
 800358e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	695b      	ldr	r3, [r3, #20]
 800359a:	4313      	orrs	r3, r2
 800359c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	68fa      	ldr	r2, [r7, #12]
 80035a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	689a      	ldr	r2, [r3, #8]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	4a0a      	ldr	r2, [pc, #40]	; (80035e0 <TIM_Base_SetConfig+0x114>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d003      	beq.n	80035c4 <TIM_Base_SetConfig+0xf8>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	4a0c      	ldr	r2, [pc, #48]	; (80035f0 <TIM_Base_SetConfig+0x124>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d103      	bne.n	80035cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	691a      	ldr	r2, [r3, #16]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	615a      	str	r2, [r3, #20]
}
 80035d2:	bf00      	nop
 80035d4:	3714      	adds	r7, #20
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr
 80035de:	bf00      	nop
 80035e0:	40010000 	.word	0x40010000
 80035e4:	40000400 	.word	0x40000400
 80035e8:	40000800 	.word	0x40000800
 80035ec:	40000c00 	.word	0x40000c00
 80035f0:	40010400 	.word	0x40010400
 80035f4:	40014000 	.word	0x40014000
 80035f8:	40014400 	.word	0x40014400
 80035fc:	40014800 	.word	0x40014800
 8003600:	40001800 	.word	0x40001800
 8003604:	40001c00 	.word	0x40001c00
 8003608:	40002000 	.word	0x40002000

0800360c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800360c:	b480      	push	{r7}
 800360e:	b087      	sub	sp, #28
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a1b      	ldr	r3, [r3, #32]
 800361a:	f023 0201 	bic.w	r2, r3, #1
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a1b      	ldr	r3, [r3, #32]
 8003626:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	699b      	ldr	r3, [r3, #24]
 8003632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003634:	68fa      	ldr	r2, [r7, #12]
 8003636:	4b2b      	ldr	r3, [pc, #172]	; (80036e4 <TIM_OC1_SetConfig+0xd8>)
 8003638:	4013      	ands	r3, r2
 800363a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f023 0303 	bic.w	r3, r3, #3
 8003642:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	68fa      	ldr	r2, [r7, #12]
 800364a:	4313      	orrs	r3, r2
 800364c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	f023 0302 	bic.w	r3, r3, #2
 8003654:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	697a      	ldr	r2, [r7, #20]
 800365c:	4313      	orrs	r3, r2
 800365e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	4a21      	ldr	r2, [pc, #132]	; (80036e8 <TIM_OC1_SetConfig+0xdc>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d003      	beq.n	8003670 <TIM_OC1_SetConfig+0x64>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	4a20      	ldr	r2, [pc, #128]	; (80036ec <TIM_OC1_SetConfig+0xe0>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d10c      	bne.n	800368a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	f023 0308 	bic.w	r3, r3, #8
 8003676:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	697a      	ldr	r2, [r7, #20]
 800367e:	4313      	orrs	r3, r2
 8003680:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	f023 0304 	bic.w	r3, r3, #4
 8003688:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4a16      	ldr	r2, [pc, #88]	; (80036e8 <TIM_OC1_SetConfig+0xdc>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d003      	beq.n	800369a <TIM_OC1_SetConfig+0x8e>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4a15      	ldr	r2, [pc, #84]	; (80036ec <TIM_OC1_SetConfig+0xe0>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d111      	bne.n	80036be <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80036a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	695b      	ldr	r3, [r3, #20]
 80036ae:	693a      	ldr	r2, [r7, #16]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	699b      	ldr	r3, [r3, #24]
 80036b8:	693a      	ldr	r2, [r7, #16]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	693a      	ldr	r2, [r7, #16]
 80036c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	68fa      	ldr	r2, [r7, #12]
 80036c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	685a      	ldr	r2, [r3, #4]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	697a      	ldr	r2, [r7, #20]
 80036d6:	621a      	str	r2, [r3, #32]
}
 80036d8:	bf00      	nop
 80036da:	371c      	adds	r7, #28
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr
 80036e4:	fffeff8f 	.word	0xfffeff8f
 80036e8:	40010000 	.word	0x40010000
 80036ec:	40010400 	.word	0x40010400

080036f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b087      	sub	sp, #28
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6a1b      	ldr	r3, [r3, #32]
 80036fe:	f023 0210 	bic.w	r2, r3, #16
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a1b      	ldr	r3, [r3, #32]
 800370a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	699b      	ldr	r3, [r3, #24]
 8003716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003718:	68fa      	ldr	r2, [r7, #12]
 800371a:	4b2e      	ldr	r3, [pc, #184]	; (80037d4 <TIM_OC2_SetConfig+0xe4>)
 800371c:	4013      	ands	r3, r2
 800371e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003726:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	021b      	lsls	r3, r3, #8
 800372e:	68fa      	ldr	r2, [r7, #12]
 8003730:	4313      	orrs	r3, r2
 8003732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	f023 0320 	bic.w	r3, r3, #32
 800373a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	011b      	lsls	r3, r3, #4
 8003742:	697a      	ldr	r2, [r7, #20]
 8003744:	4313      	orrs	r3, r2
 8003746:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	4a23      	ldr	r2, [pc, #140]	; (80037d8 <TIM_OC2_SetConfig+0xe8>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d003      	beq.n	8003758 <TIM_OC2_SetConfig+0x68>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4a22      	ldr	r2, [pc, #136]	; (80037dc <TIM_OC2_SetConfig+0xec>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d10d      	bne.n	8003774 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800375e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	011b      	lsls	r3, r3, #4
 8003766:	697a      	ldr	r2, [r7, #20]
 8003768:	4313      	orrs	r3, r2
 800376a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003772:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	4a18      	ldr	r2, [pc, #96]	; (80037d8 <TIM_OC2_SetConfig+0xe8>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d003      	beq.n	8003784 <TIM_OC2_SetConfig+0x94>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	4a17      	ldr	r2, [pc, #92]	; (80037dc <TIM_OC2_SetConfig+0xec>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d113      	bne.n	80037ac <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800378a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003792:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	695b      	ldr	r3, [r3, #20]
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	693a      	ldr	r2, [r7, #16]
 800379c:	4313      	orrs	r3, r2
 800379e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	699b      	ldr	r3, [r3, #24]
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	693a      	ldr	r2, [r7, #16]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	693a      	ldr	r2, [r7, #16]
 80037b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	68fa      	ldr	r2, [r7, #12]
 80037b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	685a      	ldr	r2, [r3, #4]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	697a      	ldr	r2, [r7, #20]
 80037c4:	621a      	str	r2, [r3, #32]
}
 80037c6:	bf00      	nop
 80037c8:	371c      	adds	r7, #28
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop
 80037d4:	feff8fff 	.word	0xfeff8fff
 80037d8:	40010000 	.word	0x40010000
 80037dc:	40010400 	.word	0x40010400

080037e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b087      	sub	sp, #28
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a1b      	ldr	r3, [r3, #32]
 80037ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6a1b      	ldr	r3, [r3, #32]
 80037fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	69db      	ldr	r3, [r3, #28]
 8003806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003808:	68fa      	ldr	r2, [r7, #12]
 800380a:	4b2d      	ldr	r3, [pc, #180]	; (80038c0 <TIM_OC3_SetConfig+0xe0>)
 800380c:	4013      	ands	r3, r2
 800380e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f023 0303 	bic.w	r3, r3, #3
 8003816:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	68fa      	ldr	r2, [r7, #12]
 800381e:	4313      	orrs	r3, r2
 8003820:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003828:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	021b      	lsls	r3, r3, #8
 8003830:	697a      	ldr	r2, [r7, #20]
 8003832:	4313      	orrs	r3, r2
 8003834:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a22      	ldr	r2, [pc, #136]	; (80038c4 <TIM_OC3_SetConfig+0xe4>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d003      	beq.n	8003846 <TIM_OC3_SetConfig+0x66>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a21      	ldr	r2, [pc, #132]	; (80038c8 <TIM_OC3_SetConfig+0xe8>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d10d      	bne.n	8003862 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800384c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	021b      	lsls	r3, r3, #8
 8003854:	697a      	ldr	r2, [r7, #20]
 8003856:	4313      	orrs	r3, r2
 8003858:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003860:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a17      	ldr	r2, [pc, #92]	; (80038c4 <TIM_OC3_SetConfig+0xe4>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d003      	beq.n	8003872 <TIM_OC3_SetConfig+0x92>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a16      	ldr	r2, [pc, #88]	; (80038c8 <TIM_OC3_SetConfig+0xe8>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d113      	bne.n	800389a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003878:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003880:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	695b      	ldr	r3, [r3, #20]
 8003886:	011b      	lsls	r3, r3, #4
 8003888:	693a      	ldr	r2, [r7, #16]
 800388a:	4313      	orrs	r3, r2
 800388c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	699b      	ldr	r3, [r3, #24]
 8003892:	011b      	lsls	r3, r3, #4
 8003894:	693a      	ldr	r2, [r7, #16]
 8003896:	4313      	orrs	r3, r2
 8003898:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	693a      	ldr	r2, [r7, #16]
 800389e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	68fa      	ldr	r2, [r7, #12]
 80038a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	685a      	ldr	r2, [r3, #4]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	697a      	ldr	r2, [r7, #20]
 80038b2:	621a      	str	r2, [r3, #32]
}
 80038b4:	bf00      	nop
 80038b6:	371c      	adds	r7, #28
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr
 80038c0:	fffeff8f 	.word	0xfffeff8f
 80038c4:	40010000 	.word	0x40010000
 80038c8:	40010400 	.word	0x40010400

080038cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b087      	sub	sp, #28
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a1b      	ldr	r3, [r3, #32]
 80038da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a1b      	ldr	r3, [r3, #32]
 80038e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	69db      	ldr	r3, [r3, #28]
 80038f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80038f4:	68fa      	ldr	r2, [r7, #12]
 80038f6:	4b1e      	ldr	r3, [pc, #120]	; (8003970 <TIM_OC4_SetConfig+0xa4>)
 80038f8:	4013      	ands	r3, r2
 80038fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003902:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	021b      	lsls	r3, r3, #8
 800390a:	68fa      	ldr	r2, [r7, #12]
 800390c:	4313      	orrs	r3, r2
 800390e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003916:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	031b      	lsls	r3, r3, #12
 800391e:	693a      	ldr	r2, [r7, #16]
 8003920:	4313      	orrs	r3, r2
 8003922:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	4a13      	ldr	r2, [pc, #76]	; (8003974 <TIM_OC4_SetConfig+0xa8>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d003      	beq.n	8003934 <TIM_OC4_SetConfig+0x68>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	4a12      	ldr	r2, [pc, #72]	; (8003978 <TIM_OC4_SetConfig+0xac>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d109      	bne.n	8003948 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800393a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	695b      	ldr	r3, [r3, #20]
 8003940:	019b      	lsls	r3, r3, #6
 8003942:	697a      	ldr	r2, [r7, #20]
 8003944:	4313      	orrs	r3, r2
 8003946:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	697a      	ldr	r2, [r7, #20]
 800394c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	68fa      	ldr	r2, [r7, #12]
 8003952:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	685a      	ldr	r2, [r3, #4]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	693a      	ldr	r2, [r7, #16]
 8003960:	621a      	str	r2, [r3, #32]
}
 8003962:	bf00      	nop
 8003964:	371c      	adds	r7, #28
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr
 800396e:	bf00      	nop
 8003970:	feff8fff 	.word	0xfeff8fff
 8003974:	40010000 	.word	0x40010000
 8003978:	40010400 	.word	0x40010400

0800397c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800397c:	b480      	push	{r7}
 800397e:	b087      	sub	sp, #28
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a1b      	ldr	r3, [r3, #32]
 800398a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a1b      	ldr	r3, [r3, #32]
 8003996:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80039a4:	68fa      	ldr	r2, [r7, #12]
 80039a6:	4b1b      	ldr	r3, [pc, #108]	; (8003a14 <TIM_OC5_SetConfig+0x98>)
 80039a8:	4013      	ands	r3, r2
 80039aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	68fa      	ldr	r2, [r7, #12]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80039bc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	041b      	lsls	r3, r3, #16
 80039c4:	693a      	ldr	r2, [r7, #16]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a12      	ldr	r2, [pc, #72]	; (8003a18 <TIM_OC5_SetConfig+0x9c>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d003      	beq.n	80039da <TIM_OC5_SetConfig+0x5e>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a11      	ldr	r2, [pc, #68]	; (8003a1c <TIM_OC5_SetConfig+0xa0>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d109      	bne.n	80039ee <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039e0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	695b      	ldr	r3, [r3, #20]
 80039e6:	021b      	lsls	r3, r3, #8
 80039e8:	697a      	ldr	r2, [r7, #20]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	697a      	ldr	r2, [r7, #20]
 80039f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	68fa      	ldr	r2, [r7, #12]
 80039f8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	685a      	ldr	r2, [r3, #4]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	693a      	ldr	r2, [r7, #16]
 8003a06:	621a      	str	r2, [r3, #32]
}
 8003a08:	bf00      	nop
 8003a0a:	371c      	adds	r7, #28
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr
 8003a14:	fffeff8f 	.word	0xfffeff8f
 8003a18:	40010000 	.word	0x40010000
 8003a1c:	40010400 	.word	0x40010400

08003a20 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b087      	sub	sp, #28
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a1b      	ldr	r3, [r3, #32]
 8003a2e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a1b      	ldr	r3, [r3, #32]
 8003a3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003a48:	68fa      	ldr	r2, [r7, #12]
 8003a4a:	4b1c      	ldr	r3, [pc, #112]	; (8003abc <TIM_OC6_SetConfig+0x9c>)
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	021b      	lsls	r3, r3, #8
 8003a56:	68fa      	ldr	r2, [r7, #12]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003a62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	051b      	lsls	r3, r3, #20
 8003a6a:	693a      	ldr	r2, [r7, #16]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	4a13      	ldr	r2, [pc, #76]	; (8003ac0 <TIM_OC6_SetConfig+0xa0>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d003      	beq.n	8003a80 <TIM_OC6_SetConfig+0x60>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	4a12      	ldr	r2, [pc, #72]	; (8003ac4 <TIM_OC6_SetConfig+0xa4>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d109      	bne.n	8003a94 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a86:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	695b      	ldr	r3, [r3, #20]
 8003a8c:	029b      	lsls	r3, r3, #10
 8003a8e:	697a      	ldr	r2, [r7, #20]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	697a      	ldr	r2, [r7, #20]
 8003a98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	68fa      	ldr	r2, [r7, #12]
 8003a9e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	685a      	ldr	r2, [r3, #4]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	693a      	ldr	r2, [r7, #16]
 8003aac:	621a      	str	r2, [r3, #32]
}
 8003aae:	bf00      	nop
 8003ab0:	371c      	adds	r7, #28
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr
 8003aba:	bf00      	nop
 8003abc:	feff8fff 	.word	0xfeff8fff
 8003ac0:	40010000 	.word	0x40010000
 8003ac4:	40010400 	.word	0x40010400

08003ac8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b086      	sub	sp, #24
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ae4:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	693a      	ldr	r2, [r7, #16]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003af0:	693a      	ldr	r2, [r7, #16]
 8003af2:	4b3e      	ldr	r3, [pc, #248]	; (8003bec <TIM_SlaveTimer_SetConfig+0x124>)
 8003af4:	4013      	ands	r3, r2
 8003af6:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	693a      	ldr	r2, [r7, #16]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	693a      	ldr	r2, [r7, #16]
 8003b08:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	2b70      	cmp	r3, #112	; 0x70
 8003b10:	d01a      	beq.n	8003b48 <TIM_SlaveTimer_SetConfig+0x80>
 8003b12:	2b70      	cmp	r3, #112	; 0x70
 8003b14:	d860      	bhi.n	8003bd8 <TIM_SlaveTimer_SetConfig+0x110>
 8003b16:	2b60      	cmp	r3, #96	; 0x60
 8003b18:	d054      	beq.n	8003bc4 <TIM_SlaveTimer_SetConfig+0xfc>
 8003b1a:	2b60      	cmp	r3, #96	; 0x60
 8003b1c:	d85c      	bhi.n	8003bd8 <TIM_SlaveTimer_SetConfig+0x110>
 8003b1e:	2b50      	cmp	r3, #80	; 0x50
 8003b20:	d046      	beq.n	8003bb0 <TIM_SlaveTimer_SetConfig+0xe8>
 8003b22:	2b50      	cmp	r3, #80	; 0x50
 8003b24:	d858      	bhi.n	8003bd8 <TIM_SlaveTimer_SetConfig+0x110>
 8003b26:	2b40      	cmp	r3, #64	; 0x40
 8003b28:	d019      	beq.n	8003b5e <TIM_SlaveTimer_SetConfig+0x96>
 8003b2a:	2b40      	cmp	r3, #64	; 0x40
 8003b2c:	d854      	bhi.n	8003bd8 <TIM_SlaveTimer_SetConfig+0x110>
 8003b2e:	2b30      	cmp	r3, #48	; 0x30
 8003b30:	d055      	beq.n	8003bde <TIM_SlaveTimer_SetConfig+0x116>
 8003b32:	2b30      	cmp	r3, #48	; 0x30
 8003b34:	d850      	bhi.n	8003bd8 <TIM_SlaveTimer_SetConfig+0x110>
 8003b36:	2b20      	cmp	r3, #32
 8003b38:	d051      	beq.n	8003bde <TIM_SlaveTimer_SetConfig+0x116>
 8003b3a:	2b20      	cmp	r3, #32
 8003b3c:	d84c      	bhi.n	8003bd8 <TIM_SlaveTimer_SetConfig+0x110>
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d04d      	beq.n	8003bde <TIM_SlaveTimer_SetConfig+0x116>
 8003b42:	2b10      	cmp	r3, #16
 8003b44:	d04b      	beq.n	8003bde <TIM_SlaveTimer_SetConfig+0x116>
 8003b46:	e047      	b.n	8003bd8 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6818      	ldr	r0, [r3, #0]
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	68d9      	ldr	r1, [r3, #12]
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	689a      	ldr	r2, [r3, #8]
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	691b      	ldr	r3, [r3, #16]
 8003b58:	f000 f8c4 	bl	8003ce4 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8003b5c:	e040      	b.n	8003be0 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	2b05      	cmp	r3, #5
 8003b64:	d101      	bne.n	8003b6a <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e03b      	b.n	8003be2 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	6a1b      	ldr	r3, [r3, #32]
 8003b70:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	6a1a      	ldr	r2, [r3, #32]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f022 0201 	bic.w	r2, r2, #1
 8003b80:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	699b      	ldr	r3, [r3, #24]
 8003b88:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b90:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	011b      	lsls	r3, r3, #4
 8003b98:	68ba      	ldr	r2, [r7, #8]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	68ba      	ldr	r2, [r7, #8]
 8003ba4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	68fa      	ldr	r2, [r7, #12]
 8003bac:	621a      	str	r2, [r3, #32]
      break;
 8003bae:	e017      	b.n	8003be0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6818      	ldr	r0, [r3, #0]
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	6899      	ldr	r1, [r3, #8]
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	691b      	ldr	r3, [r3, #16]
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	f000 f817 	bl	8003bf0 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8003bc2:	e00d      	b.n	8003be0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6818      	ldr	r0, [r3, #0]
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	6899      	ldr	r1, [r3, #8]
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	691b      	ldr	r3, [r3, #16]
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	f000 f83c 	bl	8003c4e <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8003bd6:	e003      	b.n	8003be0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	75fb      	strb	r3, [r7, #23]
      break;
 8003bdc:	e000      	b.n	8003be0 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8003bde:	bf00      	nop
  }

  return status;
 8003be0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3718      	adds	r7, #24
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	fffefff8 	.word	0xfffefff8

08003bf0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b087      	sub	sp, #28
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6a1b      	ldr	r3, [r3, #32]
 8003c00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6a1b      	ldr	r3, [r3, #32]
 8003c06:	f023 0201 	bic.w	r2, r3, #1
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	699b      	ldr	r3, [r3, #24]
 8003c12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	011b      	lsls	r3, r3, #4
 8003c20:	693a      	ldr	r2, [r7, #16]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	f023 030a 	bic.w	r3, r3, #10
 8003c2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c2e:	697a      	ldr	r2, [r7, #20]
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	693a      	ldr	r2, [r7, #16]
 8003c3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	697a      	ldr	r2, [r7, #20]
 8003c40:	621a      	str	r2, [r3, #32]
}
 8003c42:	bf00      	nop
 8003c44:	371c      	adds	r7, #28
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr

08003c4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c4e:	b480      	push	{r7}
 8003c50:	b087      	sub	sp, #28
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	60f8      	str	r0, [r7, #12]
 8003c56:	60b9      	str	r1, [r7, #8]
 8003c58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6a1b      	ldr	r3, [r3, #32]
 8003c5e:	f023 0210 	bic.w	r2, r3, #16
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	699b      	ldr	r3, [r3, #24]
 8003c6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6a1b      	ldr	r3, [r3, #32]
 8003c70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c78:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	031b      	lsls	r3, r3, #12
 8003c7e:	697a      	ldr	r2, [r7, #20]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003c8a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	011b      	lsls	r3, r3, #4
 8003c90:	693a      	ldr	r2, [r7, #16]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	697a      	ldr	r2, [r7, #20]
 8003c9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	693a      	ldr	r2, [r7, #16]
 8003ca0:	621a      	str	r2, [r3, #32]
}
 8003ca2:	bf00      	nop
 8003ca4:	371c      	adds	r7, #28
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr

08003cae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003cae:	b480      	push	{r7}
 8003cb0:	b085      	sub	sp, #20
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
 8003cb6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cc4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003cc6:	683a      	ldr	r2, [r7, #0]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	f043 0307 	orr.w	r3, r3, #7
 8003cd0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	68fa      	ldr	r2, [r7, #12]
 8003cd6:	609a      	str	r2, [r3, #8]
}
 8003cd8:	bf00      	nop
 8003cda:	3714      	adds	r7, #20
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b087      	sub	sp, #28
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	60f8      	str	r0, [r7, #12]
 8003cec:	60b9      	str	r1, [r7, #8]
 8003cee:	607a      	str	r2, [r7, #4]
 8003cf0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003cfe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	021a      	lsls	r2, r3, #8
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	431a      	orrs	r2, r3
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	697a      	ldr	r2, [r7, #20]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	697a      	ldr	r2, [r7, #20]
 8003d16:	609a      	str	r2, [r3, #8]
}
 8003d18:	bf00      	nop
 8003d1a:	371c      	adds	r7, #28
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b087      	sub	sp, #28
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	60b9      	str	r1, [r7, #8]
 8003d2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	f003 031f 	and.w	r3, r3, #31
 8003d36:	2201      	movs	r2, #1
 8003d38:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6a1a      	ldr	r2, [r3, #32]
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	43db      	mvns	r3, r3
 8003d46:	401a      	ands	r2, r3
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6a1a      	ldr	r2, [r3, #32]
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	f003 031f 	and.w	r3, r3, #31
 8003d56:	6879      	ldr	r1, [r7, #4]
 8003d58:	fa01 f303 	lsl.w	r3, r1, r3
 8003d5c:	431a      	orrs	r2, r3
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	621a      	str	r2, [r3, #32]
}
 8003d62:	bf00      	nop
 8003d64:	371c      	adds	r7, #28
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr
	...

08003d70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b085      	sub	sp, #20
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d101      	bne.n	8003d88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d84:	2302      	movs	r3, #2
 8003d86:	e06d      	b.n	8003e64 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2202      	movs	r2, #2
 8003d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a30      	ldr	r2, [pc, #192]	; (8003e70 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d004      	beq.n	8003dbc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a2f      	ldr	r2, [pc, #188]	; (8003e74 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d108      	bne.n	8003dce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003dc2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	68fa      	ldr	r2, [r7, #12]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dd4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	68fa      	ldr	r2, [r7, #12]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	68fa      	ldr	r2, [r7, #12]
 8003de6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a20      	ldr	r2, [pc, #128]	; (8003e70 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d022      	beq.n	8003e38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dfa:	d01d      	beq.n	8003e38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a1d      	ldr	r2, [pc, #116]	; (8003e78 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d018      	beq.n	8003e38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a1c      	ldr	r2, [pc, #112]	; (8003e7c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d013      	beq.n	8003e38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a1a      	ldr	r2, [pc, #104]	; (8003e80 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d00e      	beq.n	8003e38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a15      	ldr	r2, [pc, #84]	; (8003e74 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d009      	beq.n	8003e38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a16      	ldr	r2, [pc, #88]	; (8003e84 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d004      	beq.n	8003e38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a15      	ldr	r2, [pc, #84]	; (8003e88 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d10c      	bne.n	8003e52 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e3e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	68ba      	ldr	r2, [r7, #8]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	68ba      	ldr	r2, [r7, #8]
 8003e50:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2201      	movs	r2, #1
 8003e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e62:	2300      	movs	r3, #0
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3714      	adds	r7, #20
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr
 8003e70:	40010000 	.word	0x40010000
 8003e74:	40010400 	.word	0x40010400
 8003e78:	40000400 	.word	0x40000400
 8003e7c:	40000800 	.word	0x40000800
 8003e80:	40000c00 	.word	0x40000c00
 8003e84:	40014000 	.word	0x40014000
 8003e88:	40001800 	.word	0x40001800

08003e8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e94:	bf00      	nop
 8003e96:	370c      	adds	r7, #12
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ea8:	bf00      	nop
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003ebc:	bf00      	nop
 8003ebe:	370c      	adds	r7, #12
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr

08003ec8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b082      	sub	sp, #8
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d101      	bne.n	8003eda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e040      	b.n	8003f5c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d106      	bne.n	8003ef0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f7fd f94c 	bl	8001188 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2224      	movs	r2, #36	; 0x24
 8003ef4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f022 0201 	bic.w	r2, r2, #1
 8003f04:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f000 f82c 	bl	8003f64 <UART_SetConfig>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d101      	bne.n	8003f16 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e022      	b.n	8003f5c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d002      	beq.n	8003f24 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f000 fa84 	bl	800442c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	685a      	ldr	r2, [r3, #4]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	689a      	ldr	r2, [r3, #8]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f042 0201 	orr.w	r2, r2, #1
 8003f52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f000 fb0b 	bl	8004570 <UART_CheckIdleState>
 8003f5a:	4603      	mov	r3, r0
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3708      	adds	r7, #8
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b088      	sub	sp, #32
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	689a      	ldr	r2, [r3, #8]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	691b      	ldr	r3, [r3, #16]
 8003f78:	431a      	orrs	r2, r3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	695b      	ldr	r3, [r3, #20]
 8003f7e:	431a      	orrs	r2, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	69db      	ldr	r3, [r3, #28]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	4ba6      	ldr	r3, [pc, #664]	; (8004228 <UART_SetConfig+0x2c4>)
 8003f90:	4013      	ands	r3, r2
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	6812      	ldr	r2, [r2, #0]
 8003f96:	6979      	ldr	r1, [r7, #20]
 8003f98:	430b      	orrs	r3, r1
 8003f9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	68da      	ldr	r2, [r3, #12]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	430a      	orrs	r2, r1
 8003fb0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	699b      	ldr	r3, [r3, #24]
 8003fb6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a1b      	ldr	r3, [r3, #32]
 8003fbc:	697a      	ldr	r2, [r7, #20]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	697a      	ldr	r2, [r7, #20]
 8003fd2:	430a      	orrs	r2, r1
 8003fd4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a94      	ldr	r2, [pc, #592]	; (800422c <UART_SetConfig+0x2c8>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d120      	bne.n	8004022 <UART_SetConfig+0xbe>
 8003fe0:	4b93      	ldr	r3, [pc, #588]	; (8004230 <UART_SetConfig+0x2cc>)
 8003fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fe6:	f003 0303 	and.w	r3, r3, #3
 8003fea:	2b03      	cmp	r3, #3
 8003fec:	d816      	bhi.n	800401c <UART_SetConfig+0xb8>
 8003fee:	a201      	add	r2, pc, #4	; (adr r2, 8003ff4 <UART_SetConfig+0x90>)
 8003ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ff4:	08004005 	.word	0x08004005
 8003ff8:	08004011 	.word	0x08004011
 8003ffc:	0800400b 	.word	0x0800400b
 8004000:	08004017 	.word	0x08004017
 8004004:	2301      	movs	r3, #1
 8004006:	77fb      	strb	r3, [r7, #31]
 8004008:	e150      	b.n	80042ac <UART_SetConfig+0x348>
 800400a:	2302      	movs	r3, #2
 800400c:	77fb      	strb	r3, [r7, #31]
 800400e:	e14d      	b.n	80042ac <UART_SetConfig+0x348>
 8004010:	2304      	movs	r3, #4
 8004012:	77fb      	strb	r3, [r7, #31]
 8004014:	e14a      	b.n	80042ac <UART_SetConfig+0x348>
 8004016:	2308      	movs	r3, #8
 8004018:	77fb      	strb	r3, [r7, #31]
 800401a:	e147      	b.n	80042ac <UART_SetConfig+0x348>
 800401c:	2310      	movs	r3, #16
 800401e:	77fb      	strb	r3, [r7, #31]
 8004020:	e144      	b.n	80042ac <UART_SetConfig+0x348>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a83      	ldr	r2, [pc, #524]	; (8004234 <UART_SetConfig+0x2d0>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d132      	bne.n	8004092 <UART_SetConfig+0x12e>
 800402c:	4b80      	ldr	r3, [pc, #512]	; (8004230 <UART_SetConfig+0x2cc>)
 800402e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004032:	f003 030c 	and.w	r3, r3, #12
 8004036:	2b0c      	cmp	r3, #12
 8004038:	d828      	bhi.n	800408c <UART_SetConfig+0x128>
 800403a:	a201      	add	r2, pc, #4	; (adr r2, 8004040 <UART_SetConfig+0xdc>)
 800403c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004040:	08004075 	.word	0x08004075
 8004044:	0800408d 	.word	0x0800408d
 8004048:	0800408d 	.word	0x0800408d
 800404c:	0800408d 	.word	0x0800408d
 8004050:	08004081 	.word	0x08004081
 8004054:	0800408d 	.word	0x0800408d
 8004058:	0800408d 	.word	0x0800408d
 800405c:	0800408d 	.word	0x0800408d
 8004060:	0800407b 	.word	0x0800407b
 8004064:	0800408d 	.word	0x0800408d
 8004068:	0800408d 	.word	0x0800408d
 800406c:	0800408d 	.word	0x0800408d
 8004070:	08004087 	.word	0x08004087
 8004074:	2300      	movs	r3, #0
 8004076:	77fb      	strb	r3, [r7, #31]
 8004078:	e118      	b.n	80042ac <UART_SetConfig+0x348>
 800407a:	2302      	movs	r3, #2
 800407c:	77fb      	strb	r3, [r7, #31]
 800407e:	e115      	b.n	80042ac <UART_SetConfig+0x348>
 8004080:	2304      	movs	r3, #4
 8004082:	77fb      	strb	r3, [r7, #31]
 8004084:	e112      	b.n	80042ac <UART_SetConfig+0x348>
 8004086:	2308      	movs	r3, #8
 8004088:	77fb      	strb	r3, [r7, #31]
 800408a:	e10f      	b.n	80042ac <UART_SetConfig+0x348>
 800408c:	2310      	movs	r3, #16
 800408e:	77fb      	strb	r3, [r7, #31]
 8004090:	e10c      	b.n	80042ac <UART_SetConfig+0x348>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a68      	ldr	r2, [pc, #416]	; (8004238 <UART_SetConfig+0x2d4>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d120      	bne.n	80040de <UART_SetConfig+0x17a>
 800409c:	4b64      	ldr	r3, [pc, #400]	; (8004230 <UART_SetConfig+0x2cc>)
 800409e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040a2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80040a6:	2b30      	cmp	r3, #48	; 0x30
 80040a8:	d013      	beq.n	80040d2 <UART_SetConfig+0x16e>
 80040aa:	2b30      	cmp	r3, #48	; 0x30
 80040ac:	d814      	bhi.n	80040d8 <UART_SetConfig+0x174>
 80040ae:	2b20      	cmp	r3, #32
 80040b0:	d009      	beq.n	80040c6 <UART_SetConfig+0x162>
 80040b2:	2b20      	cmp	r3, #32
 80040b4:	d810      	bhi.n	80040d8 <UART_SetConfig+0x174>
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d002      	beq.n	80040c0 <UART_SetConfig+0x15c>
 80040ba:	2b10      	cmp	r3, #16
 80040bc:	d006      	beq.n	80040cc <UART_SetConfig+0x168>
 80040be:	e00b      	b.n	80040d8 <UART_SetConfig+0x174>
 80040c0:	2300      	movs	r3, #0
 80040c2:	77fb      	strb	r3, [r7, #31]
 80040c4:	e0f2      	b.n	80042ac <UART_SetConfig+0x348>
 80040c6:	2302      	movs	r3, #2
 80040c8:	77fb      	strb	r3, [r7, #31]
 80040ca:	e0ef      	b.n	80042ac <UART_SetConfig+0x348>
 80040cc:	2304      	movs	r3, #4
 80040ce:	77fb      	strb	r3, [r7, #31]
 80040d0:	e0ec      	b.n	80042ac <UART_SetConfig+0x348>
 80040d2:	2308      	movs	r3, #8
 80040d4:	77fb      	strb	r3, [r7, #31]
 80040d6:	e0e9      	b.n	80042ac <UART_SetConfig+0x348>
 80040d8:	2310      	movs	r3, #16
 80040da:	77fb      	strb	r3, [r7, #31]
 80040dc:	e0e6      	b.n	80042ac <UART_SetConfig+0x348>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a56      	ldr	r2, [pc, #344]	; (800423c <UART_SetConfig+0x2d8>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d120      	bne.n	800412a <UART_SetConfig+0x1c6>
 80040e8:	4b51      	ldr	r3, [pc, #324]	; (8004230 <UART_SetConfig+0x2cc>)
 80040ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80040f2:	2bc0      	cmp	r3, #192	; 0xc0
 80040f4:	d013      	beq.n	800411e <UART_SetConfig+0x1ba>
 80040f6:	2bc0      	cmp	r3, #192	; 0xc0
 80040f8:	d814      	bhi.n	8004124 <UART_SetConfig+0x1c0>
 80040fa:	2b80      	cmp	r3, #128	; 0x80
 80040fc:	d009      	beq.n	8004112 <UART_SetConfig+0x1ae>
 80040fe:	2b80      	cmp	r3, #128	; 0x80
 8004100:	d810      	bhi.n	8004124 <UART_SetConfig+0x1c0>
 8004102:	2b00      	cmp	r3, #0
 8004104:	d002      	beq.n	800410c <UART_SetConfig+0x1a8>
 8004106:	2b40      	cmp	r3, #64	; 0x40
 8004108:	d006      	beq.n	8004118 <UART_SetConfig+0x1b4>
 800410a:	e00b      	b.n	8004124 <UART_SetConfig+0x1c0>
 800410c:	2300      	movs	r3, #0
 800410e:	77fb      	strb	r3, [r7, #31]
 8004110:	e0cc      	b.n	80042ac <UART_SetConfig+0x348>
 8004112:	2302      	movs	r3, #2
 8004114:	77fb      	strb	r3, [r7, #31]
 8004116:	e0c9      	b.n	80042ac <UART_SetConfig+0x348>
 8004118:	2304      	movs	r3, #4
 800411a:	77fb      	strb	r3, [r7, #31]
 800411c:	e0c6      	b.n	80042ac <UART_SetConfig+0x348>
 800411e:	2308      	movs	r3, #8
 8004120:	77fb      	strb	r3, [r7, #31]
 8004122:	e0c3      	b.n	80042ac <UART_SetConfig+0x348>
 8004124:	2310      	movs	r3, #16
 8004126:	77fb      	strb	r3, [r7, #31]
 8004128:	e0c0      	b.n	80042ac <UART_SetConfig+0x348>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a44      	ldr	r2, [pc, #272]	; (8004240 <UART_SetConfig+0x2dc>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d125      	bne.n	8004180 <UART_SetConfig+0x21c>
 8004134:	4b3e      	ldr	r3, [pc, #248]	; (8004230 <UART_SetConfig+0x2cc>)
 8004136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800413a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800413e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004142:	d017      	beq.n	8004174 <UART_SetConfig+0x210>
 8004144:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004148:	d817      	bhi.n	800417a <UART_SetConfig+0x216>
 800414a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800414e:	d00b      	beq.n	8004168 <UART_SetConfig+0x204>
 8004150:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004154:	d811      	bhi.n	800417a <UART_SetConfig+0x216>
 8004156:	2b00      	cmp	r3, #0
 8004158:	d003      	beq.n	8004162 <UART_SetConfig+0x1fe>
 800415a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800415e:	d006      	beq.n	800416e <UART_SetConfig+0x20a>
 8004160:	e00b      	b.n	800417a <UART_SetConfig+0x216>
 8004162:	2300      	movs	r3, #0
 8004164:	77fb      	strb	r3, [r7, #31]
 8004166:	e0a1      	b.n	80042ac <UART_SetConfig+0x348>
 8004168:	2302      	movs	r3, #2
 800416a:	77fb      	strb	r3, [r7, #31]
 800416c:	e09e      	b.n	80042ac <UART_SetConfig+0x348>
 800416e:	2304      	movs	r3, #4
 8004170:	77fb      	strb	r3, [r7, #31]
 8004172:	e09b      	b.n	80042ac <UART_SetConfig+0x348>
 8004174:	2308      	movs	r3, #8
 8004176:	77fb      	strb	r3, [r7, #31]
 8004178:	e098      	b.n	80042ac <UART_SetConfig+0x348>
 800417a:	2310      	movs	r3, #16
 800417c:	77fb      	strb	r3, [r7, #31]
 800417e:	e095      	b.n	80042ac <UART_SetConfig+0x348>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a2f      	ldr	r2, [pc, #188]	; (8004244 <UART_SetConfig+0x2e0>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d125      	bne.n	80041d6 <UART_SetConfig+0x272>
 800418a:	4b29      	ldr	r3, [pc, #164]	; (8004230 <UART_SetConfig+0x2cc>)
 800418c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004190:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004194:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004198:	d017      	beq.n	80041ca <UART_SetConfig+0x266>
 800419a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800419e:	d817      	bhi.n	80041d0 <UART_SetConfig+0x26c>
 80041a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041a4:	d00b      	beq.n	80041be <UART_SetConfig+0x25a>
 80041a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041aa:	d811      	bhi.n	80041d0 <UART_SetConfig+0x26c>
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d003      	beq.n	80041b8 <UART_SetConfig+0x254>
 80041b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041b4:	d006      	beq.n	80041c4 <UART_SetConfig+0x260>
 80041b6:	e00b      	b.n	80041d0 <UART_SetConfig+0x26c>
 80041b8:	2301      	movs	r3, #1
 80041ba:	77fb      	strb	r3, [r7, #31]
 80041bc:	e076      	b.n	80042ac <UART_SetConfig+0x348>
 80041be:	2302      	movs	r3, #2
 80041c0:	77fb      	strb	r3, [r7, #31]
 80041c2:	e073      	b.n	80042ac <UART_SetConfig+0x348>
 80041c4:	2304      	movs	r3, #4
 80041c6:	77fb      	strb	r3, [r7, #31]
 80041c8:	e070      	b.n	80042ac <UART_SetConfig+0x348>
 80041ca:	2308      	movs	r3, #8
 80041cc:	77fb      	strb	r3, [r7, #31]
 80041ce:	e06d      	b.n	80042ac <UART_SetConfig+0x348>
 80041d0:	2310      	movs	r3, #16
 80041d2:	77fb      	strb	r3, [r7, #31]
 80041d4:	e06a      	b.n	80042ac <UART_SetConfig+0x348>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a1b      	ldr	r2, [pc, #108]	; (8004248 <UART_SetConfig+0x2e4>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d138      	bne.n	8004252 <UART_SetConfig+0x2ee>
 80041e0:	4b13      	ldr	r3, [pc, #76]	; (8004230 <UART_SetConfig+0x2cc>)
 80041e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041e6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80041ea:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80041ee:	d017      	beq.n	8004220 <UART_SetConfig+0x2bc>
 80041f0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80041f4:	d82a      	bhi.n	800424c <UART_SetConfig+0x2e8>
 80041f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041fa:	d00b      	beq.n	8004214 <UART_SetConfig+0x2b0>
 80041fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004200:	d824      	bhi.n	800424c <UART_SetConfig+0x2e8>
 8004202:	2b00      	cmp	r3, #0
 8004204:	d003      	beq.n	800420e <UART_SetConfig+0x2aa>
 8004206:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800420a:	d006      	beq.n	800421a <UART_SetConfig+0x2b6>
 800420c:	e01e      	b.n	800424c <UART_SetConfig+0x2e8>
 800420e:	2300      	movs	r3, #0
 8004210:	77fb      	strb	r3, [r7, #31]
 8004212:	e04b      	b.n	80042ac <UART_SetConfig+0x348>
 8004214:	2302      	movs	r3, #2
 8004216:	77fb      	strb	r3, [r7, #31]
 8004218:	e048      	b.n	80042ac <UART_SetConfig+0x348>
 800421a:	2304      	movs	r3, #4
 800421c:	77fb      	strb	r3, [r7, #31]
 800421e:	e045      	b.n	80042ac <UART_SetConfig+0x348>
 8004220:	2308      	movs	r3, #8
 8004222:	77fb      	strb	r3, [r7, #31]
 8004224:	e042      	b.n	80042ac <UART_SetConfig+0x348>
 8004226:	bf00      	nop
 8004228:	efff69f3 	.word	0xefff69f3
 800422c:	40011000 	.word	0x40011000
 8004230:	40023800 	.word	0x40023800
 8004234:	40004400 	.word	0x40004400
 8004238:	40004800 	.word	0x40004800
 800423c:	40004c00 	.word	0x40004c00
 8004240:	40005000 	.word	0x40005000
 8004244:	40011400 	.word	0x40011400
 8004248:	40007800 	.word	0x40007800
 800424c:	2310      	movs	r3, #16
 800424e:	77fb      	strb	r3, [r7, #31]
 8004250:	e02c      	b.n	80042ac <UART_SetConfig+0x348>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a72      	ldr	r2, [pc, #456]	; (8004420 <UART_SetConfig+0x4bc>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d125      	bne.n	80042a8 <UART_SetConfig+0x344>
 800425c:	4b71      	ldr	r3, [pc, #452]	; (8004424 <UART_SetConfig+0x4c0>)
 800425e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004262:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004266:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800426a:	d017      	beq.n	800429c <UART_SetConfig+0x338>
 800426c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004270:	d817      	bhi.n	80042a2 <UART_SetConfig+0x33e>
 8004272:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004276:	d00b      	beq.n	8004290 <UART_SetConfig+0x32c>
 8004278:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800427c:	d811      	bhi.n	80042a2 <UART_SetConfig+0x33e>
 800427e:	2b00      	cmp	r3, #0
 8004280:	d003      	beq.n	800428a <UART_SetConfig+0x326>
 8004282:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004286:	d006      	beq.n	8004296 <UART_SetConfig+0x332>
 8004288:	e00b      	b.n	80042a2 <UART_SetConfig+0x33e>
 800428a:	2300      	movs	r3, #0
 800428c:	77fb      	strb	r3, [r7, #31]
 800428e:	e00d      	b.n	80042ac <UART_SetConfig+0x348>
 8004290:	2302      	movs	r3, #2
 8004292:	77fb      	strb	r3, [r7, #31]
 8004294:	e00a      	b.n	80042ac <UART_SetConfig+0x348>
 8004296:	2304      	movs	r3, #4
 8004298:	77fb      	strb	r3, [r7, #31]
 800429a:	e007      	b.n	80042ac <UART_SetConfig+0x348>
 800429c:	2308      	movs	r3, #8
 800429e:	77fb      	strb	r3, [r7, #31]
 80042a0:	e004      	b.n	80042ac <UART_SetConfig+0x348>
 80042a2:	2310      	movs	r3, #16
 80042a4:	77fb      	strb	r3, [r7, #31]
 80042a6:	e001      	b.n	80042ac <UART_SetConfig+0x348>
 80042a8:	2310      	movs	r3, #16
 80042aa:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	69db      	ldr	r3, [r3, #28]
 80042b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042b4:	d15b      	bne.n	800436e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80042b6:	7ffb      	ldrb	r3, [r7, #31]
 80042b8:	2b08      	cmp	r3, #8
 80042ba:	d828      	bhi.n	800430e <UART_SetConfig+0x3aa>
 80042bc:	a201      	add	r2, pc, #4	; (adr r2, 80042c4 <UART_SetConfig+0x360>)
 80042be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042c2:	bf00      	nop
 80042c4:	080042e9 	.word	0x080042e9
 80042c8:	080042f1 	.word	0x080042f1
 80042cc:	080042f9 	.word	0x080042f9
 80042d0:	0800430f 	.word	0x0800430f
 80042d4:	080042ff 	.word	0x080042ff
 80042d8:	0800430f 	.word	0x0800430f
 80042dc:	0800430f 	.word	0x0800430f
 80042e0:	0800430f 	.word	0x0800430f
 80042e4:	08004307 	.word	0x08004307
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042e8:	f7fd ffbe 	bl	8002268 <HAL_RCC_GetPCLK1Freq>
 80042ec:	61b8      	str	r0, [r7, #24]
        break;
 80042ee:	e013      	b.n	8004318 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042f0:	f7fd ffce 	bl	8002290 <HAL_RCC_GetPCLK2Freq>
 80042f4:	61b8      	str	r0, [r7, #24]
        break;
 80042f6:	e00f      	b.n	8004318 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042f8:	4b4b      	ldr	r3, [pc, #300]	; (8004428 <UART_SetConfig+0x4c4>)
 80042fa:	61bb      	str	r3, [r7, #24]
        break;
 80042fc:	e00c      	b.n	8004318 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042fe:	f7fd fea1 	bl	8002044 <HAL_RCC_GetSysClockFreq>
 8004302:	61b8      	str	r0, [r7, #24]
        break;
 8004304:	e008      	b.n	8004318 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004306:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800430a:	61bb      	str	r3, [r7, #24]
        break;
 800430c:	e004      	b.n	8004318 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800430e:	2300      	movs	r3, #0
 8004310:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	77bb      	strb	r3, [r7, #30]
        break;
 8004316:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d074      	beq.n	8004408 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800431e:	69bb      	ldr	r3, [r7, #24]
 8004320:	005a      	lsls	r2, r3, #1
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	085b      	lsrs	r3, r3, #1
 8004328:	441a      	add	r2, r3
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004332:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	2b0f      	cmp	r3, #15
 8004338:	d916      	bls.n	8004368 <UART_SetConfig+0x404>
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004340:	d212      	bcs.n	8004368 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	b29b      	uxth	r3, r3
 8004346:	f023 030f 	bic.w	r3, r3, #15
 800434a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	085b      	lsrs	r3, r3, #1
 8004350:	b29b      	uxth	r3, r3
 8004352:	f003 0307 	and.w	r3, r3, #7
 8004356:	b29a      	uxth	r2, r3
 8004358:	89fb      	ldrh	r3, [r7, #14]
 800435a:	4313      	orrs	r3, r2
 800435c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	89fa      	ldrh	r2, [r7, #14]
 8004364:	60da      	str	r2, [r3, #12]
 8004366:	e04f      	b.n	8004408 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	77bb      	strb	r3, [r7, #30]
 800436c:	e04c      	b.n	8004408 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800436e:	7ffb      	ldrb	r3, [r7, #31]
 8004370:	2b08      	cmp	r3, #8
 8004372:	d828      	bhi.n	80043c6 <UART_SetConfig+0x462>
 8004374:	a201      	add	r2, pc, #4	; (adr r2, 800437c <UART_SetConfig+0x418>)
 8004376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800437a:	bf00      	nop
 800437c:	080043a1 	.word	0x080043a1
 8004380:	080043a9 	.word	0x080043a9
 8004384:	080043b1 	.word	0x080043b1
 8004388:	080043c7 	.word	0x080043c7
 800438c:	080043b7 	.word	0x080043b7
 8004390:	080043c7 	.word	0x080043c7
 8004394:	080043c7 	.word	0x080043c7
 8004398:	080043c7 	.word	0x080043c7
 800439c:	080043bf 	.word	0x080043bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043a0:	f7fd ff62 	bl	8002268 <HAL_RCC_GetPCLK1Freq>
 80043a4:	61b8      	str	r0, [r7, #24]
        break;
 80043a6:	e013      	b.n	80043d0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043a8:	f7fd ff72 	bl	8002290 <HAL_RCC_GetPCLK2Freq>
 80043ac:	61b8      	str	r0, [r7, #24]
        break;
 80043ae:	e00f      	b.n	80043d0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043b0:	4b1d      	ldr	r3, [pc, #116]	; (8004428 <UART_SetConfig+0x4c4>)
 80043b2:	61bb      	str	r3, [r7, #24]
        break;
 80043b4:	e00c      	b.n	80043d0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043b6:	f7fd fe45 	bl	8002044 <HAL_RCC_GetSysClockFreq>
 80043ba:	61b8      	str	r0, [r7, #24]
        break;
 80043bc:	e008      	b.n	80043d0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043c2:	61bb      	str	r3, [r7, #24]
        break;
 80043c4:	e004      	b.n	80043d0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80043c6:	2300      	movs	r3, #0
 80043c8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	77bb      	strb	r3, [r7, #30]
        break;
 80043ce:	bf00      	nop
    }

    if (pclk != 0U)
 80043d0:	69bb      	ldr	r3, [r7, #24]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d018      	beq.n	8004408 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	085a      	lsrs	r2, r3, #1
 80043dc:	69bb      	ldr	r3, [r7, #24]
 80043de:	441a      	add	r2, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043e8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	2b0f      	cmp	r3, #15
 80043ee:	d909      	bls.n	8004404 <UART_SetConfig+0x4a0>
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043f6:	d205      	bcs.n	8004404 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	b29a      	uxth	r2, r3
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	60da      	str	r2, [r3, #12]
 8004402:	e001      	b.n	8004408 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004414:	7fbb      	ldrb	r3, [r7, #30]
}
 8004416:	4618      	mov	r0, r3
 8004418:	3720      	adds	r7, #32
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
 800441e:	bf00      	nop
 8004420:	40007c00 	.word	0x40007c00
 8004424:	40023800 	.word	0x40023800
 8004428:	00f42400 	.word	0x00f42400

0800442c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004438:	f003 0301 	and.w	r3, r3, #1
 800443c:	2b00      	cmp	r3, #0
 800443e:	d00a      	beq.n	8004456 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	430a      	orrs	r2, r1
 8004454:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445a:	f003 0302 	and.w	r3, r3, #2
 800445e:	2b00      	cmp	r3, #0
 8004460:	d00a      	beq.n	8004478 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	430a      	orrs	r2, r1
 8004476:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447c:	f003 0304 	and.w	r3, r3, #4
 8004480:	2b00      	cmp	r3, #0
 8004482:	d00a      	beq.n	800449a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	430a      	orrs	r2, r1
 8004498:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449e:	f003 0308 	and.w	r3, r3, #8
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d00a      	beq.n	80044bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	430a      	orrs	r2, r1
 80044ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c0:	f003 0310 	and.w	r3, r3, #16
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d00a      	beq.n	80044de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	430a      	orrs	r2, r1
 80044dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e2:	f003 0320 	and.w	r3, r3, #32
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d00a      	beq.n	8004500 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	430a      	orrs	r2, r1
 80044fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004508:	2b00      	cmp	r3, #0
 800450a:	d01a      	beq.n	8004542 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	430a      	orrs	r2, r1
 8004520:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004526:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800452a:	d10a      	bne.n	8004542 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	430a      	orrs	r2, r1
 8004540:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800454a:	2b00      	cmp	r3, #0
 800454c:	d00a      	beq.n	8004564 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	430a      	orrs	r2, r1
 8004562:	605a      	str	r2, [r3, #4]
  }
}
 8004564:	bf00      	nop
 8004566:	370c      	adds	r7, #12
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr

08004570 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b086      	sub	sp, #24
 8004574:	af02      	add	r7, sp, #8
 8004576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004580:	f7fc fedc 	bl	800133c <HAL_GetTick>
 8004584:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 0308 	and.w	r3, r3, #8
 8004590:	2b08      	cmp	r3, #8
 8004592:	d10e      	bne.n	80045b2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004594:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004598:	9300      	str	r3, [sp, #0]
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2200      	movs	r2, #0
 800459e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 f817 	bl	80045d6 <UART_WaitOnFlagUntilTimeout>
 80045a8:	4603      	mov	r3, r0
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d001      	beq.n	80045b2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	e00d      	b.n	80045ce <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2220      	movs	r2, #32
 80045b6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2220      	movs	r2, #32
 80045bc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80045cc:	2300      	movs	r3, #0
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3710      	adds	r7, #16
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}

080045d6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80045d6:	b580      	push	{r7, lr}
 80045d8:	b09c      	sub	sp, #112	; 0x70
 80045da:	af00      	add	r7, sp, #0
 80045dc:	60f8      	str	r0, [r7, #12]
 80045de:	60b9      	str	r1, [r7, #8]
 80045e0:	603b      	str	r3, [r7, #0]
 80045e2:	4613      	mov	r3, r2
 80045e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045e6:	e0a5      	b.n	8004734 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ee:	f000 80a1 	beq.w	8004734 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045f2:	f7fc fea3 	bl	800133c <HAL_GetTick>
 80045f6:	4602      	mov	r2, r0
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80045fe:	429a      	cmp	r2, r3
 8004600:	d302      	bcc.n	8004608 <UART_WaitOnFlagUntilTimeout+0x32>
 8004602:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004604:	2b00      	cmp	r3, #0
 8004606:	d13e      	bne.n	8004686 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800460e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004610:	e853 3f00 	ldrex	r3, [r3]
 8004614:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004616:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004618:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800461c:	667b      	str	r3, [r7, #100]	; 0x64
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	461a      	mov	r2, r3
 8004624:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004626:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004628:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800462a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800462c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800462e:	e841 2300 	strex	r3, r2, [r1]
 8004632:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004634:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004636:	2b00      	cmp	r3, #0
 8004638:	d1e6      	bne.n	8004608 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	3308      	adds	r3, #8
 8004640:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004642:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004644:	e853 3f00 	ldrex	r3, [r3]
 8004648:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800464a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800464c:	f023 0301 	bic.w	r3, r3, #1
 8004650:	663b      	str	r3, [r7, #96]	; 0x60
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	3308      	adds	r3, #8
 8004658:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800465a:	64ba      	str	r2, [r7, #72]	; 0x48
 800465c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800465e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004660:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004662:	e841 2300 	strex	r3, r2, [r1]
 8004666:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004668:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800466a:	2b00      	cmp	r3, #0
 800466c:	d1e5      	bne.n	800463a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2220      	movs	r2, #32
 8004672:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2220      	movs	r2, #32
 8004678:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2200      	movs	r2, #0
 800467e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004682:	2303      	movs	r3, #3
 8004684:	e067      	b.n	8004756 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0304 	and.w	r3, r3, #4
 8004690:	2b00      	cmp	r3, #0
 8004692:	d04f      	beq.n	8004734 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	69db      	ldr	r3, [r3, #28]
 800469a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800469e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046a2:	d147      	bne.n	8004734 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80046ac:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b6:	e853 3f00 	ldrex	r3, [r3]
 80046ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80046bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046be:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80046c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	461a      	mov	r2, r3
 80046ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046cc:	637b      	str	r3, [r7, #52]	; 0x34
 80046ce:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80046d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80046d4:	e841 2300 	strex	r3, r2, [r1]
 80046d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80046da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d1e6      	bne.n	80046ae <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	3308      	adds	r3, #8
 80046e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	e853 3f00 	ldrex	r3, [r3]
 80046ee:	613b      	str	r3, [r7, #16]
   return(result);
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	f023 0301 	bic.w	r3, r3, #1
 80046f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	3308      	adds	r3, #8
 80046fe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004700:	623a      	str	r2, [r7, #32]
 8004702:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004704:	69f9      	ldr	r1, [r7, #28]
 8004706:	6a3a      	ldr	r2, [r7, #32]
 8004708:	e841 2300 	strex	r3, r2, [r1]
 800470c:	61bb      	str	r3, [r7, #24]
   return(result);
 800470e:	69bb      	ldr	r3, [r7, #24]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d1e5      	bne.n	80046e0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2220      	movs	r2, #32
 8004718:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2220      	movs	r2, #32
 800471e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2220      	movs	r2, #32
 8004724:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2200      	movs	r2, #0
 800472c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004730:	2303      	movs	r3, #3
 8004732:	e010      	b.n	8004756 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	69da      	ldr	r2, [r3, #28]
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	4013      	ands	r3, r2
 800473e:	68ba      	ldr	r2, [r7, #8]
 8004740:	429a      	cmp	r2, r3
 8004742:	bf0c      	ite	eq
 8004744:	2301      	moveq	r3, #1
 8004746:	2300      	movne	r3, #0
 8004748:	b2db      	uxtb	r3, r3
 800474a:	461a      	mov	r2, r3
 800474c:	79fb      	ldrb	r3, [r7, #7]
 800474e:	429a      	cmp	r2, r3
 8004750:	f43f af4a 	beq.w	80045e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004754:	2300      	movs	r3, #0
}
 8004756:	4618      	mov	r0, r3
 8004758:	3770      	adds	r7, #112	; 0x70
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
	...

08004760 <__libc_init_array>:
 8004760:	b570      	push	{r4, r5, r6, lr}
 8004762:	4d0d      	ldr	r5, [pc, #52]	; (8004798 <__libc_init_array+0x38>)
 8004764:	4c0d      	ldr	r4, [pc, #52]	; (800479c <__libc_init_array+0x3c>)
 8004766:	1b64      	subs	r4, r4, r5
 8004768:	10a4      	asrs	r4, r4, #2
 800476a:	2600      	movs	r6, #0
 800476c:	42a6      	cmp	r6, r4
 800476e:	d109      	bne.n	8004784 <__libc_init_array+0x24>
 8004770:	4d0b      	ldr	r5, [pc, #44]	; (80047a0 <__libc_init_array+0x40>)
 8004772:	4c0c      	ldr	r4, [pc, #48]	; (80047a4 <__libc_init_array+0x44>)
 8004774:	f000 f820 	bl	80047b8 <_init>
 8004778:	1b64      	subs	r4, r4, r5
 800477a:	10a4      	asrs	r4, r4, #2
 800477c:	2600      	movs	r6, #0
 800477e:	42a6      	cmp	r6, r4
 8004780:	d105      	bne.n	800478e <__libc_init_array+0x2e>
 8004782:	bd70      	pop	{r4, r5, r6, pc}
 8004784:	f855 3b04 	ldr.w	r3, [r5], #4
 8004788:	4798      	blx	r3
 800478a:	3601      	adds	r6, #1
 800478c:	e7ee      	b.n	800476c <__libc_init_array+0xc>
 800478e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004792:	4798      	blx	r3
 8004794:	3601      	adds	r6, #1
 8004796:	e7f2      	b.n	800477e <__libc_init_array+0x1e>
 8004798:	080047f0 	.word	0x080047f0
 800479c:	080047f0 	.word	0x080047f0
 80047a0:	080047f0 	.word	0x080047f0
 80047a4:	080047f4 	.word	0x080047f4

080047a8 <memset>:
 80047a8:	4402      	add	r2, r0
 80047aa:	4603      	mov	r3, r0
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d100      	bne.n	80047b2 <memset+0xa>
 80047b0:	4770      	bx	lr
 80047b2:	f803 1b01 	strb.w	r1, [r3], #1
 80047b6:	e7f9      	b.n	80047ac <memset+0x4>

080047b8 <_init>:
 80047b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047ba:	bf00      	nop
 80047bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047be:	bc08      	pop	{r3}
 80047c0:	469e      	mov	lr, r3
 80047c2:	4770      	bx	lr

080047c4 <_fini>:
 80047c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047c6:	bf00      	nop
 80047c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047ca:	bc08      	pop	{r3}
 80047cc:	469e      	mov	lr, r3
 80047ce:	4770      	bx	lr
