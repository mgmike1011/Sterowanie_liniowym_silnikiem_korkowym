
Projekt_przejsciowy_MCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005fdc  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080061a4  080061a4  000161a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061c4  080061c4  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080061c4  080061c4  000161c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080061cc  080061cc  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061cc  080061cc  000161cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080061d0  080061d0  000161d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080061d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e4  20000068  0800623c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000024c  0800623c  0002024c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000159d4  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029e6  00000000  00000000  00035a6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001170  00000000  00000000  00038458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001060  00000000  00000000  000395c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026cfb  00000000  00000000  0003a628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015e0f  00000000  00000000  00061323  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1527  00000000  00000000  00077132  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00168659  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049c0  00000000  00000000  001686ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000068 	.word	0x20000068
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800618c 	.word	0x0800618c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	2000006c 	.word	0x2000006c
 8000204:	0800618c 	.word	0x0800618c

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_d2iz>:
 8000580:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000584:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000588:	d215      	bcs.n	80005b6 <__aeabi_d2iz+0x36>
 800058a:	d511      	bpl.n	80005b0 <__aeabi_d2iz+0x30>
 800058c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000590:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000594:	d912      	bls.n	80005bc <__aeabi_d2iz+0x3c>
 8000596:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800059a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800059e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80005a2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80005a6:	fa23 f002 	lsr.w	r0, r3, r2
 80005aa:	bf18      	it	ne
 80005ac:	4240      	negne	r0, r0
 80005ae:	4770      	bx	lr
 80005b0:	f04f 0000 	mov.w	r0, #0
 80005b4:	4770      	bx	lr
 80005b6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80005ba:	d105      	bne.n	80005c8 <__aeabi_d2iz+0x48>
 80005bc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80005c0:	bf08      	it	eq
 80005c2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80005c6:	4770      	bx	lr
 80005c8:	f04f 0000 	mov.w	r0, #0
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <__aeabi_uldivmod>:
 80005d0:	b953      	cbnz	r3, 80005e8 <__aeabi_uldivmod+0x18>
 80005d2:	b94a      	cbnz	r2, 80005e8 <__aeabi_uldivmod+0x18>
 80005d4:	2900      	cmp	r1, #0
 80005d6:	bf08      	it	eq
 80005d8:	2800      	cmpeq	r0, #0
 80005da:	bf1c      	itt	ne
 80005dc:	f04f 31ff 	movne.w	r1, #4294967295
 80005e0:	f04f 30ff 	movne.w	r0, #4294967295
 80005e4:	f000 b974 	b.w	80008d0 <__aeabi_idiv0>
 80005e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80005ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80005f0:	f000 f806 	bl	8000600 <__udivmoddi4>
 80005f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80005f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80005fc:	b004      	add	sp, #16
 80005fe:	4770      	bx	lr

08000600 <__udivmoddi4>:
 8000600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000604:	9d08      	ldr	r5, [sp, #32]
 8000606:	4604      	mov	r4, r0
 8000608:	468e      	mov	lr, r1
 800060a:	2b00      	cmp	r3, #0
 800060c:	d14d      	bne.n	80006aa <__udivmoddi4+0xaa>
 800060e:	428a      	cmp	r2, r1
 8000610:	4694      	mov	ip, r2
 8000612:	d969      	bls.n	80006e8 <__udivmoddi4+0xe8>
 8000614:	fab2 f282 	clz	r2, r2
 8000618:	b152      	cbz	r2, 8000630 <__udivmoddi4+0x30>
 800061a:	fa01 f302 	lsl.w	r3, r1, r2
 800061e:	f1c2 0120 	rsb	r1, r2, #32
 8000622:	fa20 f101 	lsr.w	r1, r0, r1
 8000626:	fa0c fc02 	lsl.w	ip, ip, r2
 800062a:	ea41 0e03 	orr.w	lr, r1, r3
 800062e:	4094      	lsls	r4, r2
 8000630:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000634:	0c21      	lsrs	r1, r4, #16
 8000636:	fbbe f6f8 	udiv	r6, lr, r8
 800063a:	fa1f f78c 	uxth.w	r7, ip
 800063e:	fb08 e316 	mls	r3, r8, r6, lr
 8000642:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000646:	fb06 f107 	mul.w	r1, r6, r7
 800064a:	4299      	cmp	r1, r3
 800064c:	d90a      	bls.n	8000664 <__udivmoddi4+0x64>
 800064e:	eb1c 0303 	adds.w	r3, ip, r3
 8000652:	f106 30ff 	add.w	r0, r6, #4294967295
 8000656:	f080 811f 	bcs.w	8000898 <__udivmoddi4+0x298>
 800065a:	4299      	cmp	r1, r3
 800065c:	f240 811c 	bls.w	8000898 <__udivmoddi4+0x298>
 8000660:	3e02      	subs	r6, #2
 8000662:	4463      	add	r3, ip
 8000664:	1a5b      	subs	r3, r3, r1
 8000666:	b2a4      	uxth	r4, r4
 8000668:	fbb3 f0f8 	udiv	r0, r3, r8
 800066c:	fb08 3310 	mls	r3, r8, r0, r3
 8000670:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000674:	fb00 f707 	mul.w	r7, r0, r7
 8000678:	42a7      	cmp	r7, r4
 800067a:	d90a      	bls.n	8000692 <__udivmoddi4+0x92>
 800067c:	eb1c 0404 	adds.w	r4, ip, r4
 8000680:	f100 33ff 	add.w	r3, r0, #4294967295
 8000684:	f080 810a 	bcs.w	800089c <__udivmoddi4+0x29c>
 8000688:	42a7      	cmp	r7, r4
 800068a:	f240 8107 	bls.w	800089c <__udivmoddi4+0x29c>
 800068e:	4464      	add	r4, ip
 8000690:	3802      	subs	r0, #2
 8000692:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000696:	1be4      	subs	r4, r4, r7
 8000698:	2600      	movs	r6, #0
 800069a:	b11d      	cbz	r5, 80006a4 <__udivmoddi4+0xa4>
 800069c:	40d4      	lsrs	r4, r2
 800069e:	2300      	movs	r3, #0
 80006a0:	e9c5 4300 	strd	r4, r3, [r5]
 80006a4:	4631      	mov	r1, r6
 80006a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006aa:	428b      	cmp	r3, r1
 80006ac:	d909      	bls.n	80006c2 <__udivmoddi4+0xc2>
 80006ae:	2d00      	cmp	r5, #0
 80006b0:	f000 80ef 	beq.w	8000892 <__udivmoddi4+0x292>
 80006b4:	2600      	movs	r6, #0
 80006b6:	e9c5 0100 	strd	r0, r1, [r5]
 80006ba:	4630      	mov	r0, r6
 80006bc:	4631      	mov	r1, r6
 80006be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006c2:	fab3 f683 	clz	r6, r3
 80006c6:	2e00      	cmp	r6, #0
 80006c8:	d14a      	bne.n	8000760 <__udivmoddi4+0x160>
 80006ca:	428b      	cmp	r3, r1
 80006cc:	d302      	bcc.n	80006d4 <__udivmoddi4+0xd4>
 80006ce:	4282      	cmp	r2, r0
 80006d0:	f200 80f9 	bhi.w	80008c6 <__udivmoddi4+0x2c6>
 80006d4:	1a84      	subs	r4, r0, r2
 80006d6:	eb61 0303 	sbc.w	r3, r1, r3
 80006da:	2001      	movs	r0, #1
 80006dc:	469e      	mov	lr, r3
 80006de:	2d00      	cmp	r5, #0
 80006e0:	d0e0      	beq.n	80006a4 <__udivmoddi4+0xa4>
 80006e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80006e6:	e7dd      	b.n	80006a4 <__udivmoddi4+0xa4>
 80006e8:	b902      	cbnz	r2, 80006ec <__udivmoddi4+0xec>
 80006ea:	deff      	udf	#255	; 0xff
 80006ec:	fab2 f282 	clz	r2, r2
 80006f0:	2a00      	cmp	r2, #0
 80006f2:	f040 8092 	bne.w	800081a <__udivmoddi4+0x21a>
 80006f6:	eba1 010c 	sub.w	r1, r1, ip
 80006fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80006fe:	fa1f fe8c 	uxth.w	lr, ip
 8000702:	2601      	movs	r6, #1
 8000704:	0c20      	lsrs	r0, r4, #16
 8000706:	fbb1 f3f7 	udiv	r3, r1, r7
 800070a:	fb07 1113 	mls	r1, r7, r3, r1
 800070e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000712:	fb0e f003 	mul.w	r0, lr, r3
 8000716:	4288      	cmp	r0, r1
 8000718:	d908      	bls.n	800072c <__udivmoddi4+0x12c>
 800071a:	eb1c 0101 	adds.w	r1, ip, r1
 800071e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000722:	d202      	bcs.n	800072a <__udivmoddi4+0x12a>
 8000724:	4288      	cmp	r0, r1
 8000726:	f200 80cb 	bhi.w	80008c0 <__udivmoddi4+0x2c0>
 800072a:	4643      	mov	r3, r8
 800072c:	1a09      	subs	r1, r1, r0
 800072e:	b2a4      	uxth	r4, r4
 8000730:	fbb1 f0f7 	udiv	r0, r1, r7
 8000734:	fb07 1110 	mls	r1, r7, r0, r1
 8000738:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800073c:	fb0e fe00 	mul.w	lr, lr, r0
 8000740:	45a6      	cmp	lr, r4
 8000742:	d908      	bls.n	8000756 <__udivmoddi4+0x156>
 8000744:	eb1c 0404 	adds.w	r4, ip, r4
 8000748:	f100 31ff 	add.w	r1, r0, #4294967295
 800074c:	d202      	bcs.n	8000754 <__udivmoddi4+0x154>
 800074e:	45a6      	cmp	lr, r4
 8000750:	f200 80bb 	bhi.w	80008ca <__udivmoddi4+0x2ca>
 8000754:	4608      	mov	r0, r1
 8000756:	eba4 040e 	sub.w	r4, r4, lr
 800075a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800075e:	e79c      	b.n	800069a <__udivmoddi4+0x9a>
 8000760:	f1c6 0720 	rsb	r7, r6, #32
 8000764:	40b3      	lsls	r3, r6
 8000766:	fa22 fc07 	lsr.w	ip, r2, r7
 800076a:	ea4c 0c03 	orr.w	ip, ip, r3
 800076e:	fa20 f407 	lsr.w	r4, r0, r7
 8000772:	fa01 f306 	lsl.w	r3, r1, r6
 8000776:	431c      	orrs	r4, r3
 8000778:	40f9      	lsrs	r1, r7
 800077a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800077e:	fa00 f306 	lsl.w	r3, r0, r6
 8000782:	fbb1 f8f9 	udiv	r8, r1, r9
 8000786:	0c20      	lsrs	r0, r4, #16
 8000788:	fa1f fe8c 	uxth.w	lr, ip
 800078c:	fb09 1118 	mls	r1, r9, r8, r1
 8000790:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000794:	fb08 f00e 	mul.w	r0, r8, lr
 8000798:	4288      	cmp	r0, r1
 800079a:	fa02 f206 	lsl.w	r2, r2, r6
 800079e:	d90b      	bls.n	80007b8 <__udivmoddi4+0x1b8>
 80007a0:	eb1c 0101 	adds.w	r1, ip, r1
 80007a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80007a8:	f080 8088 	bcs.w	80008bc <__udivmoddi4+0x2bc>
 80007ac:	4288      	cmp	r0, r1
 80007ae:	f240 8085 	bls.w	80008bc <__udivmoddi4+0x2bc>
 80007b2:	f1a8 0802 	sub.w	r8, r8, #2
 80007b6:	4461      	add	r1, ip
 80007b8:	1a09      	subs	r1, r1, r0
 80007ba:	b2a4      	uxth	r4, r4
 80007bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80007c0:	fb09 1110 	mls	r1, r9, r0, r1
 80007c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80007c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80007cc:	458e      	cmp	lr, r1
 80007ce:	d908      	bls.n	80007e2 <__udivmoddi4+0x1e2>
 80007d0:	eb1c 0101 	adds.w	r1, ip, r1
 80007d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80007d8:	d26c      	bcs.n	80008b4 <__udivmoddi4+0x2b4>
 80007da:	458e      	cmp	lr, r1
 80007dc:	d96a      	bls.n	80008b4 <__udivmoddi4+0x2b4>
 80007de:	3802      	subs	r0, #2
 80007e0:	4461      	add	r1, ip
 80007e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80007e6:	fba0 9402 	umull	r9, r4, r0, r2
 80007ea:	eba1 010e 	sub.w	r1, r1, lr
 80007ee:	42a1      	cmp	r1, r4
 80007f0:	46c8      	mov	r8, r9
 80007f2:	46a6      	mov	lr, r4
 80007f4:	d356      	bcc.n	80008a4 <__udivmoddi4+0x2a4>
 80007f6:	d053      	beq.n	80008a0 <__udivmoddi4+0x2a0>
 80007f8:	b15d      	cbz	r5, 8000812 <__udivmoddi4+0x212>
 80007fa:	ebb3 0208 	subs.w	r2, r3, r8
 80007fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000802:	fa01 f707 	lsl.w	r7, r1, r7
 8000806:	fa22 f306 	lsr.w	r3, r2, r6
 800080a:	40f1      	lsrs	r1, r6
 800080c:	431f      	orrs	r7, r3
 800080e:	e9c5 7100 	strd	r7, r1, [r5]
 8000812:	2600      	movs	r6, #0
 8000814:	4631      	mov	r1, r6
 8000816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800081a:	f1c2 0320 	rsb	r3, r2, #32
 800081e:	40d8      	lsrs	r0, r3
 8000820:	fa0c fc02 	lsl.w	ip, ip, r2
 8000824:	fa21 f303 	lsr.w	r3, r1, r3
 8000828:	4091      	lsls	r1, r2
 800082a:	4301      	orrs	r1, r0
 800082c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000830:	fa1f fe8c 	uxth.w	lr, ip
 8000834:	fbb3 f0f7 	udiv	r0, r3, r7
 8000838:	fb07 3610 	mls	r6, r7, r0, r3
 800083c:	0c0b      	lsrs	r3, r1, #16
 800083e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000842:	fb00 f60e 	mul.w	r6, r0, lr
 8000846:	429e      	cmp	r6, r3
 8000848:	fa04 f402 	lsl.w	r4, r4, r2
 800084c:	d908      	bls.n	8000860 <__udivmoddi4+0x260>
 800084e:	eb1c 0303 	adds.w	r3, ip, r3
 8000852:	f100 38ff 	add.w	r8, r0, #4294967295
 8000856:	d22f      	bcs.n	80008b8 <__udivmoddi4+0x2b8>
 8000858:	429e      	cmp	r6, r3
 800085a:	d92d      	bls.n	80008b8 <__udivmoddi4+0x2b8>
 800085c:	3802      	subs	r0, #2
 800085e:	4463      	add	r3, ip
 8000860:	1b9b      	subs	r3, r3, r6
 8000862:	b289      	uxth	r1, r1
 8000864:	fbb3 f6f7 	udiv	r6, r3, r7
 8000868:	fb07 3316 	mls	r3, r7, r6, r3
 800086c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000870:	fb06 f30e 	mul.w	r3, r6, lr
 8000874:	428b      	cmp	r3, r1
 8000876:	d908      	bls.n	800088a <__udivmoddi4+0x28a>
 8000878:	eb1c 0101 	adds.w	r1, ip, r1
 800087c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000880:	d216      	bcs.n	80008b0 <__udivmoddi4+0x2b0>
 8000882:	428b      	cmp	r3, r1
 8000884:	d914      	bls.n	80008b0 <__udivmoddi4+0x2b0>
 8000886:	3e02      	subs	r6, #2
 8000888:	4461      	add	r1, ip
 800088a:	1ac9      	subs	r1, r1, r3
 800088c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000890:	e738      	b.n	8000704 <__udivmoddi4+0x104>
 8000892:	462e      	mov	r6, r5
 8000894:	4628      	mov	r0, r5
 8000896:	e705      	b.n	80006a4 <__udivmoddi4+0xa4>
 8000898:	4606      	mov	r6, r0
 800089a:	e6e3      	b.n	8000664 <__udivmoddi4+0x64>
 800089c:	4618      	mov	r0, r3
 800089e:	e6f8      	b.n	8000692 <__udivmoddi4+0x92>
 80008a0:	454b      	cmp	r3, r9
 80008a2:	d2a9      	bcs.n	80007f8 <__udivmoddi4+0x1f8>
 80008a4:	ebb9 0802 	subs.w	r8, r9, r2
 80008a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80008ac:	3801      	subs	r0, #1
 80008ae:	e7a3      	b.n	80007f8 <__udivmoddi4+0x1f8>
 80008b0:	4646      	mov	r6, r8
 80008b2:	e7ea      	b.n	800088a <__udivmoddi4+0x28a>
 80008b4:	4620      	mov	r0, r4
 80008b6:	e794      	b.n	80007e2 <__udivmoddi4+0x1e2>
 80008b8:	4640      	mov	r0, r8
 80008ba:	e7d1      	b.n	8000860 <__udivmoddi4+0x260>
 80008bc:	46d0      	mov	r8, sl
 80008be:	e77b      	b.n	80007b8 <__udivmoddi4+0x1b8>
 80008c0:	3b02      	subs	r3, #2
 80008c2:	4461      	add	r1, ip
 80008c4:	e732      	b.n	800072c <__udivmoddi4+0x12c>
 80008c6:	4630      	mov	r0, r6
 80008c8:	e709      	b.n	80006de <__udivmoddi4+0xde>
 80008ca:	4464      	add	r4, ip
 80008cc:	3802      	subs	r0, #2
 80008ce:	e742      	b.n	8000756 <__udivmoddi4+0x156>

080008d0 <__aeabi_idiv0>:
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop

080008d4 <Set_Resolution_A4988>:
 */
#include "A4988_Drive.h"
#include "math.h"
#include "main.h"
#include "stm32f7xx_hal.h"
void Set_Resolution_A4988(A4988_Drive* drive, int resolution){
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
 80008dc:	6039      	str	r1, [r7, #0]
	//	Setting the resolution of the driver.
	//	@param resolution: Resolution.
	//	@param drive: Pointer to structure.
	//	@return: none
	//
	switch(resolution){
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	3b01      	subs	r3, #1
 80008e2:	2b04      	cmp	r3, #4
 80008e4:	f200 809a 	bhi.w	8000a1c <Set_Resolution_A4988+0x148>
 80008e8:	a201      	add	r2, pc, #4	; (adr r2, 80008f0 <Set_Resolution_A4988+0x1c>)
 80008ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008ee:	bf00      	nop
 80008f0:	08000905 	.word	0x08000905
 80008f4:	0800093d 	.word	0x0800093d
 80008f8:	08000975 	.word	0x08000975
 80008fc:	080009ad 	.word	0x080009ad
 8000900:	080009e5 	.word	0x080009e5
		case FULL_STEP:
			HAL_GPIO_WritePin(*&(drive->PORT_MS1), drive->PIN_MS1, GPIO_PIN_RESET);
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	69d8      	ldr	r0, [r3, #28]
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800090c:	2200      	movs	r2, #0
 800090e:	4619      	mov	r1, r3
 8000910:	f001 fd46 	bl	80023a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(*&(drive->PORT_MS2), drive->PIN_MS2, GPIO_PIN_RESET);
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	6a18      	ldr	r0, [r3, #32]
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800091c:	2200      	movs	r2, #0
 800091e:	4619      	mov	r1, r3
 8000920:	f001 fd3e 	bl	80023a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(*&(drive->PORT_MS3), drive->PIN_MS3, GPIO_PIN_RESET);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800092c:	2200      	movs	r2, #0
 800092e:	4619      	mov	r1, r3
 8000930:	f001 fd36 	bl	80023a0 <HAL_GPIO_WritePin>
			drive->RESOLUTION = 1;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	2201      	movs	r2, #1
 8000938:	631a      	str	r2, [r3, #48]	; 0x30
			break;
 800093a:	e08b      	b.n	8000a54 <Set_Resolution_A4988+0x180>
		case HALF_STEP:
			HAL_GPIO_WritePin(*&(drive->PORT_MS1), drive->PIN_MS1, GPIO_PIN_SET);
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	69d8      	ldr	r0, [r3, #28]
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000944:	2201      	movs	r2, #1
 8000946:	4619      	mov	r1, r3
 8000948:	f001 fd2a 	bl	80023a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(*&(drive->PORT_MS2), drive->PIN_MS2, GPIO_PIN_RESET);
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	6a18      	ldr	r0, [r3, #32]
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000954:	2200      	movs	r2, #0
 8000956:	4619      	mov	r1, r3
 8000958:	f001 fd22 	bl	80023a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(*&(drive->PORT_MS3), drive->PIN_MS3, GPIO_PIN_RESET);
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000964:	2200      	movs	r2, #0
 8000966:	4619      	mov	r1, r3
 8000968:	f001 fd1a 	bl	80023a0 <HAL_GPIO_WritePin>
			drive->RESOLUTION = 2;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	2202      	movs	r2, #2
 8000970:	631a      	str	r2, [r3, #48]	; 0x30
			break;
 8000972:	e06f      	b.n	8000a54 <Set_Resolution_A4988+0x180>
		case QUARTER_STEP:
			HAL_GPIO_WritePin(*&(drive->PORT_MS1), drive->PIN_MS1, GPIO_PIN_RESET);
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	69d8      	ldr	r0, [r3, #28]
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800097c:	2200      	movs	r2, #0
 800097e:	4619      	mov	r1, r3
 8000980:	f001 fd0e 	bl	80023a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(*&(drive->PORT_MS2), drive->PIN_MS2, GPIO_PIN_SET);
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	6a18      	ldr	r0, [r3, #32]
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800098c:	2201      	movs	r2, #1
 800098e:	4619      	mov	r1, r3
 8000990:	f001 fd06 	bl	80023a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(*&(drive->PORT_MS3), drive->PIN_MS3, GPIO_PIN_RESET);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800099c:	2200      	movs	r2, #0
 800099e:	4619      	mov	r1, r3
 80009a0:	f001 fcfe 	bl	80023a0 <HAL_GPIO_WritePin>
			drive->RESOLUTION = 4;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	2204      	movs	r2, #4
 80009a8:	631a      	str	r2, [r3, #48]	; 0x30
			break;
 80009aa:	e053      	b.n	8000a54 <Set_Resolution_A4988+0x180>
		case ONE_EIGHTH_STEP:
			HAL_GPIO_WritePin(*&(drive->PORT_MS1), drive->PIN_MS1, GPIO_PIN_SET);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	69d8      	ldr	r0, [r3, #28]
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80009b4:	2201      	movs	r2, #1
 80009b6:	4619      	mov	r1, r3
 80009b8:	f001 fcf2 	bl	80023a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(*&(drive->PORT_MS2), drive->PIN_MS2, GPIO_PIN_SET);
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	6a18      	ldr	r0, [r3, #32]
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80009c4:	2201      	movs	r2, #1
 80009c6:	4619      	mov	r1, r3
 80009c8:	f001 fcea 	bl	80023a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(*&(drive->PORT_MS3), drive->PIN_MS3, GPIO_PIN_RESET);
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80009d4:	2200      	movs	r2, #0
 80009d6:	4619      	mov	r1, r3
 80009d8:	f001 fce2 	bl	80023a0 <HAL_GPIO_WritePin>
			drive->RESOLUTION = 8;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	2208      	movs	r2, #8
 80009e0:	631a      	str	r2, [r3, #48]	; 0x30
			break;
 80009e2:	e037      	b.n	8000a54 <Set_Resolution_A4988+0x180>
		case ONE_SIXTEENTH_STEP:
			HAL_GPIO_WritePin(*&(drive->PORT_MS1), drive->PIN_MS1, GPIO_PIN_SET);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	69d8      	ldr	r0, [r3, #28]
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80009ec:	2201      	movs	r2, #1
 80009ee:	4619      	mov	r1, r3
 80009f0:	f001 fcd6 	bl	80023a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(*&(drive->PORT_MS2), drive->PIN_MS2, GPIO_PIN_SET);
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	6a18      	ldr	r0, [r3, #32]
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80009fc:	2201      	movs	r2, #1
 80009fe:	4619      	mov	r1, r3
 8000a00:	f001 fcce 	bl	80023a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(*&(drive->PORT_MS3), drive->PIN_MS3, GPIO_PIN_SET);
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	4619      	mov	r1, r3
 8000a10:	f001 fcc6 	bl	80023a0 <HAL_GPIO_WritePin>
			drive->RESOLUTION = 16;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	2210      	movs	r2, #16
 8000a18:	631a      	str	r2, [r3, #48]	; 0x30
			break;
 8000a1a:	e01b      	b.n	8000a54 <Set_Resolution_A4988+0x180>
		default:
			HAL_GPIO_WritePin(*&(drive->PORT_MS1), drive->PIN_MS1, GPIO_PIN_SET);
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	69d8      	ldr	r0, [r3, #28]
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000a24:	2201      	movs	r2, #1
 8000a26:	4619      	mov	r1, r3
 8000a28:	f001 fcba 	bl	80023a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(*&(drive->PORT_MS2), drive->PIN_MS2, GPIO_PIN_SET);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	6a18      	ldr	r0, [r3, #32]
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000a34:	2201      	movs	r2, #1
 8000a36:	4619      	mov	r1, r3
 8000a38:	f001 fcb2 	bl	80023a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(*&(drive->PORT_MS3), drive->PIN_MS3, GPIO_PIN_SET);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000a44:	2201      	movs	r2, #1
 8000a46:	4619      	mov	r1, r3
 8000a48:	f001 fcaa 	bl	80023a0 <HAL_GPIO_WritePin>
			drive->RESOLUTION = 16;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	2210      	movs	r2, #16
 8000a50:	631a      	str	r2, [r3, #48]	; 0x30
	}
}
 8000a52:	bf00      	nop
 8000a54:	bf00      	nop
 8000a56:	3708      	adds	r7, #8
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <Set_Direction_A4988>:
void Set_Direction_A4988(A4988_Drive* drive, int direction){
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
 8000a64:	6039      	str	r1, [r7, #0]
	//	Setting the direction of rotation.
	//	@param direction: 1 - Right, 2 - Left, default - Right.
	//	@param drive: Pointer to structure.
	//	@return: none
	//
	switch(direction){
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d003      	beq.n	8000a74 <Set_Direction_A4988+0x18>
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	2b02      	cmp	r3, #2
 8000a70:	d009      	beq.n	8000a86 <Set_Direction_A4988+0x2a>
 8000a72:	e011      	b.n	8000a98 <Set_Direction_A4988+0x3c>
		case 1:
			HAL_GPIO_WritePin(*&(drive->PORT_DIR), drive->PIN_DIR, GPIO_PIN_SET);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	6958      	ldr	r0, [r3, #20]
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	8b1b      	ldrh	r3, [r3, #24]
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	4619      	mov	r1, r3
 8000a80:	f001 fc8e 	bl	80023a0 <HAL_GPIO_WritePin>
			break;
 8000a84:	e011      	b.n	8000aaa <Set_Direction_A4988+0x4e>
		case 2:
			HAL_GPIO_WritePin(*&(drive->PORT_DIR), drive->PIN_DIR, GPIO_PIN_RESET);
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	6958      	ldr	r0, [r3, #20]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	8b1b      	ldrh	r3, [r3, #24]
 8000a8e:	2200      	movs	r2, #0
 8000a90:	4619      	mov	r1, r3
 8000a92:	f001 fc85 	bl	80023a0 <HAL_GPIO_WritePin>
			break;
 8000a96:	e008      	b.n	8000aaa <Set_Direction_A4988+0x4e>
		default:
			HAL_GPIO_WritePin(*&(drive->PORT_DIR), drive->PIN_DIR, GPIO_PIN_SET);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	6958      	ldr	r0, [r3, #20]
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	8b1b      	ldrh	r3, [r3, #24]
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	f001 fc7c 	bl	80023a0 <HAL_GPIO_WritePin>
	}
}
 8000aa8:	bf00      	nop
 8000aaa:	bf00      	nop
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}

08000ab2 <Enable_A4988>:
void Enable_A4988(A4988_Drive* drive, int signal){
 8000ab2:	b580      	push	{r7, lr}
 8000ab4:	b082      	sub	sp, #8
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	6078      	str	r0, [r7, #4]
 8000aba:	6039      	str	r1, [r7, #0]
	//	Enable controler.
	//	@param signal: ENABLE_DRIVE - 1, DISABLE_DRIVE - 2, default - disable.
	//	@param drive: Pointer to structure.
	//	@return: none
	//
	switch(signal){
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	2b01      	cmp	r3, #1
 8000ac0:	d003      	beq.n	8000aca <Enable_A4988+0x18>
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	2b02      	cmp	r3, #2
 8000ac6:	d009      	beq.n	8000adc <Enable_A4988+0x2a>
 8000ac8:	e011      	b.n	8000aee <Enable_A4988+0x3c>
		case ENABLE_DRIVE:
			HAL_GPIO_WritePin(*&(drive->PORT_ENABLE), drive->PIN_ENABLE, GPIO_PIN_RESET);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	f001 fc63 	bl	80023a0 <HAL_GPIO_WritePin>
			break;
 8000ada:	e011      	b.n	8000b00 <Enable_A4988+0x4e>
		case DISABLE_DRIVE:
			HAL_GPIO_WritePin(*&(drive->PORT_ENABLE), drive->PIN_ENABLE, GPIO_PIN_SET);
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	f001 fc5a 	bl	80023a0 <HAL_GPIO_WritePin>
			break;
 8000aec:	e008      	b.n	8000b00 <Enable_A4988+0x4e>
		default:
			HAL_GPIO_WritePin(*&(drive->PORT_ENABLE), drive->PIN_ENABLE, GPIO_PIN_SET);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8000af6:	2201      	movs	r2, #1
 8000af8:	4619      	mov	r1, r3
 8000afa:	f001 fc51 	bl	80023a0 <HAL_GPIO_WritePin>
	}
}
 8000afe:	bf00      	nop
 8000b00:	bf00      	nop
 8000b02:	3708      	adds	r7, #8
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}

08000b08 <Reset_A4988>:
void Reset_A4988(A4988_Drive* drive, int reset){
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
 8000b10:	6039      	str	r1, [r7, #0]
	//	Reset controler.
	//	@param reset: ENABLE_DRIVE - 1, DISABLE_DRIVE - 2, default - disable.
	//	@param drive: Pointer to structure.
	//	@return: none
	//
	switch(reset){
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	d003      	beq.n	8000b20 <Reset_A4988+0x18>
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	2b02      	cmp	r3, #2
 8000b1c:	d00a      	beq.n	8000b34 <Reset_A4988+0x2c>
 8000b1e:	e013      	b.n	8000b48 <Reset_A4988+0x40>
		case ENABLE_DRIVE:
			HAL_GPIO_WritePin(*&(drive->PORT_RESET), drive->PIN_RESET, GPIO_PIN_SET);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	f001 fc37 	bl	80023a0 <HAL_GPIO_WritePin>
			break;
 8000b32:	e013      	b.n	8000b5c <Reset_A4988+0x54>
		case DISABLE_DRIVE:
			HAL_GPIO_WritePin(*&(drive->PORT_RESET), drive->PIN_RESET, GPIO_PIN_RESET);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000b3e:	2200      	movs	r2, #0
 8000b40:	4619      	mov	r1, r3
 8000b42:	f001 fc2d 	bl	80023a0 <HAL_GPIO_WritePin>
			break;
 8000b46:	e009      	b.n	8000b5c <Reset_A4988+0x54>
		default:
			HAL_GPIO_WritePin(*&(drive->PORT_RESET), drive->PIN_RESET, GPIO_PIN_RESET);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000b52:	2200      	movs	r2, #0
 8000b54:	4619      	mov	r1, r3
 8000b56:	f001 fc23 	bl	80023a0 <HAL_GPIO_WritePin>
	}
}
 8000b5a:	bf00      	nop
 8000b5c:	bf00      	nop
 8000b5e:	3708      	adds	r7, #8
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <Sleep_A4988>:
void Sleep_A4988(A4988_Drive* drive, int sleep){
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
 8000b6c:	6039      	str	r1, [r7, #0]
	//	Enable sleep mode.
	//	@param sleep: ENABLE_DRIVE - 1, DISABLE_DRIVE - 2, default - disable.
	//	@param drive: Pointer to structure.
	//	@return: none
	//
	switch(sleep){
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	2b01      	cmp	r3, #1
 8000b72:	d003      	beq.n	8000b7c <Sleep_A4988+0x18>
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	2b02      	cmp	r3, #2
 8000b78:	d00a      	beq.n	8000b90 <Sleep_A4988+0x2c>
 8000b7a:	e013      	b.n	8000ba4 <Sleep_A4988+0x40>
		case ENABLE_DRIVE:
			HAL_GPIO_WritePin(*&(drive->PORT_SLEEP), drive->PIN_SLEEP, GPIO_PIN_SET);
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8000b86:	2201      	movs	r2, #1
 8000b88:	4619      	mov	r1, r3
 8000b8a:	f001 fc09 	bl	80023a0 <HAL_GPIO_WritePin>
			break;
 8000b8e:	e013      	b.n	8000bb8 <Sleep_A4988+0x54>
		case DISABLE_DRIVE:
			HAL_GPIO_WritePin(*&(drive->PORT_SLEEP), drive->PIN_SLEEP, GPIO_PIN_RESET);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	f001 fbff 	bl	80023a0 <HAL_GPIO_WritePin>
			break;
 8000ba2:	e009      	b.n	8000bb8 <Sleep_A4988+0x54>
		default:
			HAL_GPIO_WritePin(*&(drive->PORT_SLEEP), drive->PIN_SLEEP, GPIO_PIN_RESET);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8000bae:	2200      	movs	r2, #0
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	f001 fbf5 	bl	80023a0 <HAL_GPIO_WritePin>
	}
}
 8000bb6:	bf00      	nop
 8000bb8:	bf00      	nop
 8000bba:	3708      	adds	r7, #8
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <Calculate_Steps_A4988>:
int Calculate_Steps_A4988(A4988_Drive* drive, float angle){
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b086      	sub	sp, #24
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	ed87 0a00 	vstr	s0, [r7]
	// @param angle: Angle.
	// @param resolution: Set resolution.
	// @param drive: Pointer to structure.
	// @return: Number of steps.
	//
	int steps = 0;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	617b      	str	r3, [r7, #20]
	float r_s,x_s;
	r_s = 360/((float)(drive->STEPS));
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	ee07 3a90 	vmov	s15, r3
 8000bd8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000bdc:	eddf 6a17 	vldr	s13, [pc, #92]	; 8000c3c <Calculate_Steps_A4988+0x7c>
 8000be0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000be4:	edc7 7a04 	vstr	s15, [r7, #16]
	x_s = r_s/((float)(drive->RESOLUTION));
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bec:	ee07 3a90 	vmov	s15, r3
 8000bf0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000bf4:	edd7 6a04 	vldr	s13, [r7, #16]
 8000bf8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000bfc:	edc7 7a03 	vstr	s15, [r7, #12]
	steps = (int)round(angle/x_s);
 8000c00:	ed97 7a00 	vldr	s14, [r7]
 8000c04:	edd7 7a03 	vldr	s15, [r7, #12]
 8000c08:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000c0c:	ee16 0a90 	vmov	r0, s13
 8000c10:	f7ff fc5e 	bl	80004d0 <__aeabi_f2d>
 8000c14:	4602      	mov	r2, r0
 8000c16:	460b      	mov	r3, r1
 8000c18:	ec43 2b10 	vmov	d0, r2, r3
 8000c1c:	f005 fa70 	bl	8006100 <round>
 8000c20:	ec53 2b10 	vmov	r2, r3, d0
 8000c24:	4610      	mov	r0, r2
 8000c26:	4619      	mov	r1, r3
 8000c28:	f7ff fcaa 	bl	8000580 <__aeabi_d2iz>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	617b      	str	r3, [r7, #20]
	return steps;
 8000c30:	697b      	ldr	r3, [r7, #20]
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3718      	adds	r7, #24
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	43b40000 	.word	0x43b40000

08000c40 <Rotate_A4988>:
void Rotate_A4988(A4988_Drive* drive, float angle){
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	ed87 0a00 	vstr	s0, [r7]
	//	Rotates the motor by a given angle.
	//	@param angle: Desired angle to rotate.
	//	@param drive: Pointer to structure.
	//	@return: none
	//
	int steps = Calculate_Steps_A4988(drive, angle);
 8000c4c:	ed97 0a00 	vldr	s0, [r7]
 8000c50:	6878      	ldr	r0, [r7, #4]
 8000c52:	f7ff ffb5 	bl	8000bc0 <Calculate_Steps_A4988>
 8000c56:	60f8      	str	r0, [r7, #12]
	__HAL_TIM_SET_AUTORELOAD(drive->TIM_COUNTER_SLAVE,steps);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	68fa      	ldr	r2, [r7, #12]
 8000c60:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c66:	68fa      	ldr	r2, [r7, #12]
 8000c68:	60da      	str	r2, [r3, #12]
	Sleep_A4988(drive, ENABLE_DRIVE);
 8000c6a:	2101      	movs	r1, #1
 8000c6c:	6878      	ldr	r0, [r7, #4]
 8000c6e:	f7ff ff79 	bl	8000b64 <Sleep_A4988>
	HAL_TIM_PWM_Start(drive->TIM_STEP, drive->TIM_STEP_CHANNEL);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4610      	mov	r0, r2
 8000c7e:	f003 fbe7 	bl	8004450 <HAL_TIM_PWM_Start>
}
 8000c82:	bf00      	nop
 8000c84:	3710      	adds	r7, #16
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
	...

08000c8c <Rotate_mm_A4988>:
void Rotate_mm_A4988(A4988_Drive* drive, float distance){
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	ed87 0a00 	vstr	s0, [r7]
	//	Rotates the motor by a given distance in mm.
	//	@param distance: Distance in mm.
	//	@param drive: Pointer to structure.
	//	@return: none
	//
	float step_res_ = 360/(float)(drive->STEPS);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	ee07 3a90 	vmov	s15, r3
 8000ca0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ca4:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8000cdc <Rotate_mm_A4988+0x50>
 8000ca8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000cac:	edc7 7a03 	vstr	s15, [r7, #12]
	float angle = (distance*step_res_)/((float)(drive->STEP_mm_RESOLUTION));
 8000cb0:	ed97 7a00 	vldr	s14, [r7]
 8000cb4:	edd7 7a03 	vldr	s15, [r7, #12]
 8000cb8:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	ed93 7a04 	vldr	s14, [r3, #16]
 8000cc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000cc6:	edc7 7a02 	vstr	s15, [r7, #8]
	Rotate_A4988(drive, angle);
 8000cca:	ed97 0a02 	vldr	s0, [r7, #8]
 8000cce:	6878      	ldr	r0, [r7, #4]
 8000cd0:	f7ff ffb6 	bl	8000c40 <Rotate_A4988>
}
 8000cd4:	bf00      	nop
 8000cd6:	3710      	adds	r7, #16
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	43b40000 	.word	0x43b40000

08000ce0 <Init_A4988>:
		__HAL_TIM_SET_COMPARE(drive->TIM_STEP, drive->TIM_STEP_CHANNEL, pulse_val);
	}else{
		__HAL_TIM_SET_COMPARE(drive->TIM_STEP, drive->TIM_STEP_CHANNEL,0);
	}
}
void Init_A4988(A4988_Drive* drive){
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
	//
	//	Initialize the drive.
	//	@param drive: Pointer to structure.
	//	@return: none
	//
	HAL_TIM_Base_Start_IT(drive->TIM_COUNTER_SLAVE);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000cec:	4618      	mov	r0, r3
 8000cee:	f003 faa7 	bl	8004240 <HAL_TIM_Base_Start_IT>
	Set_Resolution_A4988(drive, HALF_STEP);
 8000cf2:	2102      	movs	r1, #2
 8000cf4:	6878      	ldr	r0, [r7, #4]
 8000cf6:	f7ff fded 	bl	80008d4 <Set_Resolution_A4988>
	Set_Direction_A4988(drive, RIGHT_DIR);
 8000cfa:	2101      	movs	r1, #1
 8000cfc:	6878      	ldr	r0, [r7, #4]
 8000cfe:	f7ff fead 	bl	8000a5c <Set_Direction_A4988>
	Enable_A4988(drive, ENABLE_DRIVE);
 8000d02:	2101      	movs	r1, #1
 8000d04:	6878      	ldr	r0, [r7, #4]
 8000d06:	f7ff fed4 	bl	8000ab2 <Enable_A4988>
	Reset_A4988(drive, ENABLE_DRIVE);
 8000d0a:	2101      	movs	r1, #1
 8000d0c:	6878      	ldr	r0, [r7, #4]
 8000d0e:	f7ff fefb 	bl	8000b08 <Reset_A4988>
	Sleep_A4988(drive, DISABLE_DRIVE);
 8000d12:	2102      	movs	r1, #2
 8000d14:	6878      	ldr	r0, [r7, #4]
 8000d16:	f7ff ff25 	bl	8000b64 <Sleep_A4988>
}
 8000d1a:	bf00      	nop
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <writeReg>:
 */
#include "VL6180X.h"
//
// Write to register functions
//
void writeReg(VL6180X_* VL6180x,uint16_t reg, uint8_t value){
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b086      	sub	sp, #24
 8000d26:	af04      	add	r7, sp, #16
 8000d28:	6078      	str	r0, [r7, #4]
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	807b      	strh	r3, [r7, #2]
 8000d2e:	4613      	mov	r3, r2
 8000d30:	707b      	strb	r3, [r7, #1]
	VL6180x->last_status = HAL_I2C_Mem_Write(VL6180x->i2cHandle, (VL6180x->address)<<1, reg, 2, &value, 1, 1000);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	6818      	ldr	r0, [r3, #0]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	791b      	ldrb	r3, [r3, #4]
 8000d3a:	b29b      	uxth	r3, r3
 8000d3c:	005b      	lsls	r3, r3, #1
 8000d3e:	b299      	uxth	r1, r3
 8000d40:	887a      	ldrh	r2, [r7, #2]
 8000d42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d46:	9302      	str	r3, [sp, #8]
 8000d48:	2301      	movs	r3, #1
 8000d4a:	9301      	str	r3, [sp, #4]
 8000d4c:	1c7b      	adds	r3, r7, #1
 8000d4e:	9300      	str	r3, [sp, #0]
 8000d50:	2302      	movs	r3, #2
 8000d52:	f001 fbe7 	bl	8002524 <HAL_I2C_Mem_Write>
 8000d56:	4603      	mov	r3, r0
 8000d58:	461a      	mov	r2, r3
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	729a      	strb	r2, [r3, #10]
}
 8000d5e:	bf00      	nop
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <writeReg16Bit>:

void writeReg16Bit(VL6180X_* VL6180x, uint16_t reg, uint16_t value){
 8000d66:	b580      	push	{r7, lr}
 8000d68:	b088      	sub	sp, #32
 8000d6a:	af04      	add	r7, sp, #16
 8000d6c:	6078      	str	r0, [r7, #4]
 8000d6e:	460b      	mov	r3, r1
 8000d70:	807b      	strh	r3, [r7, #2]
 8000d72:	4613      	mov	r3, r2
 8000d74:	803b      	strh	r3, [r7, #0]
	uint8_t partA = (uint8_t)((value & 0xFF00) >> 8);
 8000d76:	883b      	ldrh	r3, [r7, #0]
 8000d78:	0a1b      	lsrs	r3, r3, #8
 8000d7a:	b29b      	uxth	r3, r3
 8000d7c:	73fb      	strb	r3, [r7, #15]
	uint8_t partB = (uint8_t)(value & 0x00FF);
 8000d7e:	883b      	ldrh	r3, [r7, #0]
 8000d80:	73bb      	strb	r3, [r7, #14]
	uint8_t m[]= {partA,partB};
 8000d82:	7bfb      	ldrb	r3, [r7, #15]
 8000d84:	733b      	strb	r3, [r7, #12]
 8000d86:	7bbb      	ldrb	r3, [r7, #14]
 8000d88:	737b      	strb	r3, [r7, #13]
	VL6180x->last_status = HAL_I2C_Mem_Write(VL6180x->i2cHandle, (VL6180x->address)<<1, reg, 2, m, 2, 1000);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6818      	ldr	r0, [r3, #0]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	791b      	ldrb	r3, [r3, #4]
 8000d92:	b29b      	uxth	r3, r3
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	b299      	uxth	r1, r3
 8000d98:	887a      	ldrh	r2, [r7, #2]
 8000d9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d9e:	9302      	str	r3, [sp, #8]
 8000da0:	2302      	movs	r3, #2
 8000da2:	9301      	str	r3, [sp, #4]
 8000da4:	f107 030c 	add.w	r3, r7, #12
 8000da8:	9300      	str	r3, [sp, #0]
 8000daa:	2302      	movs	r3, #2
 8000dac:	f001 fbba 	bl	8002524 <HAL_I2C_Mem_Write>
 8000db0:	4603      	mov	r3, r0
 8000db2:	461a      	mov	r2, r3
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	729a      	strb	r2, [r3, #10]
}
 8000db8:	bf00      	nop
 8000dba:	3710      	adds	r7, #16
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <readReg>:
//
// Read from register functions
//
uint8_t readReg(VL6180X_* VL6180x, uint16_t reg){
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b088      	sub	sp, #32
 8000dc4:	af04      	add	r7, sp, #16
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	460b      	mov	r3, r1
 8000dca:	807b      	strh	r3, [r7, #2]
	uint8_t value;
	VL6180x->last_status = HAL_I2C_Mem_Read(VL6180x->i2cHandle, (VL6180x->address)<<1, reg, 2, &value, 1, 1000);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6818      	ldr	r0, [r3, #0]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	791b      	ldrb	r3, [r3, #4]
 8000dd4:	b29b      	uxth	r3, r3
 8000dd6:	005b      	lsls	r3, r3, #1
 8000dd8:	b299      	uxth	r1, r3
 8000dda:	887a      	ldrh	r2, [r7, #2]
 8000ddc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000de0:	9302      	str	r3, [sp, #8]
 8000de2:	2301      	movs	r3, #1
 8000de4:	9301      	str	r3, [sp, #4]
 8000de6:	f107 030f 	add.w	r3, r7, #15
 8000dea:	9300      	str	r3, [sp, #0]
 8000dec:	2302      	movs	r3, #2
 8000dee:	f001 fcad 	bl	800274c <HAL_I2C_Mem_Read>
 8000df2:	4603      	mov	r3, r0
 8000df4:	461a      	mov	r2, r3
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	729a      	strb	r2, [r3, #10]
	return value;
 8000dfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3710      	adds	r7, #16
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <readReg16Bit>:

uint16_t readReg16Bit(VL6180X_* VL6180x, uint16_t reg){
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b088      	sub	sp, #32
 8000e08:	af04      	add	r7, sp, #16
 8000e0a:	6078      	str	r0, [r7, #4]
 8000e0c:	460b      	mov	r3, r1
 8000e0e:	807b      	strh	r3, [r7, #2]
	uint8_t value[2]={0};
 8000e10:	2300      	movs	r3, #0
 8000e12:	81bb      	strh	r3, [r7, #12]
	VL6180x->last_status = HAL_I2C_Mem_Read(VL6180x->i2cHandle, (VL6180x->address)<<1, reg, 2, value, 2, 1000);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6818      	ldr	r0, [r3, #0]
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	791b      	ldrb	r3, [r3, #4]
 8000e1c:	b29b      	uxth	r3, r3
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	b299      	uxth	r1, r3
 8000e22:	887a      	ldrh	r2, [r7, #2]
 8000e24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e28:	9302      	str	r3, [sp, #8]
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	9301      	str	r3, [sp, #4]
 8000e2e:	f107 030c 	add.w	r3, r7, #12
 8000e32:	9300      	str	r3, [sp, #0]
 8000e34:	2302      	movs	r3, #2
 8000e36:	f001 fc89 	bl	800274c <HAL_I2C_Mem_Read>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	729a      	strb	r2, [r3, #10]
	uint16_t value_ = ((uint16_t)value[1]<<8)|value[0];
 8000e42:	7b7b      	ldrb	r3, [r7, #13]
 8000e44:	021b      	lsls	r3, r3, #8
 8000e46:	b21a      	sxth	r2, r3
 8000e48:	7b3b      	ldrb	r3, [r7, #12]
 8000e4a:	b21b      	sxth	r3, r3
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	b21b      	sxth	r3, r3
 8000e50:	81fb      	strh	r3, [r7, #14]
	return value_;
 8000e52:	89fb      	ldrh	r3, [r7, #14]
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3710      	adds	r7, #16
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}

08000e5c <VL6180X_Init>:

void VL6180X_Init(VL6180X_* VL6180x, I2C_HandleTypeDef* i2cHandle){
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	6039      	str	r1, [r7, #0]
// Sensor initialization.
// @param VL6180x: Pointer to structure.
// @param i2cHandle: I2C handle.
// @return: none
//
	VL6180x->i2cHandle = i2cHandle;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	683a      	ldr	r2, [r7, #0]
 8000e6a:	601a      	str	r2, [r3, #0]
	VL6180x->address = ADDRESS_DEFAULT_VL6180X;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2229      	movs	r2, #41	; 0x29
 8000e70:	711a      	strb	r2, [r3, #4]
	VL6180x->scaling = 0;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2200      	movs	r2, #0
 8000e76:	715a      	strb	r2, [r3, #5]
	VL6180x->ptp_offset = 0;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	719a      	strb	r2, [r3, #6]
	VL6180x->io_timeout = 500;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000e84:	811a      	strh	r2, [r3, #8]
	VL6180x->did_timeout = FALSE;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2200      	movs	r2, #0
 8000e8a:	72da      	strb	r2, [r3, #11]
	VL6180x->ptp_offset = readReg(VL6180x, SYSRANGE__PART_TO_PART_RANGE_OFFSET);
 8000e8c:	2124      	movs	r1, #36	; 0x24
 8000e8e:	6878      	ldr	r0, [r7, #4]
 8000e90:	f7ff ff96 	bl	8000dc0 <readReg>
 8000e94:	4603      	mov	r3, r0
 8000e96:	461a      	mov	r2, r3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	719a      	strb	r2, [r3, #6]
	if(readReg(VL6180x, SYSTEM__FRESH_OUT_OF_RESET) == 1){
 8000e9c:	2116      	movs	r1, #22
 8000e9e:	6878      	ldr	r0, [r7, #4]
 8000ea0:	f7ff ff8e 	bl	8000dc0 <readReg>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	f040 80a9 	bne.w	8000ffe <VL6180X_Init+0x1a2>
		VL6180x->scaling = 1;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2201      	movs	r2, #1
 8000eb0:	715a      	strb	r2, [r3, #5]
		writeReg(VL6180x,0x207, 0x01);
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	f240 2107 	movw	r1, #519	; 0x207
 8000eb8:	6878      	ldr	r0, [r7, #4]
 8000eba:	f7ff ff32 	bl	8000d22 <writeReg>
		    writeReg(VL6180x,0x208, 0x01);
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	f44f 7102 	mov.w	r1, #520	; 0x208
 8000ec4:	6878      	ldr	r0, [r7, #4]
 8000ec6:	f7ff ff2c 	bl	8000d22 <writeReg>
		    writeReg(VL6180x,0x096, 0x00);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	2196      	movs	r1, #150	; 0x96
 8000ece:	6878      	ldr	r0, [r7, #4]
 8000ed0:	f7ff ff27 	bl	8000d22 <writeReg>
		    writeReg(VL6180x,0x097, 0xFD); // RANGE_SCALER = 253
 8000ed4:	22fd      	movs	r2, #253	; 0xfd
 8000ed6:	2197      	movs	r1, #151	; 0x97
 8000ed8:	6878      	ldr	r0, [r7, #4]
 8000eda:	f7ff ff22 	bl	8000d22 <writeReg>
		    writeReg(VL6180x,0x0E3, 0x01);
 8000ede:	2201      	movs	r2, #1
 8000ee0:	21e3      	movs	r1, #227	; 0xe3
 8000ee2:	6878      	ldr	r0, [r7, #4]
 8000ee4:	f7ff ff1d 	bl	8000d22 <writeReg>
		    writeReg(VL6180x,0x0E4, 0x03);
 8000ee8:	2203      	movs	r2, #3
 8000eea:	21e4      	movs	r1, #228	; 0xe4
 8000eec:	6878      	ldr	r0, [r7, #4]
 8000eee:	f7ff ff18 	bl	8000d22 <writeReg>
		    writeReg(VL6180x,0x0E5, 0x02);
 8000ef2:	2202      	movs	r2, #2
 8000ef4:	21e5      	movs	r1, #229	; 0xe5
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	f7ff ff13 	bl	8000d22 <writeReg>
		    writeReg(VL6180x,0x0E6, 0x01);
 8000efc:	2201      	movs	r2, #1
 8000efe:	21e6      	movs	r1, #230	; 0xe6
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f7ff ff0e 	bl	8000d22 <writeReg>
		    writeReg(VL6180x,0x0E7, 0x03);
 8000f06:	2203      	movs	r2, #3
 8000f08:	21e7      	movs	r1, #231	; 0xe7
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	f7ff ff09 	bl	8000d22 <writeReg>
		    writeReg(VL6180x,0x0F5, 0x02);
 8000f10:	2202      	movs	r2, #2
 8000f12:	21f5      	movs	r1, #245	; 0xf5
 8000f14:	6878      	ldr	r0, [r7, #4]
 8000f16:	f7ff ff04 	bl	8000d22 <writeReg>
		    writeReg(VL6180x,0x0D9, 0x05);
 8000f1a:	2205      	movs	r2, #5
 8000f1c:	21d9      	movs	r1, #217	; 0xd9
 8000f1e:	6878      	ldr	r0, [r7, #4]
 8000f20:	f7ff feff 	bl	8000d22 <writeReg>
		    writeReg(VL6180x,0x0DB, 0xCE);
 8000f24:	22ce      	movs	r2, #206	; 0xce
 8000f26:	21db      	movs	r1, #219	; 0xdb
 8000f28:	6878      	ldr	r0, [r7, #4]
 8000f2a:	f7ff fefa 	bl	8000d22 <writeReg>
		    writeReg(VL6180x,0x0DC, 0x03);
 8000f2e:	2203      	movs	r2, #3
 8000f30:	21dc      	movs	r1, #220	; 0xdc
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	f7ff fef5 	bl	8000d22 <writeReg>
		    writeReg(VL6180x,0x0DD, 0xF8);
 8000f38:	22f8      	movs	r2, #248	; 0xf8
 8000f3a:	21dd      	movs	r1, #221	; 0xdd
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	f7ff fef0 	bl	8000d22 <writeReg>
		    writeReg(VL6180x,0x09F, 0x00);
 8000f42:	2200      	movs	r2, #0
 8000f44:	219f      	movs	r1, #159	; 0x9f
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f7ff feeb 	bl	8000d22 <writeReg>
		    writeReg(VL6180x,0x0A3, 0x3C);
 8000f4c:	223c      	movs	r2, #60	; 0x3c
 8000f4e:	21a3      	movs	r1, #163	; 0xa3
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f7ff fee6 	bl	8000d22 <writeReg>
		    writeReg(VL6180x,0x0B7, 0x00);
 8000f56:	2200      	movs	r2, #0
 8000f58:	21b7      	movs	r1, #183	; 0xb7
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f7ff fee1 	bl	8000d22 <writeReg>
		    writeReg(VL6180x,0x0BB, 0x3C);
 8000f60:	223c      	movs	r2, #60	; 0x3c
 8000f62:	21bb      	movs	r1, #187	; 0xbb
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	f7ff fedc 	bl	8000d22 <writeReg>
		    writeReg(VL6180x,0x0B2, 0x09);
 8000f6a:	2209      	movs	r2, #9
 8000f6c:	21b2      	movs	r1, #178	; 0xb2
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f7ff fed7 	bl	8000d22 <writeReg>
		    writeReg(VL6180x,0x0CA, 0x09);
 8000f74:	2209      	movs	r2, #9
 8000f76:	21ca      	movs	r1, #202	; 0xca
 8000f78:	6878      	ldr	r0, [r7, #4]
 8000f7a:	f7ff fed2 	bl	8000d22 <writeReg>
		    writeReg(VL6180x,0x198, 0x01);
 8000f7e:	2201      	movs	r2, #1
 8000f80:	f44f 71cc 	mov.w	r1, #408	; 0x198
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	f7ff fecc 	bl	8000d22 <writeReg>
		    writeReg(VL6180x,0x1B0, 0x17);
 8000f8a:	2217      	movs	r2, #23
 8000f8c:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f7ff fec6 	bl	8000d22 <writeReg>
		    writeReg(VL6180x,0x1AD, 0x00);
 8000f96:	2200      	movs	r2, #0
 8000f98:	f240 11ad 	movw	r1, #429	; 0x1ad
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f7ff fec0 	bl	8000d22 <writeReg>
		    writeReg(VL6180x,0x0FF, 0x05);
 8000fa2:	2205      	movs	r2, #5
 8000fa4:	21ff      	movs	r1, #255	; 0xff
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f7ff febb 	bl	8000d22 <writeReg>
		    writeReg(VL6180x,0x100, 0x05);
 8000fac:	2205      	movs	r2, #5
 8000fae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f7ff feb5 	bl	8000d22 <writeReg>
		    writeReg(VL6180x,0x199, 0x05);
 8000fb8:	2205      	movs	r2, #5
 8000fba:	f240 1199 	movw	r1, #409	; 0x199
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f7ff feaf 	bl	8000d22 <writeReg>
		    writeReg(VL6180x,0x1A6, 0x1B);
 8000fc4:	221b      	movs	r2, #27
 8000fc6:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f7ff fea9 	bl	8000d22 <writeReg>
		    writeReg(VL6180x,0x1AC, 0x3E);
 8000fd0:	223e      	movs	r2, #62	; 0x3e
 8000fd2:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8000fd6:	6878      	ldr	r0, [r7, #4]
 8000fd8:	f7ff fea3 	bl	8000d22 <writeReg>
		    writeReg(VL6180x,0x1A7, 0x1F);
 8000fdc:	221f      	movs	r2, #31
 8000fde:	f240 11a7 	movw	r1, #423	; 0x1a7
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f7ff fe9d 	bl	8000d22 <writeReg>
		    writeReg(VL6180x,0x030, 0x00);
 8000fe8:	2200      	movs	r2, #0
 8000fea:	2130      	movs	r1, #48	; 0x30
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	f7ff fe98 	bl	8000d22 <writeReg>

		    writeReg(VL6180x,SYSTEM__FRESH_OUT_OF_RESET, 0);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	2116      	movs	r1, #22
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f7ff fe93 	bl	8000d22 <writeReg>
		}else{
			VL6180x->scaling = 1;
		}
		VL6180x->ptp_offset *= VL6180x->scaling;
	}
}
 8000ffc:	e021      	b.n	8001042 <VL6180X_Init+0x1e6>
		uint16_t s = readReg16Bit(VL6180x, RANGE_SCALER);
 8000ffe:	2196      	movs	r1, #150	; 0x96
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f7ff feff 	bl	8000e04 <readReg16Bit>
 8001006:	4603      	mov	r3, r0
 8001008:	81fb      	strh	r3, [r7, #14]
		if(s == ScalerValues[3]){
 800100a:	2254      	movs	r2, #84	; 0x54
 800100c:	89fb      	ldrh	r3, [r7, #14]
 800100e:	4293      	cmp	r3, r2
 8001010:	d103      	bne.n	800101a <VL6180X_Init+0x1be>
			VL6180x->scaling = 3;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2203      	movs	r2, #3
 8001016:	715a      	strb	r2, [r3, #5]
 8001018:	e00a      	b.n	8001030 <VL6180X_Init+0x1d4>
		}else if (s == ScalerValues[2]){
 800101a:	227f      	movs	r2, #127	; 0x7f
 800101c:	89fb      	ldrh	r3, [r7, #14]
 800101e:	4293      	cmp	r3, r2
 8001020:	d103      	bne.n	800102a <VL6180X_Init+0x1ce>
			VL6180x->scaling = 2;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2202      	movs	r2, #2
 8001026:	715a      	strb	r2, [r3, #5]
 8001028:	e002      	b.n	8001030 <VL6180X_Init+0x1d4>
			VL6180x->scaling = 1;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2201      	movs	r2, #1
 800102e:	715a      	strb	r2, [r3, #5]
		VL6180x->ptp_offset *= VL6180x->scaling;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	799a      	ldrb	r2, [r3, #6]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	795b      	ldrb	r3, [r3, #5]
 8001038:	fb12 f303 	smulbb	r3, r2, r3
 800103c:	b2da      	uxtb	r2, r3
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	719a      	strb	r2, [r3, #6]
}
 8001042:	bf00      	nop
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
	...

0800104c <setScaling_VL6180X>:

uint8_t getAddress_VL6180X(VL6180X_* VL6180x){
	return VL6180x->address;
}

void setScaling_VL6180X(VL6180X_* VL6180x, uint8_t new_scaling){
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	460b      	mov	r3, r1
 8001056:	70fb      	strb	r3, [r7, #3]
	uint8_t const DefaultCrosstalkValidHeight = 20;
 8001058:	2314      	movs	r3, #20
 800105a:	73fb      	strb	r3, [r7, #15]
	if (new_scaling < 1 || new_scaling > 3) { return; }
 800105c:	78fb      	ldrb	r3, [r7, #3]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d043      	beq.n	80010ea <setScaling_VL6180X+0x9e>
 8001062:	78fb      	ldrb	r3, [r7, #3]
 8001064:	2b03      	cmp	r3, #3
 8001066:	d840      	bhi.n	80010ea <setScaling_VL6180X+0x9e>
	VL6180x->scaling = new_scaling;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	78fa      	ldrb	r2, [r7, #3]
 800106c:	715a      	strb	r2, [r3, #5]
	writeReg16Bit(VL6180x, RANGE_SCALER, ScalerValues[VL6180x->scaling]);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	795b      	ldrb	r3, [r3, #5]
 8001072:	461a      	mov	r2, r3
 8001074:	4b1f      	ldr	r3, [pc, #124]	; (80010f4 <setScaling_VL6180X+0xa8>)
 8001076:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800107a:	461a      	mov	r2, r3
 800107c:	2196      	movs	r1, #150	; 0x96
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f7ff fe71 	bl	8000d66 <writeReg16Bit>
	writeReg(VL6180x, SYSRANGE__PART_TO_PART_RANGE_OFFSET, VL6180x->ptp_offset/VL6180x->scaling);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	799a      	ldrb	r2, [r3, #6]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	795b      	ldrb	r3, [r3, #5]
 800108c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001090:	b2db      	uxtb	r3, r3
 8001092:	461a      	mov	r2, r3
 8001094:	2124      	movs	r1, #36	; 0x24
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f7ff fe43 	bl	8000d22 <writeReg>
	writeReg(VL6180x, SYSRANGE__CROSSTALK_VALID_HEIGHT, DefaultCrosstalkValidHeight/VL6180x->scaling);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	795b      	ldrb	r3, [r3, #5]
 80010a0:	7bfa      	ldrb	r2, [r7, #15]
 80010a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	461a      	mov	r2, r3
 80010aa:	2121      	movs	r1, #33	; 0x21
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	f7ff fe38 	bl	8000d22 <writeReg>
	uint8_t rce = readReg(VL6180x,SYSRANGE__RANGE_CHECK_ENABLES);
 80010b2:	212d      	movs	r1, #45	; 0x2d
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f7ff fe83 	bl	8000dc0 <readReg>
 80010ba:	4603      	mov	r3, r0
 80010bc:	73bb      	strb	r3, [r7, #14]
	writeReg(VL6180x,SYSRANGE__RANGE_CHECK_ENABLES, (rce & 0xFE) | (VL6180x->scaling == 1));
 80010be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80010c2:	f023 0301 	bic.w	r3, r3, #1
 80010c6:	b25a      	sxtb	r2, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	795b      	ldrb	r3, [r3, #5]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	bf0c      	ite	eq
 80010d0:	2301      	moveq	r3, #1
 80010d2:	2300      	movne	r3, #0
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	b25b      	sxtb	r3, r3
 80010d8:	4313      	orrs	r3, r2
 80010da:	b25b      	sxtb	r3, r3
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	461a      	mov	r2, r3
 80010e0:	212d      	movs	r1, #45	; 0x2d
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f7ff fe1d 	bl	8000d22 <writeReg>
 80010e8:	e000      	b.n	80010ec <setScaling_VL6180X+0xa0>
	if (new_scaling < 1 || new_scaling > 3) { return; }
 80010ea:	bf00      	nop
}
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	080061a4 	.word	0x080061a4

080010f8 <readRangeContinuous_VL6180X>:
  writeReg(VL6180x,SYSALS__START, 0x01);
  writeReg(VL6180x,INTERLEAVED_MODE__ENABLE, 0);
}

uint8_t readRangeContinuous_VL6180X(VL6180X_* VL6180x)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  uint16_t millis_start = HAL_GetTick();
 8001100:	f000 fe84 	bl	8001e0c <HAL_GetTick>
 8001104:	4603      	mov	r3, r0
 8001106:	81fb      	strh	r3, [r7, #14]
  while ((readReg(VL6180x,RESULT__INTERRUPT_STATUS_GPIO) & 0x4) == 0)
 8001108:	e010      	b.n	800112c <readRangeContinuous_VL6180X+0x34>
  {
    if (VL6180x->io_timeout > 0 && ((uint16_t)HAL_GetTick() - millis_start) > VL6180x->io_timeout)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	891b      	ldrh	r3, [r3, #8]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d00c      	beq.n	800112c <readRangeContinuous_VL6180X+0x34>
 8001112:	f000 fe7b 	bl	8001e0c <HAL_GetTick>
 8001116:	4603      	mov	r3, r0
 8001118:	b29b      	uxth	r3, r3
 800111a:	461a      	mov	r2, r3
 800111c:	89fb      	ldrh	r3, [r7, #14]
 800111e:	1ad3      	subs	r3, r2, r3
 8001120:	687a      	ldr	r2, [r7, #4]
 8001122:	8912      	ldrh	r2, [r2, #8]
 8001124:	4293      	cmp	r3, r2
 8001126:	dd01      	ble.n	800112c <readRangeContinuous_VL6180X+0x34>
    {
      return 255;
 8001128:	23ff      	movs	r3, #255	; 0xff
 800112a:	e014      	b.n	8001156 <readRangeContinuous_VL6180X+0x5e>
  while ((readReg(VL6180x,RESULT__INTERRUPT_STATUS_GPIO) & 0x4) == 0)
 800112c:	214f      	movs	r1, #79	; 0x4f
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f7ff fe46 	bl	8000dc0 <readReg>
 8001134:	4603      	mov	r3, r0
 8001136:	f003 0304 	and.w	r3, r3, #4
 800113a:	2b00      	cmp	r3, #0
 800113c:	d0e5      	beq.n	800110a <readRangeContinuous_VL6180X+0x12>
    }
  }
  uint8_t range = readReg(VL6180x,RESULT__RANGE_VAL);
 800113e:	2162      	movs	r1, #98	; 0x62
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f7ff fe3d 	bl	8000dc0 <readReg>
 8001146:	4603      	mov	r3, r0
 8001148:	737b      	strb	r3, [r7, #13]
  writeReg(VL6180x,SYSTEM__INTERRUPT_CLEAR, 0x01);
 800114a:	2201      	movs	r2, #1
 800114c:	2115      	movs	r1, #21
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f7ff fde7 	bl	8000d22 <writeReg>
  return range;
 8001154:	7b7b      	ldrb	r3, [r7, #13]
}
 8001156:	4618      	mov	r0, r3
 8001158:	3710      	adds	r7, #16
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}

0800115e <readRangeSingle_VL6180X>:
  writeReg(VL6180x,SYSTEM__INTERRUPT_CLEAR, 0x02);
  return ambient;
}

uint8_t readRangeSingle_VL6180X(VL6180X_* VL6180x)
{
 800115e:	b580      	push	{r7, lr}
 8001160:	b082      	sub	sp, #8
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
  writeReg(VL6180x,SYSRANGE__START, 0x01);
 8001166:	2201      	movs	r2, #1
 8001168:	2118      	movs	r1, #24
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f7ff fdd9 	bl	8000d22 <writeReg>
  return readRangeContinuous_VL6180X(VL6180x);
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f7ff ffc1 	bl	80010f8 <readRangeContinuous_VL6180X>
 8001176:	4603      	mov	r3, r0
}
 8001178:	4618      	mov	r0, r3
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <configureDefault_VL6180X>:
{
  writeReg(VL6180x,SYSALS__START, 0x01);
  return readAmbientContinuous_VL6180X(VL6180x);
}

void configureDefault_VL6180X(VL6180X_* VL6180x){
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
	  writeReg(VL6180x,READOUT__AVERAGING_SAMPLE_PERIOD, 0x30);
 8001188:	2230      	movs	r2, #48	; 0x30
 800118a:	f44f 7185 	mov.w	r1, #266	; 0x10a
 800118e:	6878      	ldr	r0, [r7, #4]
 8001190:	f7ff fdc7 	bl	8000d22 <writeReg>
	  writeReg(VL6180x,SYSALS__ANALOGUE_GAIN, 0x46);
 8001194:	2246      	movs	r2, #70	; 0x46
 8001196:	213f      	movs	r1, #63	; 0x3f
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f7ff fdc2 	bl	8000d22 <writeReg>
	  writeReg(VL6180x,SYSRANGE__VHV_REPEAT_RATE, 0xFF);
 800119e:	22ff      	movs	r2, #255	; 0xff
 80011a0:	2131      	movs	r1, #49	; 0x31
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f7ff fdbd 	bl	8000d22 <writeReg>
	  writeReg16Bit(VL6180x,SYSALS__INTEGRATION_PERIOD, 0x0063);
 80011a8:	2263      	movs	r2, #99	; 0x63
 80011aa:	2140      	movs	r1, #64	; 0x40
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f7ff fdda 	bl	8000d66 <writeReg16Bit>
	  writeReg(VL6180x,SYSRANGE__VHV_RECALIBRATE, 0x01);
 80011b2:	2201      	movs	r2, #1
 80011b4:	212e      	movs	r1, #46	; 0x2e
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f7ff fdb3 	bl	8000d22 <writeReg>
	  writeReg(VL6180x,SYSRANGE__INTERMEASUREMENT_PERIOD, 0x09);
 80011bc:	2209      	movs	r2, #9
 80011be:	211b      	movs	r1, #27
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f7ff fdae 	bl	8000d22 <writeReg>
	  writeReg(VL6180x,SYSALS__INTERMEASUREMENT_PERIOD, 0x31);
 80011c6:	2231      	movs	r2, #49	; 0x31
 80011c8:	213e      	movs	r1, #62	; 0x3e
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f7ff fda9 	bl	8000d22 <writeReg>
	  writeReg(VL6180x,SYSTEM__INTERRUPT_CONFIG_GPIO, 0x24);
 80011d0:	2224      	movs	r2, #36	; 0x24
 80011d2:	2114      	movs	r1, #20
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f7ff fda4 	bl	8000d22 <writeReg>
	  writeReg(VL6180x,SYSRANGE__MAX_CONVERGENCE_TIME, 0x31);
 80011da:	2231      	movs	r2, #49	; 0x31
 80011dc:	211c      	movs	r1, #28
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f7ff fd9f 	bl	8000d22 <writeReg>
	  writeReg(VL6180x,INTERLEAVED_MODE__ENABLE, 0);
 80011e4:	2200      	movs	r2, #0
 80011e6:	f240 21a3 	movw	r1, #675	; 0x2a3
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f7ff fd99 	bl	8000d22 <writeReg>
	  setScaling_VL6180X(VL6180x,1);
 80011f0:	2101      	movs	r1, #1
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f7ff ff2a 	bl	800104c <setScaling_VL6180X>
}
 80011f8:	bf00      	nop
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <readRangeSingleMillimeters_VL6180X>:

uint16_t readRangeContinuousMillimeters_VL6180X(VL6180X_* VL6180x){
	return (uint16_t)(VL6180x->scaling)*readRangeContinuous_VL6180X(VL6180x);
}

uint16_t readRangeSingleMillimeters_VL6180X(VL6180X_* VL6180x) {
 8001200:	b590      	push	{r4, r7, lr}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
	return (uint16_t)(VL6180x->scaling)* readRangeSingle_VL6180X(VL6180x);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	795b      	ldrb	r3, [r3, #5]
 800120c:	b29c      	uxth	r4, r3
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f7ff ffa5 	bl	800115e <readRangeSingle_VL6180X>
 8001214:	4603      	mov	r3, r0
 8001216:	b29b      	uxth	r3, r3
 8001218:	fb14 f303 	smulbb	r3, r4, r3
 800121c:	b29b      	uxth	r3, r3
}
 800121e:	4618      	mov	r0, r3
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	bd90      	pop	{r4, r7, pc}
	...

08001228 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b08e      	sub	sp, #56	; 0x38
 800122c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	605a      	str	r2, [r3, #4]
 8001238:	609a      	str	r2, [r3, #8]
 800123a:	60da      	str	r2, [r3, #12]
 800123c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800123e:	4b76      	ldr	r3, [pc, #472]	; (8001418 <MX_GPIO_Init+0x1f0>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	4a75      	ldr	r2, [pc, #468]	; (8001418 <MX_GPIO_Init+0x1f0>)
 8001244:	f043 0304 	orr.w	r3, r3, #4
 8001248:	6313      	str	r3, [r2, #48]	; 0x30
 800124a:	4b73      	ldr	r3, [pc, #460]	; (8001418 <MX_GPIO_Init+0x1f0>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	f003 0304 	and.w	r3, r3, #4
 8001252:	623b      	str	r3, [r7, #32]
 8001254:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001256:	4b70      	ldr	r3, [pc, #448]	; (8001418 <MX_GPIO_Init+0x1f0>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	4a6f      	ldr	r2, [pc, #444]	; (8001418 <MX_GPIO_Init+0x1f0>)
 800125c:	f043 0320 	orr.w	r3, r3, #32
 8001260:	6313      	str	r3, [r2, #48]	; 0x30
 8001262:	4b6d      	ldr	r3, [pc, #436]	; (8001418 <MX_GPIO_Init+0x1f0>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	f003 0320 	and.w	r3, r3, #32
 800126a:	61fb      	str	r3, [r7, #28]
 800126c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800126e:	4b6a      	ldr	r3, [pc, #424]	; (8001418 <MX_GPIO_Init+0x1f0>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	4a69      	ldr	r2, [pc, #420]	; (8001418 <MX_GPIO_Init+0x1f0>)
 8001274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001278:	6313      	str	r3, [r2, #48]	; 0x30
 800127a:	4b67      	ldr	r3, [pc, #412]	; (8001418 <MX_GPIO_Init+0x1f0>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001282:	61bb      	str	r3, [r7, #24]
 8001284:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001286:	4b64      	ldr	r3, [pc, #400]	; (8001418 <MX_GPIO_Init+0x1f0>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	4a63      	ldr	r2, [pc, #396]	; (8001418 <MX_GPIO_Init+0x1f0>)
 800128c:	f043 0301 	orr.w	r3, r3, #1
 8001290:	6313      	str	r3, [r2, #48]	; 0x30
 8001292:	4b61      	ldr	r3, [pc, #388]	; (8001418 <MX_GPIO_Init+0x1f0>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	f003 0301 	and.w	r3, r3, #1
 800129a:	617b      	str	r3, [r7, #20]
 800129c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800129e:	4b5e      	ldr	r3, [pc, #376]	; (8001418 <MX_GPIO_Init+0x1f0>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	4a5d      	ldr	r2, [pc, #372]	; (8001418 <MX_GPIO_Init+0x1f0>)
 80012a4:	f043 0302 	orr.w	r3, r3, #2
 80012a8:	6313      	str	r3, [r2, #48]	; 0x30
 80012aa:	4b5b      	ldr	r3, [pc, #364]	; (8001418 <MX_GPIO_Init+0x1f0>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	613b      	str	r3, [r7, #16]
 80012b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012b6:	4b58      	ldr	r3, [pc, #352]	; (8001418 <MX_GPIO_Init+0x1f0>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	4a57      	ldr	r2, [pc, #348]	; (8001418 <MX_GPIO_Init+0x1f0>)
 80012bc:	f043 0310 	orr.w	r3, r3, #16
 80012c0:	6313      	str	r3, [r2, #48]	; 0x30
 80012c2:	4b55      	ldr	r3, [pc, #340]	; (8001418 <MX_GPIO_Init+0x1f0>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	f003 0310 	and.w	r3, r3, #16
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ce:	4b52      	ldr	r3, [pc, #328]	; (8001418 <MX_GPIO_Init+0x1f0>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	4a51      	ldr	r2, [pc, #324]	; (8001418 <MX_GPIO_Init+0x1f0>)
 80012d4:	f043 0308 	orr.w	r3, r3, #8
 80012d8:	6313      	str	r3, [r2, #48]	; 0x30
 80012da:	4b4f      	ldr	r3, [pc, #316]	; (8001418 <MX_GPIO_Init+0x1f0>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	f003 0308 	and.w	r3, r3, #8
 80012e2:	60bb      	str	r3, [r7, #8]
 80012e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80012e6:	4b4c      	ldr	r3, [pc, #304]	; (8001418 <MX_GPIO_Init+0x1f0>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	4a4b      	ldr	r2, [pc, #300]	; (8001418 <MX_GPIO_Init+0x1f0>)
 80012ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012f0:	6313      	str	r3, [r2, #48]	; 0x30
 80012f2:	4b49      	ldr	r3, [pc, #292]	; (8001418 <MX_GPIO_Init+0x1f0>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012fa:	607b      	str	r3, [r7, #4]
 80012fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MS1_Pin|MS2_Pin|MS3_Pin, GPIO_PIN_RESET);
 80012fe:	2200      	movs	r2, #0
 8001300:	21e0      	movs	r1, #224	; 0xe0
 8001302:	4846      	ldr	r0, [pc, #280]	; (800141c <MX_GPIO_Init+0x1f4>)
 8001304:	f001 f84c 	bl	80023a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin|DIR_Pin
 8001308:	2200      	movs	r2, #0
 800130a:	f244 3181 	movw	r1, #17281	; 0x4381
 800130e:	4844      	ldr	r0, [pc, #272]	; (8001420 <MX_GPIO_Init+0x1f8>)
 8001310:	f001 f846 	bl	80023a0 <HAL_GPIO_WritePin>
                          |ENABLE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RESET_Pin|SLEEP_Pin, GPIO_PIN_RESET);
 8001314:	2200      	movs	r2, #0
 8001316:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800131a:	4842      	ldr	r0, [pc, #264]	; (8001424 <MX_GPIO_Init+0x1fc>)
 800131c:	f001 f840 	bl	80023a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001320:	2200      	movs	r2, #0
 8001322:	2140      	movs	r1, #64	; 0x40
 8001324:	4840      	ldr	r0, [pc, #256]	; (8001428 <MX_GPIO_Init+0x200>)
 8001326:	f001 f83b 	bl	80023a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800132a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800132e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001330:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001334:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	2300      	movs	r3, #0
 8001338:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800133a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800133e:	4619      	mov	r1, r3
 8001340:	483a      	ldr	r0, [pc, #232]	; (800142c <MX_GPIO_Init+0x204>)
 8001342:	f000 fe81 	bl	8002048 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = MS1_Pin|MS2_Pin|MS3_Pin;
 8001346:	23e0      	movs	r3, #224	; 0xe0
 8001348:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800134a:	2301      	movs	r3, #1
 800134c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001352:	2300      	movs	r3, #0
 8001354:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001356:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800135a:	4619      	mov	r1, r3
 800135c:	482f      	ldr	r0, [pc, #188]	; (800141c <MX_GPIO_Init+0x1f4>)
 800135e:	f000 fe73 	bl	8002048 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin|DIR_Pin
 8001362:	f244 3381 	movw	r3, #17281	; 0x4381
 8001366:	627b      	str	r3, [r7, #36]	; 0x24
                          |ENABLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001368:	2301      	movs	r3, #1
 800136a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001370:	2300      	movs	r3, #0
 8001372:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001374:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001378:	4619      	mov	r1, r3
 800137a:	4829      	ldr	r0, [pc, #164]	; (8001420 <MX_GPIO_Init+0x1f8>)
 800137c:	f000 fe64 	bl	8002048 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = END_STOP_2_Pin|END_STOP_1_Pin;
 8001380:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001384:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001386:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800138a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138c:	2300      	movs	r3, #0
 800138e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001390:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001394:	4619      	mov	r1, r3
 8001396:	4826      	ldr	r0, [pc, #152]	; (8001430 <MX_GPIO_Init+0x208>)
 8001398:	f000 fe56 	bl	8002048 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RESET_Pin|SLEEP_Pin;
 800139c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80013a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a2:	2301      	movs	r3, #1
 80013a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	2300      	movs	r3, #0
 80013a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013aa:	2300      	movs	r3, #0
 80013ac:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013b2:	4619      	mov	r1, r3
 80013b4:	481b      	ldr	r0, [pc, #108]	; (8001424 <MX_GPIO_Init+0x1fc>)
 80013b6:	f000 fe47 	bl	8002048 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80013ba:	2340      	movs	r3, #64	; 0x40
 80013bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013be:	2301      	movs	r3, #1
 80013c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c2:	2300      	movs	r3, #0
 80013c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c6:	2300      	movs	r3, #0
 80013c8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80013ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ce:	4619      	mov	r1, r3
 80013d0:	4815      	ldr	r0, [pc, #84]	; (8001428 <MX_GPIO_Init+0x200>)
 80013d2:	f000 fe39 	bl	8002048 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80013d6:	2380      	movs	r3, #128	; 0x80
 80013d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013da:	2300      	movs	r3, #0
 80013dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013de:	2300      	movs	r3, #0
 80013e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80013e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013e6:	4619      	mov	r1, r3
 80013e8:	480f      	ldr	r0, [pc, #60]	; (8001428 <MX_GPIO_Init+0x200>)
 80013ea:	f000 fe2d 	bl	8002048 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80013ee:	2200      	movs	r2, #0
 80013f0:	2100      	movs	r1, #0
 80013f2:	2017      	movs	r0, #23
 80013f4:	f000 fdf1 	bl	8001fda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80013f8:	2017      	movs	r0, #23
 80013fa:	f000 fe0a 	bl	8002012 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80013fe:	2200      	movs	r2, #0
 8001400:	2100      	movs	r1, #0
 8001402:	2028      	movs	r0, #40	; 0x28
 8001404:	f000 fde9 	bl	8001fda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001408:	2028      	movs	r0, #40	; 0x28
 800140a:	f000 fe02 	bl	8002012 <HAL_NVIC_EnableIRQ>

}
 800140e:	bf00      	nop
 8001410:	3738      	adds	r7, #56	; 0x38
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40023800 	.word	0x40023800
 800141c:	40020000 	.word	0x40020000
 8001420:	40020400 	.word	0x40020400
 8001424:	40020c00 	.word	0x40020c00
 8001428:	40021800 	.word	0x40021800
 800142c:	40020800 	.word	0x40020800
 8001430:	40021000 	.word	0x40021000

08001434 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001438:	4b1b      	ldr	r3, [pc, #108]	; (80014a8 <MX_I2C2_Init+0x74>)
 800143a:	4a1c      	ldr	r2, [pc, #112]	; (80014ac <MX_I2C2_Init+0x78>)
 800143c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00301739;
 800143e:	4b1a      	ldr	r3, [pc, #104]	; (80014a8 <MX_I2C2_Init+0x74>)
 8001440:	4a1b      	ldr	r2, [pc, #108]	; (80014b0 <MX_I2C2_Init+0x7c>)
 8001442:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001444:	4b18      	ldr	r3, [pc, #96]	; (80014a8 <MX_I2C2_Init+0x74>)
 8001446:	2200      	movs	r2, #0
 8001448:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800144a:	4b17      	ldr	r3, [pc, #92]	; (80014a8 <MX_I2C2_Init+0x74>)
 800144c:	2201      	movs	r2, #1
 800144e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001450:	4b15      	ldr	r3, [pc, #84]	; (80014a8 <MX_I2C2_Init+0x74>)
 8001452:	2200      	movs	r2, #0
 8001454:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001456:	4b14      	ldr	r3, [pc, #80]	; (80014a8 <MX_I2C2_Init+0x74>)
 8001458:	2200      	movs	r2, #0
 800145a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800145c:	4b12      	ldr	r3, [pc, #72]	; (80014a8 <MX_I2C2_Init+0x74>)
 800145e:	2200      	movs	r2, #0
 8001460:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001462:	4b11      	ldr	r3, [pc, #68]	; (80014a8 <MX_I2C2_Init+0x74>)
 8001464:	2200      	movs	r2, #0
 8001466:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001468:	4b0f      	ldr	r3, [pc, #60]	; (80014a8 <MX_I2C2_Init+0x74>)
 800146a:	2200      	movs	r2, #0
 800146c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800146e:	480e      	ldr	r0, [pc, #56]	; (80014a8 <MX_I2C2_Init+0x74>)
 8001470:	f000 ffc8 	bl	8002404 <HAL_I2C_Init>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800147a:	f000 f98e 	bl	800179a <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800147e:	2100      	movs	r1, #0
 8001480:	4809      	ldr	r0, [pc, #36]	; (80014a8 <MX_I2C2_Init+0x74>)
 8001482:	f001 fd23 	bl	8002ecc <HAL_I2CEx_ConfigAnalogFilter>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800148c:	f000 f985 	bl	800179a <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001490:	2100      	movs	r1, #0
 8001492:	4805      	ldr	r0, [pc, #20]	; (80014a8 <MX_I2C2_Init+0x74>)
 8001494:	f001 fd65 	bl	8002f62 <HAL_I2CEx_ConfigDigitalFilter>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800149e:	f000 f97c 	bl	800179a <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80014a2:	bf00      	nop
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	20000084 	.word	0x20000084
 80014ac:	40005800 	.word	0x40005800
 80014b0:	00301739 	.word	0x00301739

080014b4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b0aa      	sub	sp, #168	; 0xa8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014bc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	60da      	str	r2, [r3, #12]
 80014ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014cc:	f107 0310 	add.w	r3, r7, #16
 80014d0:	2284      	movs	r2, #132	; 0x84
 80014d2:	2100      	movs	r1, #0
 80014d4:	4618      	mov	r0, r3
 80014d6:	f004 fe0b 	bl	80060f0 <memset>
  if(i2cHandle->Instance==I2C2)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a21      	ldr	r2, [pc, #132]	; (8001564 <HAL_I2C_MspInit+0xb0>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d13b      	bne.n	800155c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80014e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014e8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80014ea:	2300      	movs	r3, #0
 80014ec:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014ee:	f107 0310 	add.w	r3, r7, #16
 80014f2:	4618      	mov	r0, r3
 80014f4:	f002 fa5c 	bl	80039b0 <HAL_RCCEx_PeriphCLKConfig>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80014fe:	f000 f94c 	bl	800179a <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001502:	4b19      	ldr	r3, [pc, #100]	; (8001568 <HAL_I2C_MspInit+0xb4>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	4a18      	ldr	r2, [pc, #96]	; (8001568 <HAL_I2C_MspInit+0xb4>)
 8001508:	f043 0320 	orr.w	r3, r3, #32
 800150c:	6313      	str	r3, [r2, #48]	; 0x30
 800150e:	4b16      	ldr	r3, [pc, #88]	; (8001568 <HAL_I2C_MspInit+0xb4>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	f003 0320 	and.w	r3, r3, #32
 8001516:	60fb      	str	r3, [r7, #12]
 8001518:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800151a:	2303      	movs	r3, #3
 800151c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001520:	2312      	movs	r3, #18
 8001522:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001526:	2300      	movs	r3, #0
 8001528:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800152c:	2303      	movs	r3, #3
 800152e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001532:	2304      	movs	r3, #4
 8001534:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001538:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800153c:	4619      	mov	r1, r3
 800153e:	480b      	ldr	r0, [pc, #44]	; (800156c <HAL_I2C_MspInit+0xb8>)
 8001540:	f000 fd82 	bl	8002048 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001544:	4b08      	ldr	r3, [pc, #32]	; (8001568 <HAL_I2C_MspInit+0xb4>)
 8001546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001548:	4a07      	ldr	r2, [pc, #28]	; (8001568 <HAL_I2C_MspInit+0xb4>)
 800154a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800154e:	6413      	str	r3, [r2, #64]	; 0x40
 8001550:	4b05      	ldr	r3, [pc, #20]	; (8001568 <HAL_I2C_MspInit+0xb4>)
 8001552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001554:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001558:	60bb      	str	r3, [r7, #8]
 800155a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800155c:	bf00      	nop
 800155e:	37a8      	adds	r7, #168	; 0xa8
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	40005800 	.word	0x40005800
 8001568:	40023800 	.word	0x40023800
 800156c:	40021400 	.word	0x40021400

08001570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001574:	f000 fbf9 	bl	8001d6a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001578:	f000 f860 	bl	800163c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800157c:	f7ff fe54 	bl	8001228 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001580:	f000 fb3a 	bl	8001bf8 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8001584:	f000 f996 	bl	80018b4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001588:	f000 fa0c 	bl	80019a4 <MX_TIM3_Init>
  MX_I2C2_Init();
 800158c:	f7ff ff52 	bl	8001434 <MX_I2C2_Init>
  MX_TIM4_Init();
 8001590:	f000 fa58 	bl	8001a44 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  //
  // Inicjalizacja silnika
  //
  Init_A4988(&motor); // Domyślne parametry i włączenie pomiarów
 8001594:	4822      	ldr	r0, [pc, #136]	; (8001620 <main+0xb0>)
 8001596:	f7ff fba3 	bl	8000ce0 <Init_A4988>

  //
  // Inicjalizacja czujnika
  //
  VL6180X_Init(&sensor, &hi2c2); // Inicjalizacja połączenia
 800159a:	4922      	ldr	r1, [pc, #136]	; (8001624 <main+0xb4>)
 800159c:	4822      	ldr	r0, [pc, #136]	; (8001628 <main+0xb8>)
 800159e:	f7ff fc5d 	bl	8000e5c <VL6180X_Init>
  configureDefault_VL6180X(&sensor); // Domyślne ustawienia pomiaru
 80015a2:	4821      	ldr	r0, [pc, #132]	; (8001628 <main+0xb8>)
 80015a4:	f7ff fdec 	bl	8001180 <configureDefault_VL6180X>
  Mesure_distance = readRangeSingleMillimeters_VL6180X(&sensor); // Pomiar początkowy
 80015a8:	481f      	ldr	r0, [pc, #124]	; (8001628 <main+0xb8>)
 80015aa:	f7ff fe29 	bl	8001200 <readRangeSingleMillimeters_VL6180X>
 80015ae:	4603      	mov	r3, r0
 80015b0:	461a      	mov	r2, r3
 80015b2:	4b1e      	ldr	r3, [pc, #120]	; (800162c <main+0xbc>)
 80015b4:	801a      	strh	r2, [r3, #0]
  //
  // Sterowanie
  //
  if(control == PETLA_OTWARTA){
 80015b6:	4b1e      	ldr	r3, [pc, #120]	; (8001630 <main+0xc0>)
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d114      	bne.n	80015e8 <main+0x78>
	  HAL_TIM_Base_Stop_IT(&htim4); // Wyłączenie pomiaru z czujnika
 80015be:	481d      	ldr	r0, [pc, #116]	; (8001634 <main+0xc4>)
 80015c0:	f002 feb6 	bl	8004330 <HAL_TIM_Base_Stop_IT>
	  HAL_TIM_Base_Start_IT(motor.TIM_COUNTER_SLAVE); // Włączenie zliczania impulsów
 80015c4:	4b16      	ldr	r3, [pc, #88]	; (8001620 <main+0xb0>)
 80015c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015c8:	4618      	mov	r0, r3
 80015ca:	f002 fe39 	bl	8004240 <HAL_TIM_Base_Start_IT>
	  Rotate_mm_A4988(&motor, Set_distance); // Obracanie
 80015ce:	4b1a      	ldr	r3, [pc, #104]	; (8001638 <main+0xc8>)
 80015d0:	881b      	ldrh	r3, [r3, #0]
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	ee07 3a90 	vmov	s15, r3
 80015d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015dc:	eeb0 0a67 	vmov.f32	s0, s15
 80015e0:	480f      	ldr	r0, [pc, #60]	; (8001620 <main+0xb0>)
 80015e2:	f7ff fb53 	bl	8000c8c <Rotate_mm_A4988>
 80015e6:	e01a      	b.n	800161e <main+0xae>
  }else if (control == PETLA_ZAMKNIETA){
 80015e8:	4b11      	ldr	r3, [pc, #68]	; (8001630 <main+0xc0>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d116      	bne.n	800161e <main+0xae>
	  HAL_TIM_Base_Start_IT(&htim4); // Włączenie pomiaru z częstotliwością 5Hz
 80015f0:	4810      	ldr	r0, [pc, #64]	; (8001634 <main+0xc4>)
 80015f2:	f002 fe25 	bl	8004240 <HAL_TIM_Base_Start_IT>
	  Mesure_distance = readRangeSingleMillimeters_VL6180X(&sensor); // Pomiar początkowy
 80015f6:	480c      	ldr	r0, [pc, #48]	; (8001628 <main+0xb8>)
 80015f8:	f7ff fe02 	bl	8001200 <readRangeSingleMillimeters_VL6180X>
 80015fc:	4603      	mov	r3, r0
 80015fe:	461a      	mov	r2, r3
 8001600:	4b0a      	ldr	r3, [pc, #40]	; (800162c <main+0xbc>)
 8001602:	801a      	strh	r2, [r3, #0]
	  HAL_TIM_Base_Stop_IT(motor.TIM_COUNTER_SLAVE); // Wyłączenie zliczania impulsów
 8001604:	4b06      	ldr	r3, [pc, #24]	; (8001620 <main+0xb0>)
 8001606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001608:	4618      	mov	r0, r3
 800160a:	f002 fe91 	bl	8004330 <HAL_TIM_Base_Stop_IT>
	  HAL_TIM_PWM_Start(motor.TIM_STEP, motor.TIM_STEP_CHANNEL); // Obracanie
 800160e:	4b04      	ldr	r3, [pc, #16]	; (8001620 <main+0xb0>)
 8001610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001612:	4a03      	ldr	r2, [pc, #12]	; (8001620 <main+0xb0>)
 8001614:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001616:	4611      	mov	r1, r2
 8001618:	4618      	mov	r0, r3
 800161a:	f002 ff19 	bl	8004450 <HAL_TIM_PWM_Start>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800161e:	e7fe      	b.n	800161e <main+0xae>
 8001620:	20000000 	.word	0x20000000
 8001624:	20000084 	.word	0x20000084
 8001628:	200000d0 	.word	0x200000d0
 800162c:	200000dc 	.word	0x200000dc
 8001630:	20000058 	.word	0x20000058
 8001634:	20000178 	.word	0x20000178
 8001638:	200000de 	.word	0x200000de

0800163c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b094      	sub	sp, #80	; 0x50
 8001640:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001642:	f107 0320 	add.w	r3, r7, #32
 8001646:	2230      	movs	r2, #48	; 0x30
 8001648:	2100      	movs	r1, #0
 800164a:	4618      	mov	r0, r3
 800164c:	f004 fd50 	bl	80060f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001650:	f107 030c 	add.w	r3, r7, #12
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	605a      	str	r2, [r3, #4]
 800165a:	609a      	str	r2, [r3, #8]
 800165c:	60da      	str	r2, [r3, #12]
 800165e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001660:	f001 fccc 	bl	8002ffc <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001664:	4b27      	ldr	r3, [pc, #156]	; (8001704 <SystemClock_Config+0xc8>)
 8001666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001668:	4a26      	ldr	r2, [pc, #152]	; (8001704 <SystemClock_Config+0xc8>)
 800166a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800166e:	6413      	str	r3, [r2, #64]	; 0x40
 8001670:	4b24      	ldr	r3, [pc, #144]	; (8001704 <SystemClock_Config+0xc8>)
 8001672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001674:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001678:	60bb      	str	r3, [r7, #8]
 800167a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800167c:	4b22      	ldr	r3, [pc, #136]	; (8001708 <SystemClock_Config+0xcc>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001684:	4a20      	ldr	r2, [pc, #128]	; (8001708 <SystemClock_Config+0xcc>)
 8001686:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800168a:	6013      	str	r3, [r2, #0]
 800168c:	4b1e      	ldr	r3, [pc, #120]	; (8001708 <SystemClock_Config+0xcc>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001694:	607b      	str	r3, [r7, #4]
 8001696:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001698:	2301      	movs	r3, #1
 800169a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800169c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80016a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016a2:	2302      	movs	r3, #2
 80016a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80016ac:	2304      	movs	r3, #4
 80016ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80016b0:	2348      	movs	r3, #72	; 0x48
 80016b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016b4:	2302      	movs	r3, #2
 80016b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80016b8:	2303      	movs	r3, #3
 80016ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016bc:	f107 0320 	add.w	r3, r7, #32
 80016c0:	4618      	mov	r0, r3
 80016c2:	f001 fcab 	bl	800301c <HAL_RCC_OscConfig>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80016cc:	f000 f865 	bl	800179a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016d0:	230f      	movs	r3, #15
 80016d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016d4:	2302      	movs	r3, #2
 80016d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016d8:	2300      	movs	r3, #0
 80016da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016e2:	2300      	movs	r3, #0
 80016e4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016e6:	f107 030c 	add.w	r3, r7, #12
 80016ea:	2102      	movs	r1, #2
 80016ec:	4618      	mov	r0, r3
 80016ee:	f001 ff39 	bl	8003564 <HAL_RCC_ClockConfig>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80016f8:	f000 f84f 	bl	800179a <Error_Handler>
  }
}
 80016fc:	bf00      	nop
 80016fe:	3750      	adds	r7, #80	; 0x50
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	40023800 	.word	0x40023800
 8001708:	40007000 	.word	0x40007000

0800170c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
	// Sterowanie w pętli otwartej - callback od sterownika silnika
	if(htim == motor.TIM_COUNTER_SLAVE){
 8001714:	4b16      	ldr	r3, [pc, #88]	; (8001770 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001716:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001718:	687a      	ldr	r2, [r7, #4]
 800171a:	429a      	cmp	r2, r3
 800171c:	d108      	bne.n	8001730 <HAL_TIM_PeriodElapsedCallback+0x24>
		HAL_TIM_PWM_Stop(motor.TIM_STEP, motor.TIM_STEP_CHANNEL);
 800171e:	4b14      	ldr	r3, [pc, #80]	; (8001770 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001722:	4a13      	ldr	r2, [pc, #76]	; (8001770 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001724:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001726:	4611      	mov	r1, r2
 8001728:	4618      	mov	r0, r3
 800172a:	f002 ff8b 	bl	8004644 <HAL_TIM_PWM_Stop>
		Mesure_distance = readRangeSingleMillimeters_VL6180X(&sensor);
		if(Mesure_distance > Set_distance){
			HAL_TIM_PWM_Stop(motor.TIM_STEP, motor.TIM_STEP_CHANNEL);
		}
	}
}
 800172e:	e01b      	b.n	8001768 <HAL_TIM_PeriodElapsedCallback+0x5c>
	else if(htim->Instance == TIM4){
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a0f      	ldr	r2, [pc, #60]	; (8001774 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d116      	bne.n	8001768 <HAL_TIM_PeriodElapsedCallback+0x5c>
		Mesure_distance = readRangeSingleMillimeters_VL6180X(&sensor);
 800173a:	480f      	ldr	r0, [pc, #60]	; (8001778 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800173c:	f7ff fd60 	bl	8001200 <readRangeSingleMillimeters_VL6180X>
 8001740:	4603      	mov	r3, r0
 8001742:	461a      	mov	r2, r3
 8001744:	4b0d      	ldr	r3, [pc, #52]	; (800177c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001746:	801a      	strh	r2, [r3, #0]
		if(Mesure_distance > Set_distance){
 8001748:	4b0c      	ldr	r3, [pc, #48]	; (800177c <HAL_TIM_PeriodElapsedCallback+0x70>)
 800174a:	881b      	ldrh	r3, [r3, #0]
 800174c:	b29a      	uxth	r2, r3
 800174e:	4b0c      	ldr	r3, [pc, #48]	; (8001780 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001750:	881b      	ldrh	r3, [r3, #0]
 8001752:	b29b      	uxth	r3, r3
 8001754:	429a      	cmp	r2, r3
 8001756:	d907      	bls.n	8001768 <HAL_TIM_PeriodElapsedCallback+0x5c>
			HAL_TIM_PWM_Stop(motor.TIM_STEP, motor.TIM_STEP_CHANNEL);
 8001758:	4b05      	ldr	r3, [pc, #20]	; (8001770 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800175a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800175c:	4a04      	ldr	r2, [pc, #16]	; (8001770 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800175e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001760:	4611      	mov	r1, r2
 8001762:	4618      	mov	r0, r3
 8001764:	f002 ff6e 	bl	8004644 <HAL_TIM_PWM_Stop>
}
 8001768:	bf00      	nop
 800176a:	3708      	adds	r7, #8
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	20000000 	.word	0x20000000
 8001774:	40000800 	.word	0x40000800
 8001778:	200000d0 	.word	0x200000d0
 800177c:	200000dc 	.word	0x200000dc
 8001780:	200000de 	.word	0x200000de

08001784 <HAL_GPIO_EXTI_Callback>:
//
// Bezpieczniki krańcowe
//
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	4603      	mov	r3, r0
 800178c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == END_STOP_1_Pin){
//		TODO
	}else if(GPIO_Pin == END_STOP_2_Pin){
//		TODO
	}
}
 800178e:	bf00      	nop
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr

0800179a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800179a:	b480      	push	{r7}
 800179c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800179e:	b672      	cpsid	i
}
 80017a0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017a2:	e7fe      	b.n	80017a2 <Error_Handler+0x8>

080017a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80017aa:	4b0f      	ldr	r3, [pc, #60]	; (80017e8 <HAL_MspInit+0x44>)
 80017ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ae:	4a0e      	ldr	r2, [pc, #56]	; (80017e8 <HAL_MspInit+0x44>)
 80017b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017b4:	6413      	str	r3, [r2, #64]	; 0x40
 80017b6:	4b0c      	ldr	r3, [pc, #48]	; (80017e8 <HAL_MspInit+0x44>)
 80017b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017be:	607b      	str	r3, [r7, #4]
 80017c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017c2:	4b09      	ldr	r3, [pc, #36]	; (80017e8 <HAL_MspInit+0x44>)
 80017c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c6:	4a08      	ldr	r2, [pc, #32]	; (80017e8 <HAL_MspInit+0x44>)
 80017c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017cc:	6453      	str	r3, [r2, #68]	; 0x44
 80017ce:	4b06      	ldr	r3, [pc, #24]	; (80017e8 <HAL_MspInit+0x44>)
 80017d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017d6:	603b      	str	r3, [r7, #0]
 80017d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017da:	bf00      	nop
 80017dc:	370c      	adds	r7, #12
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	40023800 	.word	0x40023800

080017ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017f0:	e7fe      	b.n	80017f0 <NMI_Handler+0x4>

080017f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017f2:	b480      	push	{r7}
 80017f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017f6:	e7fe      	b.n	80017f6 <HardFault_Handler+0x4>

080017f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017fc:	e7fe      	b.n	80017fc <MemManage_Handler+0x4>

080017fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017fe:	b480      	push	{r7}
 8001800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001802:	e7fe      	b.n	8001802 <BusFault_Handler+0x4>

08001804 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001808:	e7fe      	b.n	8001808 <UsageFault_Handler+0x4>

0800180a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800180a:	b480      	push	{r7}
 800180c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800181c:	bf00      	nop
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr

08001826 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001826:	b480      	push	{r7}
 8001828:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800182a:	bf00      	nop
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr

08001834 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001838:	f000 fad4 	bl	8001de4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800183c:	bf00      	nop
 800183e:	bd80      	pop	{r7, pc}

08001840 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(END_STOP_2_Pin);
 8001844:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001848:	f000 fdc4 	bl	80023d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800184c:	bf00      	nop
 800184e:	bd80      	pop	{r7, pc}

08001850 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001854:	4802      	ldr	r0, [pc, #8]	; (8001860 <TIM3_IRQHandler+0x10>)
 8001856:	f002 ff75 	bl	8004744 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	2000012c 	.word	0x2000012c

08001864 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001868:	4802      	ldr	r0, [pc, #8]	; (8001874 <TIM4_IRQHandler+0x10>)
 800186a:	f002 ff6b 	bl	8004744 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	20000178 	.word	0x20000178

08001878 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(END_STOP_1_Pin);
 800187c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001880:	f000 fda8 	bl	80023d4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001884:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001888:	f000 fda4 	bl	80023d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800188c:	bf00      	nop
 800188e:	bd80      	pop	{r7, pc}

08001890 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001894:	4b06      	ldr	r3, [pc, #24]	; (80018b0 <SystemInit+0x20>)
 8001896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800189a:	4a05      	ldr	r2, [pc, #20]	; (80018b0 <SystemInit+0x20>)
 800189c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018a4:	bf00      	nop
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	e000ed00 	.word	0xe000ed00

080018b4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b08e      	sub	sp, #56	; 0x38
 80018b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018be:	2200      	movs	r2, #0
 80018c0:	601a      	str	r2, [r3, #0]
 80018c2:	605a      	str	r2, [r3, #4]
 80018c4:	609a      	str	r2, [r3, #8]
 80018c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018c8:	f107 031c 	add.w	r3, r7, #28
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	605a      	str	r2, [r3, #4]
 80018d2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018d4:	463b      	mov	r3, r7
 80018d6:	2200      	movs	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]
 80018da:	605a      	str	r2, [r3, #4]
 80018dc:	609a      	str	r2, [r3, #8]
 80018de:	60da      	str	r2, [r3, #12]
 80018e0:	611a      	str	r2, [r3, #16]
 80018e2:	615a      	str	r2, [r3, #20]
 80018e4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018e6:	4b2e      	ldr	r3, [pc, #184]	; (80019a0 <MX_TIM2_Init+0xec>)
 80018e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018ec:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 80018ee:	4b2c      	ldr	r3, [pc, #176]	; (80019a0 <MX_TIM2_Init+0xec>)
 80018f0:	2247      	movs	r2, #71	; 0x47
 80018f2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018f4:	4b2a      	ldr	r3, [pc, #168]	; (80019a0 <MX_TIM2_Init+0xec>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80018fa:	4b29      	ldr	r3, [pc, #164]	; (80019a0 <MX_TIM2_Init+0xec>)
 80018fc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001900:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001902:	4b27      	ldr	r3, [pc, #156]	; (80019a0 <MX_TIM2_Init+0xec>)
 8001904:	2200      	movs	r2, #0
 8001906:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001908:	4b25      	ldr	r3, [pc, #148]	; (80019a0 <MX_TIM2_Init+0xec>)
 800190a:	2200      	movs	r2, #0
 800190c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800190e:	4824      	ldr	r0, [pc, #144]	; (80019a0 <MX_TIM2_Init+0xec>)
 8001910:	f002 fc3e 	bl	8004190 <HAL_TIM_Base_Init>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800191a:	f7ff ff3e 	bl	800179a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800191e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001922:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001924:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001928:	4619      	mov	r1, r3
 800192a:	481d      	ldr	r0, [pc, #116]	; (80019a0 <MX_TIM2_Init+0xec>)
 800192c:	f003 f93e 	bl	8004bac <HAL_TIM_ConfigClockSource>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001936:	f7ff ff30 	bl	800179a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800193a:	4819      	ldr	r0, [pc, #100]	; (80019a0 <MX_TIM2_Init+0xec>)
 800193c:	f002 fd27 	bl	800438e <HAL_TIM_PWM_Init>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001946:	f7ff ff28 	bl	800179a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800194a:	2320      	movs	r3, #32
 800194c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800194e:	2300      	movs	r3, #0
 8001950:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001952:	f107 031c 	add.w	r3, r7, #28
 8001956:	4619      	mov	r1, r3
 8001958:	4811      	ldr	r0, [pc, #68]	; (80019a0 <MX_TIM2_Init+0xec>)
 800195a:	f003 fead 	bl	80056b8 <HAL_TIMEx_MasterConfigSynchronization>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001964:	f7ff ff19 	bl	800179a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001968:	2360      	movs	r3, #96	; 0x60
 800196a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 499;
 800196c:	f240 13f3 	movw	r3, #499	; 0x1f3
 8001970:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001972:	2300      	movs	r3, #0
 8001974:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001976:	2300      	movs	r3, #0
 8001978:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800197a:	463b      	mov	r3, r7
 800197c:	2200      	movs	r2, #0
 800197e:	4619      	mov	r1, r3
 8001980:	4807      	ldr	r0, [pc, #28]	; (80019a0 <MX_TIM2_Init+0xec>)
 8001982:	f002 ffff 	bl	8004984 <HAL_TIM_PWM_ConfigChannel>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 800198c:	f7ff ff05 	bl	800179a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001990:	4803      	ldr	r0, [pc, #12]	; (80019a0 <MX_TIM2_Init+0xec>)
 8001992:	f000 f8fb 	bl	8001b8c <HAL_TIM_MspPostInit>

}
 8001996:	bf00      	nop
 8001998:	3738      	adds	r7, #56	; 0x38
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	200000e0 	.word	0x200000e0

080019a4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b088      	sub	sp, #32
 80019a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80019aa:	f107 030c 	add.w	r3, r7, #12
 80019ae:	2200      	movs	r2, #0
 80019b0:	601a      	str	r2, [r3, #0]
 80019b2:	605a      	str	r2, [r3, #4]
 80019b4:	609a      	str	r2, [r3, #8]
 80019b6:	60da      	str	r2, [r3, #12]
 80019b8:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019ba:	463b      	mov	r3, r7
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	605a      	str	r2, [r3, #4]
 80019c2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019c4:	4b1d      	ldr	r3, [pc, #116]	; (8001a3c <MX_TIM3_Init+0x98>)
 80019c6:	4a1e      	ldr	r2, [pc, #120]	; (8001a40 <MX_TIM3_Init+0x9c>)
 80019c8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80019ca:	4b1c      	ldr	r3, [pc, #112]	; (8001a3c <MX_TIM3_Init+0x98>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019d0:	4b1a      	ldr	r3, [pc, #104]	; (8001a3c <MX_TIM3_Init+0x98>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 80019d6:	4b19      	ldr	r3, [pc, #100]	; (8001a3c <MX_TIM3_Init+0x98>)
 80019d8:	2200      	movs	r2, #0
 80019da:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019dc:	4b17      	ldr	r3, [pc, #92]	; (8001a3c <MX_TIM3_Init+0x98>)
 80019de:	2200      	movs	r2, #0
 80019e0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019e2:	4b16      	ldr	r3, [pc, #88]	; (8001a3c <MX_TIM3_Init+0x98>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80019e8:	4814      	ldr	r0, [pc, #80]	; (8001a3c <MX_TIM3_Init+0x98>)
 80019ea:	f002 fbd1 	bl	8004190 <HAL_TIM_Base_Init>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80019f4:	f7ff fed1 	bl	800179a <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 80019f8:	2307      	movs	r3, #7
 80019fa:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 80019fc:	2310      	movs	r3, #16
 80019fe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001a00:	f107 030c 	add.w	r3, r7, #12
 8001a04:	4619      	mov	r1, r3
 8001a06:	480d      	ldr	r0, [pc, #52]	; (8001a3c <MX_TIM3_Init+0x98>)
 8001a08:	f003 f99a 	bl	8004d40 <HAL_TIM_SlaveConfigSynchro>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8001a12:	f7ff fec2 	bl	800179a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a16:	2300      	movs	r3, #0
 8001a18:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a1e:	463b      	mov	r3, r7
 8001a20:	4619      	mov	r1, r3
 8001a22:	4806      	ldr	r0, [pc, #24]	; (8001a3c <MX_TIM3_Init+0x98>)
 8001a24:	f003 fe48 	bl	80056b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8001a2e:	f7ff feb4 	bl	800179a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a32:	bf00      	nop
 8001a34:	3720      	adds	r7, #32
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	2000012c 	.word	0x2000012c
 8001a40:	40000400 	.word	0x40000400

08001a44 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b088      	sub	sp, #32
 8001a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a4a:	f107 0310 	add.w	r3, r7, #16
 8001a4e:	2200      	movs	r2, #0
 8001a50:	601a      	str	r2, [r3, #0]
 8001a52:	605a      	str	r2, [r3, #4]
 8001a54:	609a      	str	r2, [r3, #8]
 8001a56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a58:	1d3b      	adds	r3, r7, #4
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	601a      	str	r2, [r3, #0]
 8001a5e:	605a      	str	r2, [r3, #4]
 8001a60:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001a62:	4b1e      	ldr	r3, [pc, #120]	; (8001adc <MX_TIM4_Init+0x98>)
 8001a64:	4a1e      	ldr	r2, [pc, #120]	; (8001ae0 <MX_TIM4_Init+0x9c>)
 8001a66:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7199;
 8001a68:	4b1c      	ldr	r3, [pc, #112]	; (8001adc <MX_TIM4_Init+0x98>)
 8001a6a:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001a6e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a70:	4b1a      	ldr	r3, [pc, #104]	; (8001adc <MX_TIM4_Init+0x98>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1999;
 8001a76:	4b19      	ldr	r3, [pc, #100]	; (8001adc <MX_TIM4_Init+0x98>)
 8001a78:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001a7c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a7e:	4b17      	ldr	r3, [pc, #92]	; (8001adc <MX_TIM4_Init+0x98>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a84:	4b15      	ldr	r3, [pc, #84]	; (8001adc <MX_TIM4_Init+0x98>)
 8001a86:	2280      	movs	r2, #128	; 0x80
 8001a88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001a8a:	4814      	ldr	r0, [pc, #80]	; (8001adc <MX_TIM4_Init+0x98>)
 8001a8c:	f002 fb80 	bl	8004190 <HAL_TIM_Base_Init>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8001a96:	f7ff fe80 	bl	800179a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a9e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001aa0:	f107 0310 	add.w	r3, r7, #16
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	480d      	ldr	r0, [pc, #52]	; (8001adc <MX_TIM4_Init+0x98>)
 8001aa8:	f003 f880 	bl	8004bac <HAL_TIM_ConfigClockSource>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8001ab2:	f7ff fe72 	bl	800179a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001ab6:	2320      	movs	r3, #32
 8001ab8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aba:	2300      	movs	r3, #0
 8001abc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001abe:	1d3b      	adds	r3, r7, #4
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	4806      	ldr	r0, [pc, #24]	; (8001adc <MX_TIM4_Init+0x98>)
 8001ac4:	f003 fdf8 	bl	80056b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8001ace:	f7ff fe64 	bl	800179a <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001ad2:	bf00      	nop
 8001ad4:	3720      	adds	r7, #32
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	20000178 	.word	0x20000178
 8001ae0:	40000800 	.word	0x40000800

08001ae4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b086      	sub	sp, #24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001af4:	d10c      	bne.n	8001b10 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001af6:	4b22      	ldr	r3, [pc, #136]	; (8001b80 <HAL_TIM_Base_MspInit+0x9c>)
 8001af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afa:	4a21      	ldr	r2, [pc, #132]	; (8001b80 <HAL_TIM_Base_MspInit+0x9c>)
 8001afc:	f043 0301 	orr.w	r3, r3, #1
 8001b00:	6413      	str	r3, [r2, #64]	; 0x40
 8001b02:	4b1f      	ldr	r3, [pc, #124]	; (8001b80 <HAL_TIM_Base_MspInit+0x9c>)
 8001b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	617b      	str	r3, [r7, #20]
 8001b0c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001b0e:	e032      	b.n	8001b76 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM3)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a1b      	ldr	r2, [pc, #108]	; (8001b84 <HAL_TIM_Base_MspInit+0xa0>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d114      	bne.n	8001b44 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b1a:	4b19      	ldr	r3, [pc, #100]	; (8001b80 <HAL_TIM_Base_MspInit+0x9c>)
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1e:	4a18      	ldr	r2, [pc, #96]	; (8001b80 <HAL_TIM_Base_MspInit+0x9c>)
 8001b20:	f043 0302 	orr.w	r3, r3, #2
 8001b24:	6413      	str	r3, [r2, #64]	; 0x40
 8001b26:	4b16      	ldr	r3, [pc, #88]	; (8001b80 <HAL_TIM_Base_MspInit+0x9c>)
 8001b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2a:	f003 0302 	and.w	r3, r3, #2
 8001b2e:	613b      	str	r3, [r7, #16]
 8001b30:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001b32:	2200      	movs	r2, #0
 8001b34:	2100      	movs	r1, #0
 8001b36:	201d      	movs	r0, #29
 8001b38:	f000 fa4f 	bl	8001fda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001b3c:	201d      	movs	r0, #29
 8001b3e:	f000 fa68 	bl	8002012 <HAL_NVIC_EnableIRQ>
}
 8001b42:	e018      	b.n	8001b76 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM4)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a0f      	ldr	r2, [pc, #60]	; (8001b88 <HAL_TIM_Base_MspInit+0xa4>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d113      	bne.n	8001b76 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001b4e:	4b0c      	ldr	r3, [pc, #48]	; (8001b80 <HAL_TIM_Base_MspInit+0x9c>)
 8001b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b52:	4a0b      	ldr	r2, [pc, #44]	; (8001b80 <HAL_TIM_Base_MspInit+0x9c>)
 8001b54:	f043 0304 	orr.w	r3, r3, #4
 8001b58:	6413      	str	r3, [r2, #64]	; 0x40
 8001b5a:	4b09      	ldr	r3, [pc, #36]	; (8001b80 <HAL_TIM_Base_MspInit+0x9c>)
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5e:	f003 0304 	and.w	r3, r3, #4
 8001b62:	60fb      	str	r3, [r7, #12]
 8001b64:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001b66:	2200      	movs	r2, #0
 8001b68:	2100      	movs	r1, #0
 8001b6a:	201e      	movs	r0, #30
 8001b6c:	f000 fa35 	bl	8001fda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001b70:	201e      	movs	r0, #30
 8001b72:	f000 fa4e 	bl	8002012 <HAL_NVIC_EnableIRQ>
}
 8001b76:	bf00      	nop
 8001b78:	3718      	adds	r7, #24
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40023800 	.word	0x40023800
 8001b84:	40000400 	.word	0x40000400
 8001b88:	40000800 	.word	0x40000800

08001b8c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b088      	sub	sp, #32
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b94:	f107 030c 	add.w	r3, r7, #12
 8001b98:	2200      	movs	r2, #0
 8001b9a:	601a      	str	r2, [r3, #0]
 8001b9c:	605a      	str	r2, [r3, #4]
 8001b9e:	609a      	str	r2, [r3, #8]
 8001ba0:	60da      	str	r2, [r3, #12]
 8001ba2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bac:	d11b      	bne.n	8001be6 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bae:	4b10      	ldr	r3, [pc, #64]	; (8001bf0 <HAL_TIM_MspPostInit+0x64>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	4a0f      	ldr	r2, [pc, #60]	; (8001bf0 <HAL_TIM_MspPostInit+0x64>)
 8001bb4:	f043 0301 	orr.w	r3, r3, #1
 8001bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bba:	4b0d      	ldr	r3, [pc, #52]	; (8001bf0 <HAL_TIM_MspPostInit+0x64>)
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbe:	f003 0301 	and.w	r3, r3, #1
 8001bc2:	60bb      	str	r3, [r7, #8]
 8001bc4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0/WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = STEP_Pin;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bca:	2302      	movs	r3, #2
 8001bcc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(STEP_GPIO_Port, &GPIO_InitStruct);
 8001bda:	f107 030c 	add.w	r3, r7, #12
 8001bde:	4619      	mov	r1, r3
 8001be0:	4804      	ldr	r0, [pc, #16]	; (8001bf4 <HAL_TIM_MspPostInit+0x68>)
 8001be2:	f000 fa31 	bl	8002048 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001be6:	bf00      	nop
 8001be8:	3720      	adds	r7, #32
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	40023800 	.word	0x40023800
 8001bf4:	40020000 	.word	0x40020000

08001bf8 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001bfc:	4b14      	ldr	r3, [pc, #80]	; (8001c50 <MX_USART3_UART_Init+0x58>)
 8001bfe:	4a15      	ldr	r2, [pc, #84]	; (8001c54 <MX_USART3_UART_Init+0x5c>)
 8001c00:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001c02:	4b13      	ldr	r3, [pc, #76]	; (8001c50 <MX_USART3_UART_Init+0x58>)
 8001c04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c08:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001c0a:	4b11      	ldr	r3, [pc, #68]	; (8001c50 <MX_USART3_UART_Init+0x58>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001c10:	4b0f      	ldr	r3, [pc, #60]	; (8001c50 <MX_USART3_UART_Init+0x58>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001c16:	4b0e      	ldr	r3, [pc, #56]	; (8001c50 <MX_USART3_UART_Init+0x58>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001c1c:	4b0c      	ldr	r3, [pc, #48]	; (8001c50 <MX_USART3_UART_Init+0x58>)
 8001c1e:	220c      	movs	r2, #12
 8001c20:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c22:	4b0b      	ldr	r3, [pc, #44]	; (8001c50 <MX_USART3_UART_Init+0x58>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c28:	4b09      	ldr	r3, [pc, #36]	; (8001c50 <MX_USART3_UART_Init+0x58>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c2e:	4b08      	ldr	r3, [pc, #32]	; (8001c50 <MX_USART3_UART_Init+0x58>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c34:	4b06      	ldr	r3, [pc, #24]	; (8001c50 <MX_USART3_UART_Init+0x58>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001c3a:	4805      	ldr	r0, [pc, #20]	; (8001c50 <MX_USART3_UART_Init+0x58>)
 8001c3c:	f003 fde8 	bl	8005810 <HAL_UART_Init>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001c46:	f7ff fda8 	bl	800179a <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001c4a:	bf00      	nop
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	200001c4 	.word	0x200001c4
 8001c54:	40004800 	.word	0x40004800

08001c58 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b0aa      	sub	sp, #168	; 0xa8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c60:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	605a      	str	r2, [r3, #4]
 8001c6a:	609a      	str	r2, [r3, #8]
 8001c6c:	60da      	str	r2, [r3, #12]
 8001c6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c70:	f107 0310 	add.w	r3, r7, #16
 8001c74:	2284      	movs	r2, #132	; 0x84
 8001c76:	2100      	movs	r1, #0
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f004 fa39 	bl	80060f0 <memset>
  if(uartHandle->Instance==USART3)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a22      	ldr	r2, [pc, #136]	; (8001d0c <HAL_UART_MspInit+0xb4>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d13c      	bne.n	8001d02 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001c88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c8c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c92:	f107 0310 	add.w	r3, r7, #16
 8001c96:	4618      	mov	r0, r3
 8001c98:	f001 fe8a 	bl	80039b0 <HAL_RCCEx_PeriphCLKConfig>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001ca2:	f7ff fd7a 	bl	800179a <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ca6:	4b1a      	ldr	r3, [pc, #104]	; (8001d10 <HAL_UART_MspInit+0xb8>)
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001caa:	4a19      	ldr	r2, [pc, #100]	; (8001d10 <HAL_UART_MspInit+0xb8>)
 8001cac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cb0:	6413      	str	r3, [r2, #64]	; 0x40
 8001cb2:	4b17      	ldr	r3, [pc, #92]	; (8001d10 <HAL_UART_MspInit+0xb8>)
 8001cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cbe:	4b14      	ldr	r3, [pc, #80]	; (8001d10 <HAL_UART_MspInit+0xb8>)
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc2:	4a13      	ldr	r2, [pc, #76]	; (8001d10 <HAL_UART_MspInit+0xb8>)
 8001cc4:	f043 0308 	orr.w	r3, r3, #8
 8001cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cca:	4b11      	ldr	r3, [pc, #68]	; (8001d10 <HAL_UART_MspInit+0xb8>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cce:	f003 0308 	and.w	r3, r3, #8
 8001cd2:	60bb      	str	r3, [r7, #8]
 8001cd4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001cd6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001cda:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cde:	2302      	movs	r3, #2
 8001ce0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cea:	2303      	movs	r3, #3
 8001cec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001cf0:	2307      	movs	r3, #7
 8001cf2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cf6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	4805      	ldr	r0, [pc, #20]	; (8001d14 <HAL_UART_MspInit+0xbc>)
 8001cfe:	f000 f9a3 	bl	8002048 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001d02:	bf00      	nop
 8001d04:	37a8      	adds	r7, #168	; 0xa8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	40004800 	.word	0x40004800
 8001d10:	40023800 	.word	0x40023800
 8001d14:	40020c00 	.word	0x40020c00

08001d18 <Reset_Handler>:
 8001d18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d50 <LoopFillZerobss+0x12>
 8001d1c:	480d      	ldr	r0, [pc, #52]	; (8001d54 <LoopFillZerobss+0x16>)
 8001d1e:	490e      	ldr	r1, [pc, #56]	; (8001d58 <LoopFillZerobss+0x1a>)
 8001d20:	4a0e      	ldr	r2, [pc, #56]	; (8001d5c <LoopFillZerobss+0x1e>)
 8001d22:	2300      	movs	r3, #0
 8001d24:	e002      	b.n	8001d2c <LoopCopyDataInit>

08001d26 <CopyDataInit>:
 8001d26:	58d4      	ldr	r4, [r2, r3]
 8001d28:	50c4      	str	r4, [r0, r3]
 8001d2a:	3304      	adds	r3, #4

08001d2c <LoopCopyDataInit>:
 8001d2c:	18c4      	adds	r4, r0, r3
 8001d2e:	428c      	cmp	r4, r1
 8001d30:	d3f9      	bcc.n	8001d26 <CopyDataInit>
 8001d32:	4a0b      	ldr	r2, [pc, #44]	; (8001d60 <LoopFillZerobss+0x22>)
 8001d34:	4c0b      	ldr	r4, [pc, #44]	; (8001d64 <LoopFillZerobss+0x26>)
 8001d36:	2300      	movs	r3, #0
 8001d38:	e001      	b.n	8001d3e <LoopFillZerobss>

08001d3a <FillZerobss>:
 8001d3a:	6013      	str	r3, [r2, #0]
 8001d3c:	3204      	adds	r2, #4

08001d3e <LoopFillZerobss>:
 8001d3e:	42a2      	cmp	r2, r4
 8001d40:	d3fb      	bcc.n	8001d3a <FillZerobss>
 8001d42:	f7ff fda5 	bl	8001890 <SystemInit>
 8001d46:	f004 f9af 	bl	80060a8 <__libc_init_array>
 8001d4a:	f7ff fc11 	bl	8001570 <main>
 8001d4e:	4770      	bx	lr
 8001d50:	20050000 	.word	0x20050000
 8001d54:	20000000 	.word	0x20000000
 8001d58:	20000068 	.word	0x20000068
 8001d5c:	080061d4 	.word	0x080061d4
 8001d60:	20000068 	.word	0x20000068
 8001d64:	2000024c 	.word	0x2000024c

08001d68 <ADC_IRQHandler>:
 8001d68:	e7fe      	b.n	8001d68 <ADC_IRQHandler>

08001d6a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d6e:	2003      	movs	r0, #3
 8001d70:	f000 f928 	bl	8001fc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d74:	2000      	movs	r0, #0
 8001d76:	f000 f805 	bl	8001d84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d7a:	f7ff fd13 	bl	80017a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d7e:	2300      	movs	r3, #0
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	bd80      	pop	{r7, pc}

08001d84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d8c:	4b12      	ldr	r3, [pc, #72]	; (8001dd8 <HAL_InitTick+0x54>)
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	4b12      	ldr	r3, [pc, #72]	; (8001ddc <HAL_InitTick+0x58>)
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	4619      	mov	r1, r3
 8001d96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001da2:	4618      	mov	r0, r3
 8001da4:	f000 f943 	bl	800202e <HAL_SYSTICK_Config>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e00e      	b.n	8001dd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2b0f      	cmp	r3, #15
 8001db6:	d80a      	bhi.n	8001dce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001db8:	2200      	movs	r2, #0
 8001dba:	6879      	ldr	r1, [r7, #4]
 8001dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8001dc0:	f000 f90b 	bl	8001fda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dc4:	4a06      	ldr	r2, [pc, #24]	; (8001de0 <HAL_InitTick+0x5c>)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	e000      	b.n	8001dd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3708      	adds	r7, #8
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	2000005c 	.word	0x2000005c
 8001ddc:	20000064 	.word	0x20000064
 8001de0:	20000060 	.word	0x20000060

08001de4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001de8:	4b06      	ldr	r3, [pc, #24]	; (8001e04 <HAL_IncTick+0x20>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	461a      	mov	r2, r3
 8001dee:	4b06      	ldr	r3, [pc, #24]	; (8001e08 <HAL_IncTick+0x24>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4413      	add	r3, r2
 8001df4:	4a04      	ldr	r2, [pc, #16]	; (8001e08 <HAL_IncTick+0x24>)
 8001df6:	6013      	str	r3, [r2, #0]
}
 8001df8:	bf00      	nop
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	20000064 	.word	0x20000064
 8001e08:	20000248 	.word	0x20000248

08001e0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e10:	4b03      	ldr	r3, [pc, #12]	; (8001e20 <HAL_GetTick+0x14>)
 8001e12:	681b      	ldr	r3, [r3, #0]
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	20000248 	.word	0x20000248

08001e24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b085      	sub	sp, #20
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f003 0307 	and.w	r3, r3, #7
 8001e32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e34:	4b0b      	ldr	r3, [pc, #44]	; (8001e64 <__NVIC_SetPriorityGrouping+0x40>)
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e3a:	68ba      	ldr	r2, [r7, #8]
 8001e3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e40:	4013      	ands	r3, r2
 8001e42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001e4c:	4b06      	ldr	r3, [pc, #24]	; (8001e68 <__NVIC_SetPriorityGrouping+0x44>)
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e52:	4a04      	ldr	r2, [pc, #16]	; (8001e64 <__NVIC_SetPriorityGrouping+0x40>)
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	60d3      	str	r3, [r2, #12]
}
 8001e58:	bf00      	nop
 8001e5a:	3714      	adds	r7, #20
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr
 8001e64:	e000ed00 	.word	0xe000ed00
 8001e68:	05fa0000 	.word	0x05fa0000

08001e6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e70:	4b04      	ldr	r3, [pc, #16]	; (8001e84 <__NVIC_GetPriorityGrouping+0x18>)
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	0a1b      	lsrs	r3, r3, #8
 8001e76:	f003 0307 	and.w	r3, r3, #7
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr
 8001e84:	e000ed00 	.word	0xe000ed00

08001e88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	4603      	mov	r3, r0
 8001e90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	db0b      	blt.n	8001eb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e9a:	79fb      	ldrb	r3, [r7, #7]
 8001e9c:	f003 021f 	and.w	r2, r3, #31
 8001ea0:	4907      	ldr	r1, [pc, #28]	; (8001ec0 <__NVIC_EnableIRQ+0x38>)
 8001ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea6:	095b      	lsrs	r3, r3, #5
 8001ea8:	2001      	movs	r0, #1
 8001eaa:	fa00 f202 	lsl.w	r2, r0, r2
 8001eae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001eb2:	bf00      	nop
 8001eb4:	370c      	adds	r7, #12
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	e000e100 	.word	0xe000e100

08001ec4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	4603      	mov	r3, r0
 8001ecc:	6039      	str	r1, [r7, #0]
 8001ece:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ed0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	db0a      	blt.n	8001eee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	b2da      	uxtb	r2, r3
 8001edc:	490c      	ldr	r1, [pc, #48]	; (8001f10 <__NVIC_SetPriority+0x4c>)
 8001ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee2:	0112      	lsls	r2, r2, #4
 8001ee4:	b2d2      	uxtb	r2, r2
 8001ee6:	440b      	add	r3, r1
 8001ee8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001eec:	e00a      	b.n	8001f04 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	b2da      	uxtb	r2, r3
 8001ef2:	4908      	ldr	r1, [pc, #32]	; (8001f14 <__NVIC_SetPriority+0x50>)
 8001ef4:	79fb      	ldrb	r3, [r7, #7]
 8001ef6:	f003 030f 	and.w	r3, r3, #15
 8001efa:	3b04      	subs	r3, #4
 8001efc:	0112      	lsls	r2, r2, #4
 8001efe:	b2d2      	uxtb	r2, r2
 8001f00:	440b      	add	r3, r1
 8001f02:	761a      	strb	r2, [r3, #24]
}
 8001f04:	bf00      	nop
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr
 8001f10:	e000e100 	.word	0xe000e100
 8001f14:	e000ed00 	.word	0xe000ed00

08001f18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b089      	sub	sp, #36	; 0x24
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	60f8      	str	r0, [r7, #12]
 8001f20:	60b9      	str	r1, [r7, #8]
 8001f22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f003 0307 	and.w	r3, r3, #7
 8001f2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	f1c3 0307 	rsb	r3, r3, #7
 8001f32:	2b04      	cmp	r3, #4
 8001f34:	bf28      	it	cs
 8001f36:	2304      	movcs	r3, #4
 8001f38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	3304      	adds	r3, #4
 8001f3e:	2b06      	cmp	r3, #6
 8001f40:	d902      	bls.n	8001f48 <NVIC_EncodePriority+0x30>
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	3b03      	subs	r3, #3
 8001f46:	e000      	b.n	8001f4a <NVIC_EncodePriority+0x32>
 8001f48:	2300      	movs	r3, #0
 8001f4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	fa02 f303 	lsl.w	r3, r2, r3
 8001f56:	43da      	mvns	r2, r3
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	401a      	ands	r2, r3
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f60:	f04f 31ff 	mov.w	r1, #4294967295
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	fa01 f303 	lsl.w	r3, r1, r3
 8001f6a:	43d9      	mvns	r1, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f70:	4313      	orrs	r3, r2
         );
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3724      	adds	r7, #36	; 0x24
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
	...

08001f80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f90:	d301      	bcc.n	8001f96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f92:	2301      	movs	r3, #1
 8001f94:	e00f      	b.n	8001fb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f96:	4a0a      	ldr	r2, [pc, #40]	; (8001fc0 <SysTick_Config+0x40>)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	3b01      	subs	r3, #1
 8001f9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f9e:	210f      	movs	r1, #15
 8001fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fa4:	f7ff ff8e 	bl	8001ec4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fa8:	4b05      	ldr	r3, [pc, #20]	; (8001fc0 <SysTick_Config+0x40>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fae:	4b04      	ldr	r3, [pc, #16]	; (8001fc0 <SysTick_Config+0x40>)
 8001fb0:	2207      	movs	r2, #7
 8001fb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	e000e010 	.word	0xe000e010

08001fc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f7ff ff29 	bl	8001e24 <__NVIC_SetPriorityGrouping>
}
 8001fd2:	bf00      	nop
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	b086      	sub	sp, #24
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	60b9      	str	r1, [r7, #8]
 8001fe4:	607a      	str	r2, [r7, #4]
 8001fe6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fec:	f7ff ff3e 	bl	8001e6c <__NVIC_GetPriorityGrouping>
 8001ff0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	68b9      	ldr	r1, [r7, #8]
 8001ff6:	6978      	ldr	r0, [r7, #20]
 8001ff8:	f7ff ff8e 	bl	8001f18 <NVIC_EncodePriority>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002002:	4611      	mov	r1, r2
 8002004:	4618      	mov	r0, r3
 8002006:	f7ff ff5d 	bl	8001ec4 <__NVIC_SetPriority>
}
 800200a:	bf00      	nop
 800200c:	3718      	adds	r7, #24
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}

08002012 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002012:	b580      	push	{r7, lr}
 8002014:	b082      	sub	sp, #8
 8002016:	af00      	add	r7, sp, #0
 8002018:	4603      	mov	r3, r0
 800201a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800201c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002020:	4618      	mov	r0, r3
 8002022:	f7ff ff31 	bl	8001e88 <__NVIC_EnableIRQ>
}
 8002026:	bf00      	nop
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}

0800202e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800202e:	b580      	push	{r7, lr}
 8002030:	b082      	sub	sp, #8
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f7ff ffa2 	bl	8001f80 <SysTick_Config>
 800203c:	4603      	mov	r3, r0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
	...

08002048 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002048:	b480      	push	{r7}
 800204a:	b089      	sub	sp, #36	; 0x24
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002052:	2300      	movs	r3, #0
 8002054:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002056:	2300      	movs	r3, #0
 8002058:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800205a:	2300      	movs	r3, #0
 800205c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800205e:	2300      	movs	r3, #0
 8002060:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002062:	2300      	movs	r3, #0
 8002064:	61fb      	str	r3, [r7, #28]
 8002066:	e175      	b.n	8002354 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002068:	2201      	movs	r2, #1
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	697a      	ldr	r2, [r7, #20]
 8002078:	4013      	ands	r3, r2
 800207a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800207c:	693a      	ldr	r2, [r7, #16]
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	429a      	cmp	r2, r3
 8002082:	f040 8164 	bne.w	800234e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f003 0303 	and.w	r3, r3, #3
 800208e:	2b01      	cmp	r3, #1
 8002090:	d005      	beq.n	800209e <HAL_GPIO_Init+0x56>
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f003 0303 	and.w	r3, r3, #3
 800209a:	2b02      	cmp	r3, #2
 800209c:	d130      	bne.n	8002100 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	2203      	movs	r2, #3
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	43db      	mvns	r3, r3
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	4013      	ands	r3, r2
 80020b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	68da      	ldr	r2, [r3, #12]
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	fa02 f303 	lsl.w	r3, r2, r3
 80020c2:	69ba      	ldr	r2, [r7, #24]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020d4:	2201      	movs	r2, #1
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	43db      	mvns	r3, r3
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	4013      	ands	r3, r2
 80020e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	091b      	lsrs	r3, r3, #4
 80020ea:	f003 0201 	and.w	r2, r3, #1
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f003 0303 	and.w	r3, r3, #3
 8002108:	2b03      	cmp	r3, #3
 800210a:	d017      	beq.n	800213c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	005b      	lsls	r3, r3, #1
 8002116:	2203      	movs	r2, #3
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	43db      	mvns	r3, r3
 800211e:	69ba      	ldr	r2, [r7, #24]
 8002120:	4013      	ands	r3, r2
 8002122:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	689a      	ldr	r2, [r3, #8]
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	fa02 f303 	lsl.w	r3, r2, r3
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	4313      	orrs	r3, r2
 8002134:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f003 0303 	and.w	r3, r3, #3
 8002144:	2b02      	cmp	r3, #2
 8002146:	d123      	bne.n	8002190 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	08da      	lsrs	r2, r3, #3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	3208      	adds	r2, #8
 8002150:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002154:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	f003 0307 	and.w	r3, r3, #7
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	220f      	movs	r2, #15
 8002160:	fa02 f303 	lsl.w	r3, r2, r3
 8002164:	43db      	mvns	r3, r3
 8002166:	69ba      	ldr	r2, [r7, #24]
 8002168:	4013      	ands	r3, r2
 800216a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	691a      	ldr	r2, [r3, #16]
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	f003 0307 	and.w	r3, r3, #7
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	fa02 f303 	lsl.w	r3, r2, r3
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	4313      	orrs	r3, r2
 8002180:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	08da      	lsrs	r2, r3, #3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	3208      	adds	r2, #8
 800218a:	69b9      	ldr	r1, [r7, #24]
 800218c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	005b      	lsls	r3, r3, #1
 800219a:	2203      	movs	r2, #3
 800219c:	fa02 f303 	lsl.w	r3, r2, r3
 80021a0:	43db      	mvns	r3, r3
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	4013      	ands	r3, r2
 80021a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f003 0203 	and.w	r2, r3, #3
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	005b      	lsls	r3, r3, #1
 80021b4:	fa02 f303 	lsl.w	r3, r2, r3
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	f000 80be 	beq.w	800234e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021d2:	4b66      	ldr	r3, [pc, #408]	; (800236c <HAL_GPIO_Init+0x324>)
 80021d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d6:	4a65      	ldr	r2, [pc, #404]	; (800236c <HAL_GPIO_Init+0x324>)
 80021d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021dc:	6453      	str	r3, [r2, #68]	; 0x44
 80021de:	4b63      	ldr	r3, [pc, #396]	; (800236c <HAL_GPIO_Init+0x324>)
 80021e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021e6:	60fb      	str	r3, [r7, #12]
 80021e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80021ea:	4a61      	ldr	r2, [pc, #388]	; (8002370 <HAL_GPIO_Init+0x328>)
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	089b      	lsrs	r3, r3, #2
 80021f0:	3302      	adds	r3, #2
 80021f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	f003 0303 	and.w	r3, r3, #3
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	220f      	movs	r2, #15
 8002202:	fa02 f303 	lsl.w	r3, r2, r3
 8002206:	43db      	mvns	r3, r3
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	4013      	ands	r3, r2
 800220c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a58      	ldr	r2, [pc, #352]	; (8002374 <HAL_GPIO_Init+0x32c>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d037      	beq.n	8002286 <HAL_GPIO_Init+0x23e>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a57      	ldr	r2, [pc, #348]	; (8002378 <HAL_GPIO_Init+0x330>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d031      	beq.n	8002282 <HAL_GPIO_Init+0x23a>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a56      	ldr	r2, [pc, #344]	; (800237c <HAL_GPIO_Init+0x334>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d02b      	beq.n	800227e <HAL_GPIO_Init+0x236>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a55      	ldr	r2, [pc, #340]	; (8002380 <HAL_GPIO_Init+0x338>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d025      	beq.n	800227a <HAL_GPIO_Init+0x232>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a54      	ldr	r2, [pc, #336]	; (8002384 <HAL_GPIO_Init+0x33c>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d01f      	beq.n	8002276 <HAL_GPIO_Init+0x22e>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a53      	ldr	r2, [pc, #332]	; (8002388 <HAL_GPIO_Init+0x340>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d019      	beq.n	8002272 <HAL_GPIO_Init+0x22a>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a52      	ldr	r2, [pc, #328]	; (800238c <HAL_GPIO_Init+0x344>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d013      	beq.n	800226e <HAL_GPIO_Init+0x226>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a51      	ldr	r2, [pc, #324]	; (8002390 <HAL_GPIO_Init+0x348>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d00d      	beq.n	800226a <HAL_GPIO_Init+0x222>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a50      	ldr	r2, [pc, #320]	; (8002394 <HAL_GPIO_Init+0x34c>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d007      	beq.n	8002266 <HAL_GPIO_Init+0x21e>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a4f      	ldr	r2, [pc, #316]	; (8002398 <HAL_GPIO_Init+0x350>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d101      	bne.n	8002262 <HAL_GPIO_Init+0x21a>
 800225e:	2309      	movs	r3, #9
 8002260:	e012      	b.n	8002288 <HAL_GPIO_Init+0x240>
 8002262:	230a      	movs	r3, #10
 8002264:	e010      	b.n	8002288 <HAL_GPIO_Init+0x240>
 8002266:	2308      	movs	r3, #8
 8002268:	e00e      	b.n	8002288 <HAL_GPIO_Init+0x240>
 800226a:	2307      	movs	r3, #7
 800226c:	e00c      	b.n	8002288 <HAL_GPIO_Init+0x240>
 800226e:	2306      	movs	r3, #6
 8002270:	e00a      	b.n	8002288 <HAL_GPIO_Init+0x240>
 8002272:	2305      	movs	r3, #5
 8002274:	e008      	b.n	8002288 <HAL_GPIO_Init+0x240>
 8002276:	2304      	movs	r3, #4
 8002278:	e006      	b.n	8002288 <HAL_GPIO_Init+0x240>
 800227a:	2303      	movs	r3, #3
 800227c:	e004      	b.n	8002288 <HAL_GPIO_Init+0x240>
 800227e:	2302      	movs	r3, #2
 8002280:	e002      	b.n	8002288 <HAL_GPIO_Init+0x240>
 8002282:	2301      	movs	r3, #1
 8002284:	e000      	b.n	8002288 <HAL_GPIO_Init+0x240>
 8002286:	2300      	movs	r3, #0
 8002288:	69fa      	ldr	r2, [r7, #28]
 800228a:	f002 0203 	and.w	r2, r2, #3
 800228e:	0092      	lsls	r2, r2, #2
 8002290:	4093      	lsls	r3, r2
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	4313      	orrs	r3, r2
 8002296:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002298:	4935      	ldr	r1, [pc, #212]	; (8002370 <HAL_GPIO_Init+0x328>)
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	089b      	lsrs	r3, r3, #2
 800229e:	3302      	adds	r3, #2
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022a6:	4b3d      	ldr	r3, [pc, #244]	; (800239c <HAL_GPIO_Init+0x354>)
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	43db      	mvns	r3, r3
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	4013      	ands	r3, r2
 80022b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d003      	beq.n	80022ca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80022c2:	69ba      	ldr	r2, [r7, #24]
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022ca:	4a34      	ldr	r2, [pc, #208]	; (800239c <HAL_GPIO_Init+0x354>)
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022d0:	4b32      	ldr	r3, [pc, #200]	; (800239c <HAL_GPIO_Init+0x354>)
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	43db      	mvns	r3, r3
 80022da:	69ba      	ldr	r2, [r7, #24]
 80022dc:	4013      	ands	r3, r2
 80022de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d003      	beq.n	80022f4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80022ec:	69ba      	ldr	r2, [r7, #24]
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022f4:	4a29      	ldr	r2, [pc, #164]	; (800239c <HAL_GPIO_Init+0x354>)
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022fa:	4b28      	ldr	r3, [pc, #160]	; (800239c <HAL_GPIO_Init+0x354>)
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	43db      	mvns	r3, r3
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	4013      	ands	r3, r2
 8002308:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d003      	beq.n	800231e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002316:	69ba      	ldr	r2, [r7, #24]
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	4313      	orrs	r3, r2
 800231c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800231e:	4a1f      	ldr	r2, [pc, #124]	; (800239c <HAL_GPIO_Init+0x354>)
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002324:	4b1d      	ldr	r3, [pc, #116]	; (800239c <HAL_GPIO_Init+0x354>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	43db      	mvns	r3, r3
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	4013      	ands	r3, r2
 8002332:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d003      	beq.n	8002348 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	4313      	orrs	r3, r2
 8002346:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002348:	4a14      	ldr	r2, [pc, #80]	; (800239c <HAL_GPIO_Init+0x354>)
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	3301      	adds	r3, #1
 8002352:	61fb      	str	r3, [r7, #28]
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	2b0f      	cmp	r3, #15
 8002358:	f67f ae86 	bls.w	8002068 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800235c:	bf00      	nop
 800235e:	bf00      	nop
 8002360:	3724      	adds	r7, #36	; 0x24
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	40023800 	.word	0x40023800
 8002370:	40013800 	.word	0x40013800
 8002374:	40020000 	.word	0x40020000
 8002378:	40020400 	.word	0x40020400
 800237c:	40020800 	.word	0x40020800
 8002380:	40020c00 	.word	0x40020c00
 8002384:	40021000 	.word	0x40021000
 8002388:	40021400 	.word	0x40021400
 800238c:	40021800 	.word	0x40021800
 8002390:	40021c00 	.word	0x40021c00
 8002394:	40022000 	.word	0x40022000
 8002398:	40022400 	.word	0x40022400
 800239c:	40013c00 	.word	0x40013c00

080023a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	460b      	mov	r3, r1
 80023aa:	807b      	strh	r3, [r7, #2]
 80023ac:	4613      	mov	r3, r2
 80023ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023b0:	787b      	ldrb	r3, [r7, #1]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d003      	beq.n	80023be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023b6:	887a      	ldrh	r2, [r7, #2]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80023bc:	e003      	b.n	80023c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80023be:	887b      	ldrh	r3, [r7, #2]
 80023c0:	041a      	lsls	r2, r3, #16
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	619a      	str	r2, [r3, #24]
}
 80023c6:	bf00      	nop
 80023c8:	370c      	adds	r7, #12
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
	...

080023d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	4603      	mov	r3, r0
 80023dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80023de:	4b08      	ldr	r3, [pc, #32]	; (8002400 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023e0:	695a      	ldr	r2, [r3, #20]
 80023e2:	88fb      	ldrh	r3, [r7, #6]
 80023e4:	4013      	ands	r3, r2
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d006      	beq.n	80023f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80023ea:	4a05      	ldr	r2, [pc, #20]	; (8002400 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023ec:	88fb      	ldrh	r3, [r7, #6]
 80023ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80023f0:	88fb      	ldrh	r3, [r7, #6]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7ff f9c6 	bl	8001784 <HAL_GPIO_EXTI_Callback>
  }
}
 80023f8:	bf00      	nop
 80023fa:	3708      	adds	r7, #8
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	40013c00 	.word	0x40013c00

08002404 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d101      	bne.n	8002416 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e07f      	b.n	8002516 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800241c:	b2db      	uxtb	r3, r3
 800241e:	2b00      	cmp	r3, #0
 8002420:	d106      	bne.n	8002430 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2200      	movs	r2, #0
 8002426:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f7ff f842 	bl	80014b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2224      	movs	r2, #36	; 0x24
 8002434:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f022 0201 	bic.w	r2, r2, #1
 8002446:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685a      	ldr	r2, [r3, #4]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002454:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	689a      	ldr	r2, [r3, #8]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002464:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	2b01      	cmp	r3, #1
 800246c:	d107      	bne.n	800247e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	689a      	ldr	r2, [r3, #8]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800247a:	609a      	str	r2, [r3, #8]
 800247c:	e006      	b.n	800248c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	689a      	ldr	r2, [r3, #8]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800248a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	2b02      	cmp	r3, #2
 8002492:	d104      	bne.n	800249e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800249c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	6859      	ldr	r1, [r3, #4]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	4b1d      	ldr	r3, [pc, #116]	; (8002520 <HAL_I2C_Init+0x11c>)
 80024aa:	430b      	orrs	r3, r1
 80024ac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	68da      	ldr	r2, [r3, #12]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024bc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	691a      	ldr	r2, [r3, #16]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	695b      	ldr	r3, [r3, #20]
 80024c6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	699b      	ldr	r3, [r3, #24]
 80024ce:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	430a      	orrs	r2, r1
 80024d6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	69d9      	ldr	r1, [r3, #28]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6a1a      	ldr	r2, [r3, #32]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	430a      	orrs	r2, r1
 80024e6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f042 0201 	orr.w	r2, r2, #1
 80024f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2220      	movs	r2, #32
 8002502:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3708      	adds	r7, #8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	02008000 	.word	0x02008000

08002524 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b088      	sub	sp, #32
 8002528:	af02      	add	r7, sp, #8
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	4608      	mov	r0, r1
 800252e:	4611      	mov	r1, r2
 8002530:	461a      	mov	r2, r3
 8002532:	4603      	mov	r3, r0
 8002534:	817b      	strh	r3, [r7, #10]
 8002536:	460b      	mov	r3, r1
 8002538:	813b      	strh	r3, [r7, #8]
 800253a:	4613      	mov	r3, r2
 800253c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002544:	b2db      	uxtb	r3, r3
 8002546:	2b20      	cmp	r3, #32
 8002548:	f040 80f9 	bne.w	800273e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800254c:	6a3b      	ldr	r3, [r7, #32]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d002      	beq.n	8002558 <HAL_I2C_Mem_Write+0x34>
 8002552:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002554:	2b00      	cmp	r3, #0
 8002556:	d105      	bne.n	8002564 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800255e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e0ed      	b.n	8002740 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800256a:	2b01      	cmp	r3, #1
 800256c:	d101      	bne.n	8002572 <HAL_I2C_Mem_Write+0x4e>
 800256e:	2302      	movs	r3, #2
 8002570:	e0e6      	b.n	8002740 <HAL_I2C_Mem_Write+0x21c>
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2201      	movs	r2, #1
 8002576:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800257a:	f7ff fc47 	bl	8001e0c <HAL_GetTick>
 800257e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	9300      	str	r3, [sp, #0]
 8002584:	2319      	movs	r3, #25
 8002586:	2201      	movs	r2, #1
 8002588:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800258c:	68f8      	ldr	r0, [r7, #12]
 800258e:	f000 fac3 	bl	8002b18 <I2C_WaitOnFlagUntilTimeout>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e0d1      	b.n	8002740 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2221      	movs	r2, #33	; 0x21
 80025a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2240      	movs	r2, #64	; 0x40
 80025a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2200      	movs	r2, #0
 80025b0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	6a3a      	ldr	r2, [r7, #32]
 80025b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80025bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2200      	movs	r2, #0
 80025c2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80025c4:	88f8      	ldrh	r0, [r7, #6]
 80025c6:	893a      	ldrh	r2, [r7, #8]
 80025c8:	8979      	ldrh	r1, [r7, #10]
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	9301      	str	r3, [sp, #4]
 80025ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025d0:	9300      	str	r3, [sp, #0]
 80025d2:	4603      	mov	r3, r0
 80025d4:	68f8      	ldr	r0, [r7, #12]
 80025d6:	f000 f9d3 	bl	8002980 <I2C_RequestMemoryWrite>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d005      	beq.n	80025ec <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2200      	movs	r2, #0
 80025e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e0a9      	b.n	8002740 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	2bff      	cmp	r3, #255	; 0xff
 80025f4:	d90e      	bls.n	8002614 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	22ff      	movs	r2, #255	; 0xff
 80025fa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002600:	b2da      	uxtb	r2, r3
 8002602:	8979      	ldrh	r1, [r7, #10]
 8002604:	2300      	movs	r3, #0
 8002606:	9300      	str	r3, [sp, #0]
 8002608:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800260c:	68f8      	ldr	r0, [r7, #12]
 800260e:	f000 fc2b 	bl	8002e68 <I2C_TransferConfig>
 8002612:	e00f      	b.n	8002634 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002618:	b29a      	uxth	r2, r3
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002622:	b2da      	uxtb	r2, r3
 8002624:	8979      	ldrh	r1, [r7, #10]
 8002626:	2300      	movs	r3, #0
 8002628:	9300      	str	r3, [sp, #0]
 800262a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800262e:	68f8      	ldr	r0, [r7, #12]
 8002630:	f000 fc1a 	bl	8002e68 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002634:	697a      	ldr	r2, [r7, #20]
 8002636:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002638:	68f8      	ldr	r0, [r7, #12]
 800263a:	f000 faad 	bl	8002b98 <I2C_WaitOnTXISFlagUntilTimeout>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d001      	beq.n	8002648 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e07b      	b.n	8002740 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264c:	781a      	ldrb	r2, [r3, #0]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002658:	1c5a      	adds	r2, r3, #1
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002662:	b29b      	uxth	r3, r3
 8002664:	3b01      	subs	r3, #1
 8002666:	b29a      	uxth	r2, r3
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002670:	3b01      	subs	r3, #1
 8002672:	b29a      	uxth	r2, r3
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800267c:	b29b      	uxth	r3, r3
 800267e:	2b00      	cmp	r3, #0
 8002680:	d034      	beq.n	80026ec <HAL_I2C_Mem_Write+0x1c8>
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002686:	2b00      	cmp	r3, #0
 8002688:	d130      	bne.n	80026ec <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	9300      	str	r3, [sp, #0]
 800268e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002690:	2200      	movs	r2, #0
 8002692:	2180      	movs	r1, #128	; 0x80
 8002694:	68f8      	ldr	r0, [r7, #12]
 8002696:	f000 fa3f 	bl	8002b18 <I2C_WaitOnFlagUntilTimeout>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e04d      	b.n	8002740 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	2bff      	cmp	r3, #255	; 0xff
 80026ac:	d90e      	bls.n	80026cc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	22ff      	movs	r2, #255	; 0xff
 80026b2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026b8:	b2da      	uxtb	r2, r3
 80026ba:	8979      	ldrh	r1, [r7, #10]
 80026bc:	2300      	movs	r3, #0
 80026be:	9300      	str	r3, [sp, #0]
 80026c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026c4:	68f8      	ldr	r0, [r7, #12]
 80026c6:	f000 fbcf 	bl	8002e68 <I2C_TransferConfig>
 80026ca:	e00f      	b.n	80026ec <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026d0:	b29a      	uxth	r2, r3
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026da:	b2da      	uxtb	r2, r3
 80026dc:	8979      	ldrh	r1, [r7, #10]
 80026de:	2300      	movs	r3, #0
 80026e0:	9300      	str	r3, [sp, #0]
 80026e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026e6:	68f8      	ldr	r0, [r7, #12]
 80026e8:	f000 fbbe 	bl	8002e68 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d19e      	bne.n	8002634 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026f6:	697a      	ldr	r2, [r7, #20]
 80026f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80026fa:	68f8      	ldr	r0, [r7, #12]
 80026fc:	f000 fa8c 	bl	8002c18 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e01a      	b.n	8002740 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	2220      	movs	r2, #32
 8002710:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	6859      	ldr	r1, [r3, #4]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	4b0a      	ldr	r3, [pc, #40]	; (8002748 <HAL_I2C_Mem_Write+0x224>)
 800271e:	400b      	ands	r3, r1
 8002720:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2220      	movs	r2, #32
 8002726:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2200      	movs	r2, #0
 800272e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2200      	movs	r2, #0
 8002736:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800273a:	2300      	movs	r3, #0
 800273c:	e000      	b.n	8002740 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800273e:	2302      	movs	r3, #2
  }
}
 8002740:	4618      	mov	r0, r3
 8002742:	3718      	adds	r7, #24
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	fe00e800 	.word	0xfe00e800

0800274c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b088      	sub	sp, #32
 8002750:	af02      	add	r7, sp, #8
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	4608      	mov	r0, r1
 8002756:	4611      	mov	r1, r2
 8002758:	461a      	mov	r2, r3
 800275a:	4603      	mov	r3, r0
 800275c:	817b      	strh	r3, [r7, #10]
 800275e:	460b      	mov	r3, r1
 8002760:	813b      	strh	r3, [r7, #8]
 8002762:	4613      	mov	r3, r2
 8002764:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800276c:	b2db      	uxtb	r3, r3
 800276e:	2b20      	cmp	r3, #32
 8002770:	f040 80fd 	bne.w	800296e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002774:	6a3b      	ldr	r3, [r7, #32]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d002      	beq.n	8002780 <HAL_I2C_Mem_Read+0x34>
 800277a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800277c:	2b00      	cmp	r3, #0
 800277e:	d105      	bne.n	800278c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002786:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e0f1      	b.n	8002970 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002792:	2b01      	cmp	r3, #1
 8002794:	d101      	bne.n	800279a <HAL_I2C_Mem_Read+0x4e>
 8002796:	2302      	movs	r3, #2
 8002798:	e0ea      	b.n	8002970 <HAL_I2C_Mem_Read+0x224>
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2201      	movs	r2, #1
 800279e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80027a2:	f7ff fb33 	bl	8001e0c <HAL_GetTick>
 80027a6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	9300      	str	r3, [sp, #0]
 80027ac:	2319      	movs	r3, #25
 80027ae:	2201      	movs	r2, #1
 80027b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80027b4:	68f8      	ldr	r0, [r7, #12]
 80027b6:	f000 f9af 	bl	8002b18 <I2C_WaitOnFlagUntilTimeout>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d001      	beq.n	80027c4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e0d5      	b.n	8002970 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2222      	movs	r2, #34	; 0x22
 80027c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2240      	movs	r2, #64	; 0x40
 80027d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2200      	movs	r2, #0
 80027d8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	6a3a      	ldr	r2, [r7, #32]
 80027de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80027e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2200      	movs	r2, #0
 80027ea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80027ec:	88f8      	ldrh	r0, [r7, #6]
 80027ee:	893a      	ldrh	r2, [r7, #8]
 80027f0:	8979      	ldrh	r1, [r7, #10]
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	9301      	str	r3, [sp, #4]
 80027f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027f8:	9300      	str	r3, [sp, #0]
 80027fa:	4603      	mov	r3, r0
 80027fc:	68f8      	ldr	r0, [r7, #12]
 80027fe:	f000 f913 	bl	8002a28 <I2C_RequestMemoryRead>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d005      	beq.n	8002814 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2200      	movs	r2, #0
 800280c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e0ad      	b.n	8002970 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002818:	b29b      	uxth	r3, r3
 800281a:	2bff      	cmp	r3, #255	; 0xff
 800281c:	d90e      	bls.n	800283c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	22ff      	movs	r2, #255	; 0xff
 8002822:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002828:	b2da      	uxtb	r2, r3
 800282a:	8979      	ldrh	r1, [r7, #10]
 800282c:	4b52      	ldr	r3, [pc, #328]	; (8002978 <HAL_I2C_Mem_Read+0x22c>)
 800282e:	9300      	str	r3, [sp, #0]
 8002830:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002834:	68f8      	ldr	r0, [r7, #12]
 8002836:	f000 fb17 	bl	8002e68 <I2C_TransferConfig>
 800283a:	e00f      	b.n	800285c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002840:	b29a      	uxth	r2, r3
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800284a:	b2da      	uxtb	r2, r3
 800284c:	8979      	ldrh	r1, [r7, #10]
 800284e:	4b4a      	ldr	r3, [pc, #296]	; (8002978 <HAL_I2C_Mem_Read+0x22c>)
 8002850:	9300      	str	r3, [sp, #0]
 8002852:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002856:	68f8      	ldr	r0, [r7, #12]
 8002858:	f000 fb06 	bl	8002e68 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	9300      	str	r3, [sp, #0]
 8002860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002862:	2200      	movs	r2, #0
 8002864:	2104      	movs	r1, #4
 8002866:	68f8      	ldr	r0, [r7, #12]
 8002868:	f000 f956 	bl	8002b18 <I2C_WaitOnFlagUntilTimeout>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e07c      	b.n	8002970 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002880:	b2d2      	uxtb	r2, r2
 8002882:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002888:	1c5a      	adds	r2, r3, #1
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002892:	3b01      	subs	r3, #1
 8002894:	b29a      	uxth	r2, r3
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800289e:	b29b      	uxth	r3, r3
 80028a0:	3b01      	subs	r3, #1
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d034      	beq.n	800291c <HAL_I2C_Mem_Read+0x1d0>
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d130      	bne.n	800291c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	9300      	str	r3, [sp, #0]
 80028be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028c0:	2200      	movs	r2, #0
 80028c2:	2180      	movs	r1, #128	; 0x80
 80028c4:	68f8      	ldr	r0, [r7, #12]
 80028c6:	f000 f927 	bl	8002b18 <I2C_WaitOnFlagUntilTimeout>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d001      	beq.n	80028d4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e04d      	b.n	8002970 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028d8:	b29b      	uxth	r3, r3
 80028da:	2bff      	cmp	r3, #255	; 0xff
 80028dc:	d90e      	bls.n	80028fc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	22ff      	movs	r2, #255	; 0xff
 80028e2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028e8:	b2da      	uxtb	r2, r3
 80028ea:	8979      	ldrh	r1, [r7, #10]
 80028ec:	2300      	movs	r3, #0
 80028ee:	9300      	str	r3, [sp, #0]
 80028f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028f4:	68f8      	ldr	r0, [r7, #12]
 80028f6:	f000 fab7 	bl	8002e68 <I2C_TransferConfig>
 80028fa:	e00f      	b.n	800291c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002900:	b29a      	uxth	r2, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800290a:	b2da      	uxtb	r2, r3
 800290c:	8979      	ldrh	r1, [r7, #10]
 800290e:	2300      	movs	r3, #0
 8002910:	9300      	str	r3, [sp, #0]
 8002912:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002916:	68f8      	ldr	r0, [r7, #12]
 8002918:	f000 faa6 	bl	8002e68 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002920:	b29b      	uxth	r3, r3
 8002922:	2b00      	cmp	r3, #0
 8002924:	d19a      	bne.n	800285c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002926:	697a      	ldr	r2, [r7, #20]
 8002928:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800292a:	68f8      	ldr	r0, [r7, #12]
 800292c:	f000 f974 	bl	8002c18 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d001      	beq.n	800293a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e01a      	b.n	8002970 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2220      	movs	r2, #32
 8002940:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	6859      	ldr	r1, [r3, #4]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	4b0b      	ldr	r3, [pc, #44]	; (800297c <HAL_I2C_Mem_Read+0x230>)
 800294e:	400b      	ands	r3, r1
 8002950:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2220      	movs	r2, #32
 8002956:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2200      	movs	r2, #0
 8002966:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800296a:	2300      	movs	r3, #0
 800296c:	e000      	b.n	8002970 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800296e:	2302      	movs	r3, #2
  }
}
 8002970:	4618      	mov	r0, r3
 8002972:	3718      	adds	r7, #24
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	80002400 	.word	0x80002400
 800297c:	fe00e800 	.word	0xfe00e800

08002980 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b086      	sub	sp, #24
 8002984:	af02      	add	r7, sp, #8
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	4608      	mov	r0, r1
 800298a:	4611      	mov	r1, r2
 800298c:	461a      	mov	r2, r3
 800298e:	4603      	mov	r3, r0
 8002990:	817b      	strh	r3, [r7, #10]
 8002992:	460b      	mov	r3, r1
 8002994:	813b      	strh	r3, [r7, #8]
 8002996:	4613      	mov	r3, r2
 8002998:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800299a:	88fb      	ldrh	r3, [r7, #6]
 800299c:	b2da      	uxtb	r2, r3
 800299e:	8979      	ldrh	r1, [r7, #10]
 80029a0:	4b20      	ldr	r3, [pc, #128]	; (8002a24 <I2C_RequestMemoryWrite+0xa4>)
 80029a2:	9300      	str	r3, [sp, #0]
 80029a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029a8:	68f8      	ldr	r0, [r7, #12]
 80029aa:	f000 fa5d 	bl	8002e68 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029ae:	69fa      	ldr	r2, [r7, #28]
 80029b0:	69b9      	ldr	r1, [r7, #24]
 80029b2:	68f8      	ldr	r0, [r7, #12]
 80029b4:	f000 f8f0 	bl	8002b98 <I2C_WaitOnTXISFlagUntilTimeout>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d001      	beq.n	80029c2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e02c      	b.n	8002a1c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80029c2:	88fb      	ldrh	r3, [r7, #6]
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d105      	bne.n	80029d4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80029c8:	893b      	ldrh	r3, [r7, #8]
 80029ca:	b2da      	uxtb	r2, r3
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	629a      	str	r2, [r3, #40]	; 0x28
 80029d2:	e015      	b.n	8002a00 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80029d4:	893b      	ldrh	r3, [r7, #8]
 80029d6:	0a1b      	lsrs	r3, r3, #8
 80029d8:	b29b      	uxth	r3, r3
 80029da:	b2da      	uxtb	r2, r3
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029e2:	69fa      	ldr	r2, [r7, #28]
 80029e4:	69b9      	ldr	r1, [r7, #24]
 80029e6:	68f8      	ldr	r0, [r7, #12]
 80029e8:	f000 f8d6 	bl	8002b98 <I2C_WaitOnTXISFlagUntilTimeout>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d001      	beq.n	80029f6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e012      	b.n	8002a1c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80029f6:	893b      	ldrh	r3, [r7, #8]
 80029f8:	b2da      	uxtb	r2, r3
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	9300      	str	r3, [sp, #0]
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	2200      	movs	r2, #0
 8002a08:	2180      	movs	r1, #128	; 0x80
 8002a0a:	68f8      	ldr	r0, [r7, #12]
 8002a0c:	f000 f884 	bl	8002b18 <I2C_WaitOnFlagUntilTimeout>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d001      	beq.n	8002a1a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e000      	b.n	8002a1c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002a1a:	2300      	movs	r3, #0
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3710      	adds	r7, #16
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	80002000 	.word	0x80002000

08002a28 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b086      	sub	sp, #24
 8002a2c:	af02      	add	r7, sp, #8
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	4608      	mov	r0, r1
 8002a32:	4611      	mov	r1, r2
 8002a34:	461a      	mov	r2, r3
 8002a36:	4603      	mov	r3, r0
 8002a38:	817b      	strh	r3, [r7, #10]
 8002a3a:	460b      	mov	r3, r1
 8002a3c:	813b      	strh	r3, [r7, #8]
 8002a3e:	4613      	mov	r3, r2
 8002a40:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002a42:	88fb      	ldrh	r3, [r7, #6]
 8002a44:	b2da      	uxtb	r2, r3
 8002a46:	8979      	ldrh	r1, [r7, #10]
 8002a48:	4b20      	ldr	r3, [pc, #128]	; (8002acc <I2C_RequestMemoryRead+0xa4>)
 8002a4a:	9300      	str	r3, [sp, #0]
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	68f8      	ldr	r0, [r7, #12]
 8002a50:	f000 fa0a 	bl	8002e68 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a54:	69fa      	ldr	r2, [r7, #28]
 8002a56:	69b9      	ldr	r1, [r7, #24]
 8002a58:	68f8      	ldr	r0, [r7, #12]
 8002a5a:	f000 f89d 	bl	8002b98 <I2C_WaitOnTXISFlagUntilTimeout>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d001      	beq.n	8002a68 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e02c      	b.n	8002ac2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a68:	88fb      	ldrh	r3, [r7, #6]
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d105      	bne.n	8002a7a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a6e:	893b      	ldrh	r3, [r7, #8]
 8002a70:	b2da      	uxtb	r2, r3
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	629a      	str	r2, [r3, #40]	; 0x28
 8002a78:	e015      	b.n	8002aa6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002a7a:	893b      	ldrh	r3, [r7, #8]
 8002a7c:	0a1b      	lsrs	r3, r3, #8
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	b2da      	uxtb	r2, r3
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a88:	69fa      	ldr	r2, [r7, #28]
 8002a8a:	69b9      	ldr	r1, [r7, #24]
 8002a8c:	68f8      	ldr	r0, [r7, #12]
 8002a8e:	f000 f883 	bl	8002b98 <I2C_WaitOnTXISFlagUntilTimeout>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d001      	beq.n	8002a9c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e012      	b.n	8002ac2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a9c:	893b      	ldrh	r3, [r7, #8]
 8002a9e:	b2da      	uxtb	r2, r3
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	9300      	str	r3, [sp, #0]
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	2200      	movs	r2, #0
 8002aae:	2140      	movs	r1, #64	; 0x40
 8002ab0:	68f8      	ldr	r0, [r7, #12]
 8002ab2:	f000 f831 	bl	8002b18 <I2C_WaitOnFlagUntilTimeout>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d001      	beq.n	8002ac0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e000      	b.n	8002ac2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3710      	adds	r7, #16
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	80002000 	.word	0x80002000

08002ad0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	699b      	ldr	r3, [r3, #24]
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d103      	bne.n	8002aee <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2200      	movs	r2, #0
 8002aec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	699b      	ldr	r3, [r3, #24]
 8002af4:	f003 0301 	and.w	r3, r3, #1
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d007      	beq.n	8002b0c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	699a      	ldr	r2, [r3, #24]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f042 0201 	orr.w	r2, r2, #1
 8002b0a:	619a      	str	r2, [r3, #24]
  }
}
 8002b0c:	bf00      	nop
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr

08002b18 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	60b9      	str	r1, [r7, #8]
 8002b22:	603b      	str	r3, [r7, #0]
 8002b24:	4613      	mov	r3, r2
 8002b26:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b28:	e022      	b.n	8002b70 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b30:	d01e      	beq.n	8002b70 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b32:	f7ff f96b 	bl	8001e0c <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	683a      	ldr	r2, [r7, #0]
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d302      	bcc.n	8002b48 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d113      	bne.n	8002b70 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b4c:	f043 0220 	orr.w	r2, r3, #32
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2220      	movs	r2, #32
 8002b58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2200      	movs	r2, #0
 8002b68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e00f      	b.n	8002b90 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	699a      	ldr	r2, [r3, #24]
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	4013      	ands	r3, r2
 8002b7a:	68ba      	ldr	r2, [r7, #8]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	bf0c      	ite	eq
 8002b80:	2301      	moveq	r3, #1
 8002b82:	2300      	movne	r3, #0
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	461a      	mov	r2, r3
 8002b88:	79fb      	ldrb	r3, [r7, #7]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d0cd      	beq.n	8002b2a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b8e:	2300      	movs	r3, #0
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3710      	adds	r7, #16
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ba4:	e02c      	b.n	8002c00 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	68b9      	ldr	r1, [r7, #8]
 8002baa:	68f8      	ldr	r0, [r7, #12]
 8002bac:	f000 f870 	bl	8002c90 <I2C_IsErrorOccurred>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d001      	beq.n	8002bba <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e02a      	b.n	8002c10 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bc0:	d01e      	beq.n	8002c00 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bc2:	f7ff f923 	bl	8001e0c <HAL_GetTick>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	68ba      	ldr	r2, [r7, #8]
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d302      	bcc.n	8002bd8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d113      	bne.n	8002c00 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bdc:	f043 0220 	orr.w	r2, r3, #32
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2220      	movs	r2, #32
 8002be8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e007      	b.n	8002c10 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	699b      	ldr	r3, [r3, #24]
 8002c06:	f003 0302 	and.w	r3, r3, #2
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d1cb      	bne.n	8002ba6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c0e:	2300      	movs	r3, #0
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3710      	adds	r7, #16
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	60b9      	str	r1, [r7, #8]
 8002c22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c24:	e028      	b.n	8002c78 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	68b9      	ldr	r1, [r7, #8]
 8002c2a:	68f8      	ldr	r0, [r7, #12]
 8002c2c:	f000 f830 	bl	8002c90 <I2C_IsErrorOccurred>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d001      	beq.n	8002c3a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e026      	b.n	8002c88 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c3a:	f7ff f8e7 	bl	8001e0c <HAL_GetTick>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	68ba      	ldr	r2, [r7, #8]
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d302      	bcc.n	8002c50 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d113      	bne.n	8002c78 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c54:	f043 0220 	orr.w	r2, r3, #32
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2220      	movs	r2, #32
 8002c60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2200      	movs	r2, #0
 8002c68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e007      	b.n	8002c88 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	699b      	ldr	r3, [r3, #24]
 8002c7e:	f003 0320 	and.w	r3, r3, #32
 8002c82:	2b20      	cmp	r3, #32
 8002c84:	d1cf      	bne.n	8002c26 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002c86:	2300      	movs	r3, #0
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3710      	adds	r7, #16
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b08a      	sub	sp, #40	; 0x28
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	60b9      	str	r1, [r7, #8]
 8002c9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	699b      	ldr	r3, [r3, #24]
 8002ca8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002caa:	2300      	movs	r3, #0
 8002cac:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	f003 0310 	and.w	r3, r3, #16
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d075      	beq.n	8002da8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2210      	movs	r2, #16
 8002cc2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002cc4:	e056      	b.n	8002d74 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ccc:	d052      	beq.n	8002d74 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002cce:	f7ff f89d 	bl	8001e0c <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	68ba      	ldr	r2, [r7, #8]
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d302      	bcc.n	8002ce4 <I2C_IsErrorOccurred+0x54>
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d147      	bne.n	8002d74 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cee:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002cf6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	699b      	ldr	r3, [r3, #24]
 8002cfe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d06:	d12e      	bne.n	8002d66 <I2C_IsErrorOccurred+0xd6>
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d0e:	d02a      	beq.n	8002d66 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002d10:	7cfb      	ldrb	r3, [r7, #19]
 8002d12:	2b20      	cmp	r3, #32
 8002d14:	d027      	beq.n	8002d66 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	685a      	ldr	r2, [r3, #4]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d24:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002d26:	f7ff f871 	bl	8001e0c <HAL_GetTick>
 8002d2a:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d2c:	e01b      	b.n	8002d66 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002d2e:	f7ff f86d 	bl	8001e0c <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	2b19      	cmp	r3, #25
 8002d3a:	d914      	bls.n	8002d66 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d40:	f043 0220 	orr.w	r2, r3, #32
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2220      	movs	r2, #32
 8002d4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	699b      	ldr	r3, [r3, #24]
 8002d6c:	f003 0320 	and.w	r3, r3, #32
 8002d70:	2b20      	cmp	r3, #32
 8002d72:	d1dc      	bne.n	8002d2e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	699b      	ldr	r3, [r3, #24]
 8002d7a:	f003 0320 	and.w	r3, r3, #32
 8002d7e:	2b20      	cmp	r3, #32
 8002d80:	d003      	beq.n	8002d8a <I2C_IsErrorOccurred+0xfa>
 8002d82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d09d      	beq.n	8002cc6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002d8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d103      	bne.n	8002d9a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	2220      	movs	r2, #32
 8002d98:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002d9a:	6a3b      	ldr	r3, [r7, #32]
 8002d9c:	f043 0304 	orr.w	r3, r3, #4
 8002da0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	699b      	ldr	r3, [r3, #24]
 8002dae:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d00b      	beq.n	8002dd2 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002dba:	6a3b      	ldr	r3, [r7, #32]
 8002dbc:	f043 0301 	orr.w	r3, r3, #1
 8002dc0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002dca:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002dd2:	69bb      	ldr	r3, [r7, #24]
 8002dd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d00b      	beq.n	8002df4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002ddc:	6a3b      	ldr	r3, [r7, #32]
 8002dde:	f043 0308 	orr.w	r3, r3, #8
 8002de2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002dec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d00b      	beq.n	8002e16 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002dfe:	6a3b      	ldr	r3, [r7, #32]
 8002e00:	f043 0302 	orr.w	r3, r3, #2
 8002e04:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e0e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002e16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d01c      	beq.n	8002e58 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002e1e:	68f8      	ldr	r0, [r7, #12]
 8002e20:	f7ff fe56 	bl	8002ad0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	6859      	ldr	r1, [r3, #4]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	4b0d      	ldr	r3, [pc, #52]	; (8002e64 <I2C_IsErrorOccurred+0x1d4>)
 8002e30:	400b      	ands	r3, r1
 8002e32:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e38:	6a3b      	ldr	r3, [r7, #32]
 8002e3a:	431a      	orrs	r2, r3
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2220      	movs	r2, #32
 8002e44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2200      	movs	r2, #0
 8002e54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002e58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3728      	adds	r7, #40	; 0x28
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	fe00e800 	.word	0xfe00e800

08002e68 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b087      	sub	sp, #28
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	607b      	str	r3, [r7, #4]
 8002e72:	460b      	mov	r3, r1
 8002e74:	817b      	strh	r3, [r7, #10]
 8002e76:	4613      	mov	r3, r2
 8002e78:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e7a:	897b      	ldrh	r3, [r7, #10]
 8002e7c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002e80:	7a7b      	ldrb	r3, [r7, #9]
 8002e82:	041b      	lsls	r3, r3, #16
 8002e84:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e88:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e8e:	6a3b      	ldr	r3, [r7, #32]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002e96:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	685a      	ldr	r2, [r3, #4]
 8002e9e:	6a3b      	ldr	r3, [r7, #32]
 8002ea0:	0d5b      	lsrs	r3, r3, #21
 8002ea2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002ea6:	4b08      	ldr	r3, [pc, #32]	; (8002ec8 <I2C_TransferConfig+0x60>)
 8002ea8:	430b      	orrs	r3, r1
 8002eaa:	43db      	mvns	r3, r3
 8002eac:	ea02 0103 	and.w	r1, r2, r3
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	697a      	ldr	r2, [r7, #20]
 8002eb6:	430a      	orrs	r2, r1
 8002eb8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002eba:	bf00      	nop
 8002ebc:	371c      	adds	r7, #28
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	03ff63ff 	.word	0x03ff63ff

08002ecc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	2b20      	cmp	r3, #32
 8002ee0:	d138      	bne.n	8002f54 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d101      	bne.n	8002ef0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002eec:	2302      	movs	r3, #2
 8002eee:	e032      	b.n	8002f56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2224      	movs	r2, #36	; 0x24
 8002efc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f022 0201 	bic.w	r2, r2, #1
 8002f0e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002f1e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	6819      	ldr	r1, [r3, #0]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	683a      	ldr	r2, [r7, #0]
 8002f2c:	430a      	orrs	r2, r1
 8002f2e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f042 0201 	orr.w	r2, r2, #1
 8002f3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2220      	movs	r2, #32
 8002f44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f50:	2300      	movs	r3, #0
 8002f52:	e000      	b.n	8002f56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002f54:	2302      	movs	r3, #2
  }
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	370c      	adds	r7, #12
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr

08002f62 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002f62:	b480      	push	{r7}
 8002f64:	b085      	sub	sp, #20
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	6078      	str	r0, [r7, #4]
 8002f6a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	2b20      	cmp	r3, #32
 8002f76:	d139      	bne.n	8002fec <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d101      	bne.n	8002f86 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002f82:	2302      	movs	r3, #2
 8002f84:	e033      	b.n	8002fee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2201      	movs	r2, #1
 8002f8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2224      	movs	r2, #36	; 0x24
 8002f92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f022 0201 	bic.w	r2, r2, #1
 8002fa4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002fb4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	021b      	lsls	r3, r3, #8
 8002fba:	68fa      	ldr	r2, [r7, #12]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	68fa      	ldr	r2, [r7, #12]
 8002fc6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f042 0201 	orr.w	r2, r2, #1
 8002fd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2220      	movs	r2, #32
 8002fdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	e000      	b.n	8002fee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002fec:	2302      	movs	r3, #2
  }
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3714      	adds	r7, #20
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
	...

08002ffc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003000:	4b05      	ldr	r3, [pc, #20]	; (8003018 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a04      	ldr	r2, [pc, #16]	; (8003018 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003006:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800300a:	6013      	str	r3, [r2, #0]
}
 800300c:	bf00      	nop
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	40007000 	.word	0x40007000

0800301c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b086      	sub	sp, #24
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003024:	2300      	movs	r3, #0
 8003026:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d101      	bne.n	8003032 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e291      	b.n	8003556 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0301 	and.w	r3, r3, #1
 800303a:	2b00      	cmp	r3, #0
 800303c:	f000 8087 	beq.w	800314e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003040:	4b96      	ldr	r3, [pc, #600]	; (800329c <HAL_RCC_OscConfig+0x280>)
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	f003 030c 	and.w	r3, r3, #12
 8003048:	2b04      	cmp	r3, #4
 800304a:	d00c      	beq.n	8003066 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800304c:	4b93      	ldr	r3, [pc, #588]	; (800329c <HAL_RCC_OscConfig+0x280>)
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	f003 030c 	and.w	r3, r3, #12
 8003054:	2b08      	cmp	r3, #8
 8003056:	d112      	bne.n	800307e <HAL_RCC_OscConfig+0x62>
 8003058:	4b90      	ldr	r3, [pc, #576]	; (800329c <HAL_RCC_OscConfig+0x280>)
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003060:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003064:	d10b      	bne.n	800307e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003066:	4b8d      	ldr	r3, [pc, #564]	; (800329c <HAL_RCC_OscConfig+0x280>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d06c      	beq.n	800314c <HAL_RCC_OscConfig+0x130>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d168      	bne.n	800314c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e26b      	b.n	8003556 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003086:	d106      	bne.n	8003096 <HAL_RCC_OscConfig+0x7a>
 8003088:	4b84      	ldr	r3, [pc, #528]	; (800329c <HAL_RCC_OscConfig+0x280>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a83      	ldr	r2, [pc, #524]	; (800329c <HAL_RCC_OscConfig+0x280>)
 800308e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003092:	6013      	str	r3, [r2, #0]
 8003094:	e02e      	b.n	80030f4 <HAL_RCC_OscConfig+0xd8>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d10c      	bne.n	80030b8 <HAL_RCC_OscConfig+0x9c>
 800309e:	4b7f      	ldr	r3, [pc, #508]	; (800329c <HAL_RCC_OscConfig+0x280>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a7e      	ldr	r2, [pc, #504]	; (800329c <HAL_RCC_OscConfig+0x280>)
 80030a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030a8:	6013      	str	r3, [r2, #0]
 80030aa:	4b7c      	ldr	r3, [pc, #496]	; (800329c <HAL_RCC_OscConfig+0x280>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a7b      	ldr	r2, [pc, #492]	; (800329c <HAL_RCC_OscConfig+0x280>)
 80030b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030b4:	6013      	str	r3, [r2, #0]
 80030b6:	e01d      	b.n	80030f4 <HAL_RCC_OscConfig+0xd8>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030c0:	d10c      	bne.n	80030dc <HAL_RCC_OscConfig+0xc0>
 80030c2:	4b76      	ldr	r3, [pc, #472]	; (800329c <HAL_RCC_OscConfig+0x280>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a75      	ldr	r2, [pc, #468]	; (800329c <HAL_RCC_OscConfig+0x280>)
 80030c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030cc:	6013      	str	r3, [r2, #0]
 80030ce:	4b73      	ldr	r3, [pc, #460]	; (800329c <HAL_RCC_OscConfig+0x280>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a72      	ldr	r2, [pc, #456]	; (800329c <HAL_RCC_OscConfig+0x280>)
 80030d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030d8:	6013      	str	r3, [r2, #0]
 80030da:	e00b      	b.n	80030f4 <HAL_RCC_OscConfig+0xd8>
 80030dc:	4b6f      	ldr	r3, [pc, #444]	; (800329c <HAL_RCC_OscConfig+0x280>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a6e      	ldr	r2, [pc, #440]	; (800329c <HAL_RCC_OscConfig+0x280>)
 80030e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030e6:	6013      	str	r3, [r2, #0]
 80030e8:	4b6c      	ldr	r3, [pc, #432]	; (800329c <HAL_RCC_OscConfig+0x280>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a6b      	ldr	r2, [pc, #428]	; (800329c <HAL_RCC_OscConfig+0x280>)
 80030ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d013      	beq.n	8003124 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030fc:	f7fe fe86 	bl	8001e0c <HAL_GetTick>
 8003100:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003102:	e008      	b.n	8003116 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003104:	f7fe fe82 	bl	8001e0c <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	2b64      	cmp	r3, #100	; 0x64
 8003110:	d901      	bls.n	8003116 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e21f      	b.n	8003556 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003116:	4b61      	ldr	r3, [pc, #388]	; (800329c <HAL_RCC_OscConfig+0x280>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d0f0      	beq.n	8003104 <HAL_RCC_OscConfig+0xe8>
 8003122:	e014      	b.n	800314e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003124:	f7fe fe72 	bl	8001e0c <HAL_GetTick>
 8003128:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800312a:	e008      	b.n	800313e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800312c:	f7fe fe6e 	bl	8001e0c <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	2b64      	cmp	r3, #100	; 0x64
 8003138:	d901      	bls.n	800313e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e20b      	b.n	8003556 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800313e:	4b57      	ldr	r3, [pc, #348]	; (800329c <HAL_RCC_OscConfig+0x280>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d1f0      	bne.n	800312c <HAL_RCC_OscConfig+0x110>
 800314a:	e000      	b.n	800314e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800314c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0302 	and.w	r3, r3, #2
 8003156:	2b00      	cmp	r3, #0
 8003158:	d069      	beq.n	800322e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800315a:	4b50      	ldr	r3, [pc, #320]	; (800329c <HAL_RCC_OscConfig+0x280>)
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f003 030c 	and.w	r3, r3, #12
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00b      	beq.n	800317e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003166:	4b4d      	ldr	r3, [pc, #308]	; (800329c <HAL_RCC_OscConfig+0x280>)
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f003 030c 	and.w	r3, r3, #12
 800316e:	2b08      	cmp	r3, #8
 8003170:	d11c      	bne.n	80031ac <HAL_RCC_OscConfig+0x190>
 8003172:	4b4a      	ldr	r3, [pc, #296]	; (800329c <HAL_RCC_OscConfig+0x280>)
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d116      	bne.n	80031ac <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800317e:	4b47      	ldr	r3, [pc, #284]	; (800329c <HAL_RCC_OscConfig+0x280>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0302 	and.w	r3, r3, #2
 8003186:	2b00      	cmp	r3, #0
 8003188:	d005      	beq.n	8003196 <HAL_RCC_OscConfig+0x17a>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	2b01      	cmp	r3, #1
 8003190:	d001      	beq.n	8003196 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e1df      	b.n	8003556 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003196:	4b41      	ldr	r3, [pc, #260]	; (800329c <HAL_RCC_OscConfig+0x280>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	00db      	lsls	r3, r3, #3
 80031a4:	493d      	ldr	r1, [pc, #244]	; (800329c <HAL_RCC_OscConfig+0x280>)
 80031a6:	4313      	orrs	r3, r2
 80031a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031aa:	e040      	b.n	800322e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d023      	beq.n	80031fc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031b4:	4b39      	ldr	r3, [pc, #228]	; (800329c <HAL_RCC_OscConfig+0x280>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a38      	ldr	r2, [pc, #224]	; (800329c <HAL_RCC_OscConfig+0x280>)
 80031ba:	f043 0301 	orr.w	r3, r3, #1
 80031be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c0:	f7fe fe24 	bl	8001e0c <HAL_GetTick>
 80031c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031c6:	e008      	b.n	80031da <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031c8:	f7fe fe20 	bl	8001e0c <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d901      	bls.n	80031da <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e1bd      	b.n	8003556 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031da:	4b30      	ldr	r3, [pc, #192]	; (800329c <HAL_RCC_OscConfig+0x280>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0302 	and.w	r3, r3, #2
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d0f0      	beq.n	80031c8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031e6:	4b2d      	ldr	r3, [pc, #180]	; (800329c <HAL_RCC_OscConfig+0x280>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	00db      	lsls	r3, r3, #3
 80031f4:	4929      	ldr	r1, [pc, #164]	; (800329c <HAL_RCC_OscConfig+0x280>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	600b      	str	r3, [r1, #0]
 80031fa:	e018      	b.n	800322e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031fc:	4b27      	ldr	r3, [pc, #156]	; (800329c <HAL_RCC_OscConfig+0x280>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a26      	ldr	r2, [pc, #152]	; (800329c <HAL_RCC_OscConfig+0x280>)
 8003202:	f023 0301 	bic.w	r3, r3, #1
 8003206:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003208:	f7fe fe00 	bl	8001e0c <HAL_GetTick>
 800320c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800320e:	e008      	b.n	8003222 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003210:	f7fe fdfc 	bl	8001e0c <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b02      	cmp	r3, #2
 800321c:	d901      	bls.n	8003222 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e199      	b.n	8003556 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003222:	4b1e      	ldr	r3, [pc, #120]	; (800329c <HAL_RCC_OscConfig+0x280>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0302 	and.w	r3, r3, #2
 800322a:	2b00      	cmp	r3, #0
 800322c:	d1f0      	bne.n	8003210 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0308 	and.w	r3, r3, #8
 8003236:	2b00      	cmp	r3, #0
 8003238:	d038      	beq.n	80032ac <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	695b      	ldr	r3, [r3, #20]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d019      	beq.n	8003276 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003242:	4b16      	ldr	r3, [pc, #88]	; (800329c <HAL_RCC_OscConfig+0x280>)
 8003244:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003246:	4a15      	ldr	r2, [pc, #84]	; (800329c <HAL_RCC_OscConfig+0x280>)
 8003248:	f043 0301 	orr.w	r3, r3, #1
 800324c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800324e:	f7fe fddd 	bl	8001e0c <HAL_GetTick>
 8003252:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003254:	e008      	b.n	8003268 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003256:	f7fe fdd9 	bl	8001e0c <HAL_GetTick>
 800325a:	4602      	mov	r2, r0
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	2b02      	cmp	r3, #2
 8003262:	d901      	bls.n	8003268 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	e176      	b.n	8003556 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003268:	4b0c      	ldr	r3, [pc, #48]	; (800329c <HAL_RCC_OscConfig+0x280>)
 800326a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800326c:	f003 0302 	and.w	r3, r3, #2
 8003270:	2b00      	cmp	r3, #0
 8003272:	d0f0      	beq.n	8003256 <HAL_RCC_OscConfig+0x23a>
 8003274:	e01a      	b.n	80032ac <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003276:	4b09      	ldr	r3, [pc, #36]	; (800329c <HAL_RCC_OscConfig+0x280>)
 8003278:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800327a:	4a08      	ldr	r2, [pc, #32]	; (800329c <HAL_RCC_OscConfig+0x280>)
 800327c:	f023 0301 	bic.w	r3, r3, #1
 8003280:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003282:	f7fe fdc3 	bl	8001e0c <HAL_GetTick>
 8003286:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003288:	e00a      	b.n	80032a0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800328a:	f7fe fdbf 	bl	8001e0c <HAL_GetTick>
 800328e:	4602      	mov	r2, r0
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	2b02      	cmp	r3, #2
 8003296:	d903      	bls.n	80032a0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	e15c      	b.n	8003556 <HAL_RCC_OscConfig+0x53a>
 800329c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032a0:	4b91      	ldr	r3, [pc, #580]	; (80034e8 <HAL_RCC_OscConfig+0x4cc>)
 80032a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032a4:	f003 0302 	and.w	r3, r3, #2
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d1ee      	bne.n	800328a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0304 	and.w	r3, r3, #4
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	f000 80a4 	beq.w	8003402 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032ba:	4b8b      	ldr	r3, [pc, #556]	; (80034e8 <HAL_RCC_OscConfig+0x4cc>)
 80032bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d10d      	bne.n	80032e2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80032c6:	4b88      	ldr	r3, [pc, #544]	; (80034e8 <HAL_RCC_OscConfig+0x4cc>)
 80032c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ca:	4a87      	ldr	r2, [pc, #540]	; (80034e8 <HAL_RCC_OscConfig+0x4cc>)
 80032cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032d0:	6413      	str	r3, [r2, #64]	; 0x40
 80032d2:	4b85      	ldr	r3, [pc, #532]	; (80034e8 <HAL_RCC_OscConfig+0x4cc>)
 80032d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032da:	60bb      	str	r3, [r7, #8]
 80032dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032de:	2301      	movs	r3, #1
 80032e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032e2:	4b82      	ldr	r3, [pc, #520]	; (80034ec <HAL_RCC_OscConfig+0x4d0>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d118      	bne.n	8003320 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80032ee:	4b7f      	ldr	r3, [pc, #508]	; (80034ec <HAL_RCC_OscConfig+0x4d0>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a7e      	ldr	r2, [pc, #504]	; (80034ec <HAL_RCC_OscConfig+0x4d0>)
 80032f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032fa:	f7fe fd87 	bl	8001e0c <HAL_GetTick>
 80032fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003300:	e008      	b.n	8003314 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003302:	f7fe fd83 	bl	8001e0c <HAL_GetTick>
 8003306:	4602      	mov	r2, r0
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	2b64      	cmp	r3, #100	; 0x64
 800330e:	d901      	bls.n	8003314 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003310:	2303      	movs	r3, #3
 8003312:	e120      	b.n	8003556 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003314:	4b75      	ldr	r3, [pc, #468]	; (80034ec <HAL_RCC_OscConfig+0x4d0>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800331c:	2b00      	cmp	r3, #0
 800331e:	d0f0      	beq.n	8003302 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	2b01      	cmp	r3, #1
 8003326:	d106      	bne.n	8003336 <HAL_RCC_OscConfig+0x31a>
 8003328:	4b6f      	ldr	r3, [pc, #444]	; (80034e8 <HAL_RCC_OscConfig+0x4cc>)
 800332a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800332c:	4a6e      	ldr	r2, [pc, #440]	; (80034e8 <HAL_RCC_OscConfig+0x4cc>)
 800332e:	f043 0301 	orr.w	r3, r3, #1
 8003332:	6713      	str	r3, [r2, #112]	; 0x70
 8003334:	e02d      	b.n	8003392 <HAL_RCC_OscConfig+0x376>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d10c      	bne.n	8003358 <HAL_RCC_OscConfig+0x33c>
 800333e:	4b6a      	ldr	r3, [pc, #424]	; (80034e8 <HAL_RCC_OscConfig+0x4cc>)
 8003340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003342:	4a69      	ldr	r2, [pc, #420]	; (80034e8 <HAL_RCC_OscConfig+0x4cc>)
 8003344:	f023 0301 	bic.w	r3, r3, #1
 8003348:	6713      	str	r3, [r2, #112]	; 0x70
 800334a:	4b67      	ldr	r3, [pc, #412]	; (80034e8 <HAL_RCC_OscConfig+0x4cc>)
 800334c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800334e:	4a66      	ldr	r2, [pc, #408]	; (80034e8 <HAL_RCC_OscConfig+0x4cc>)
 8003350:	f023 0304 	bic.w	r3, r3, #4
 8003354:	6713      	str	r3, [r2, #112]	; 0x70
 8003356:	e01c      	b.n	8003392 <HAL_RCC_OscConfig+0x376>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	2b05      	cmp	r3, #5
 800335e:	d10c      	bne.n	800337a <HAL_RCC_OscConfig+0x35e>
 8003360:	4b61      	ldr	r3, [pc, #388]	; (80034e8 <HAL_RCC_OscConfig+0x4cc>)
 8003362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003364:	4a60      	ldr	r2, [pc, #384]	; (80034e8 <HAL_RCC_OscConfig+0x4cc>)
 8003366:	f043 0304 	orr.w	r3, r3, #4
 800336a:	6713      	str	r3, [r2, #112]	; 0x70
 800336c:	4b5e      	ldr	r3, [pc, #376]	; (80034e8 <HAL_RCC_OscConfig+0x4cc>)
 800336e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003370:	4a5d      	ldr	r2, [pc, #372]	; (80034e8 <HAL_RCC_OscConfig+0x4cc>)
 8003372:	f043 0301 	orr.w	r3, r3, #1
 8003376:	6713      	str	r3, [r2, #112]	; 0x70
 8003378:	e00b      	b.n	8003392 <HAL_RCC_OscConfig+0x376>
 800337a:	4b5b      	ldr	r3, [pc, #364]	; (80034e8 <HAL_RCC_OscConfig+0x4cc>)
 800337c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800337e:	4a5a      	ldr	r2, [pc, #360]	; (80034e8 <HAL_RCC_OscConfig+0x4cc>)
 8003380:	f023 0301 	bic.w	r3, r3, #1
 8003384:	6713      	str	r3, [r2, #112]	; 0x70
 8003386:	4b58      	ldr	r3, [pc, #352]	; (80034e8 <HAL_RCC_OscConfig+0x4cc>)
 8003388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800338a:	4a57      	ldr	r2, [pc, #348]	; (80034e8 <HAL_RCC_OscConfig+0x4cc>)
 800338c:	f023 0304 	bic.w	r3, r3, #4
 8003390:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d015      	beq.n	80033c6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800339a:	f7fe fd37 	bl	8001e0c <HAL_GetTick>
 800339e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033a0:	e00a      	b.n	80033b8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033a2:	f7fe fd33 	bl	8001e0c <HAL_GetTick>
 80033a6:	4602      	mov	r2, r0
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d901      	bls.n	80033b8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80033b4:	2303      	movs	r3, #3
 80033b6:	e0ce      	b.n	8003556 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033b8:	4b4b      	ldr	r3, [pc, #300]	; (80034e8 <HAL_RCC_OscConfig+0x4cc>)
 80033ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033bc:	f003 0302 	and.w	r3, r3, #2
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d0ee      	beq.n	80033a2 <HAL_RCC_OscConfig+0x386>
 80033c4:	e014      	b.n	80033f0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033c6:	f7fe fd21 	bl	8001e0c <HAL_GetTick>
 80033ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033cc:	e00a      	b.n	80033e4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033ce:	f7fe fd1d 	bl	8001e0c <HAL_GetTick>
 80033d2:	4602      	mov	r2, r0
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80033dc:	4293      	cmp	r3, r2
 80033de:	d901      	bls.n	80033e4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80033e0:	2303      	movs	r3, #3
 80033e2:	e0b8      	b.n	8003556 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033e4:	4b40      	ldr	r3, [pc, #256]	; (80034e8 <HAL_RCC_OscConfig+0x4cc>)
 80033e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e8:	f003 0302 	and.w	r3, r3, #2
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d1ee      	bne.n	80033ce <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80033f0:	7dfb      	ldrb	r3, [r7, #23]
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d105      	bne.n	8003402 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033f6:	4b3c      	ldr	r3, [pc, #240]	; (80034e8 <HAL_RCC_OscConfig+0x4cc>)
 80033f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fa:	4a3b      	ldr	r2, [pc, #236]	; (80034e8 <HAL_RCC_OscConfig+0x4cc>)
 80033fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003400:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	699b      	ldr	r3, [r3, #24]
 8003406:	2b00      	cmp	r3, #0
 8003408:	f000 80a4 	beq.w	8003554 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800340c:	4b36      	ldr	r3, [pc, #216]	; (80034e8 <HAL_RCC_OscConfig+0x4cc>)
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	f003 030c 	and.w	r3, r3, #12
 8003414:	2b08      	cmp	r3, #8
 8003416:	d06b      	beq.n	80034f0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	699b      	ldr	r3, [r3, #24]
 800341c:	2b02      	cmp	r3, #2
 800341e:	d149      	bne.n	80034b4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003420:	4b31      	ldr	r3, [pc, #196]	; (80034e8 <HAL_RCC_OscConfig+0x4cc>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a30      	ldr	r2, [pc, #192]	; (80034e8 <HAL_RCC_OscConfig+0x4cc>)
 8003426:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800342a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800342c:	f7fe fcee 	bl	8001e0c <HAL_GetTick>
 8003430:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003432:	e008      	b.n	8003446 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003434:	f7fe fcea 	bl	8001e0c <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	2b02      	cmp	r3, #2
 8003440:	d901      	bls.n	8003446 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e087      	b.n	8003556 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003446:	4b28      	ldr	r3, [pc, #160]	; (80034e8 <HAL_RCC_OscConfig+0x4cc>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d1f0      	bne.n	8003434 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	69da      	ldr	r2, [r3, #28]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a1b      	ldr	r3, [r3, #32]
 800345a:	431a      	orrs	r2, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003460:	019b      	lsls	r3, r3, #6
 8003462:	431a      	orrs	r2, r3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003468:	085b      	lsrs	r3, r3, #1
 800346a:	3b01      	subs	r3, #1
 800346c:	041b      	lsls	r3, r3, #16
 800346e:	431a      	orrs	r2, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003474:	061b      	lsls	r3, r3, #24
 8003476:	4313      	orrs	r3, r2
 8003478:	4a1b      	ldr	r2, [pc, #108]	; (80034e8 <HAL_RCC_OscConfig+0x4cc>)
 800347a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800347e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003480:	4b19      	ldr	r3, [pc, #100]	; (80034e8 <HAL_RCC_OscConfig+0x4cc>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a18      	ldr	r2, [pc, #96]	; (80034e8 <HAL_RCC_OscConfig+0x4cc>)
 8003486:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800348a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800348c:	f7fe fcbe 	bl	8001e0c <HAL_GetTick>
 8003490:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003492:	e008      	b.n	80034a6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003494:	f7fe fcba 	bl	8001e0c <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d901      	bls.n	80034a6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e057      	b.n	8003556 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034a6:	4b10      	ldr	r3, [pc, #64]	; (80034e8 <HAL_RCC_OscConfig+0x4cc>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d0f0      	beq.n	8003494 <HAL_RCC_OscConfig+0x478>
 80034b2:	e04f      	b.n	8003554 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034b4:	4b0c      	ldr	r3, [pc, #48]	; (80034e8 <HAL_RCC_OscConfig+0x4cc>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a0b      	ldr	r2, [pc, #44]	; (80034e8 <HAL_RCC_OscConfig+0x4cc>)
 80034ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c0:	f7fe fca4 	bl	8001e0c <HAL_GetTick>
 80034c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034c6:	e008      	b.n	80034da <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034c8:	f7fe fca0 	bl	8001e0c <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d901      	bls.n	80034da <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e03d      	b.n	8003556 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034da:	4b03      	ldr	r3, [pc, #12]	; (80034e8 <HAL_RCC_OscConfig+0x4cc>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d1f0      	bne.n	80034c8 <HAL_RCC_OscConfig+0x4ac>
 80034e6:	e035      	b.n	8003554 <HAL_RCC_OscConfig+0x538>
 80034e8:	40023800 	.word	0x40023800
 80034ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80034f0:	4b1b      	ldr	r3, [pc, #108]	; (8003560 <HAL_RCC_OscConfig+0x544>)
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	699b      	ldr	r3, [r3, #24]
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d028      	beq.n	8003550 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003508:	429a      	cmp	r2, r3
 800350a:	d121      	bne.n	8003550 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003516:	429a      	cmp	r2, r3
 8003518:	d11a      	bne.n	8003550 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800351a:	68fa      	ldr	r2, [r7, #12]
 800351c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003520:	4013      	ands	r3, r2
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003526:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003528:	4293      	cmp	r3, r2
 800352a:	d111      	bne.n	8003550 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003536:	085b      	lsrs	r3, r3, #1
 8003538:	3b01      	subs	r3, #1
 800353a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800353c:	429a      	cmp	r2, r3
 800353e:	d107      	bne.n	8003550 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800354a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800354c:	429a      	cmp	r2, r3
 800354e:	d001      	beq.n	8003554 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e000      	b.n	8003556 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3718      	adds	r7, #24
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	40023800 	.word	0x40023800

08003564 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800356e:	2300      	movs	r3, #0
 8003570:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d101      	bne.n	800357c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e0d0      	b.n	800371e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800357c:	4b6a      	ldr	r3, [pc, #424]	; (8003728 <HAL_RCC_ClockConfig+0x1c4>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 030f 	and.w	r3, r3, #15
 8003584:	683a      	ldr	r2, [r7, #0]
 8003586:	429a      	cmp	r2, r3
 8003588:	d910      	bls.n	80035ac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800358a:	4b67      	ldr	r3, [pc, #412]	; (8003728 <HAL_RCC_ClockConfig+0x1c4>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f023 020f 	bic.w	r2, r3, #15
 8003592:	4965      	ldr	r1, [pc, #404]	; (8003728 <HAL_RCC_ClockConfig+0x1c4>)
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	4313      	orrs	r3, r2
 8003598:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800359a:	4b63      	ldr	r3, [pc, #396]	; (8003728 <HAL_RCC_ClockConfig+0x1c4>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 030f 	and.w	r3, r3, #15
 80035a2:	683a      	ldr	r2, [r7, #0]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d001      	beq.n	80035ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e0b8      	b.n	800371e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0302 	and.w	r3, r3, #2
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d020      	beq.n	80035fa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0304 	and.w	r3, r3, #4
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d005      	beq.n	80035d0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035c4:	4b59      	ldr	r3, [pc, #356]	; (800372c <HAL_RCC_ClockConfig+0x1c8>)
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	4a58      	ldr	r2, [pc, #352]	; (800372c <HAL_RCC_ClockConfig+0x1c8>)
 80035ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80035ce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0308 	and.w	r3, r3, #8
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d005      	beq.n	80035e8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035dc:	4b53      	ldr	r3, [pc, #332]	; (800372c <HAL_RCC_ClockConfig+0x1c8>)
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	4a52      	ldr	r2, [pc, #328]	; (800372c <HAL_RCC_ClockConfig+0x1c8>)
 80035e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80035e6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035e8:	4b50      	ldr	r3, [pc, #320]	; (800372c <HAL_RCC_ClockConfig+0x1c8>)
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	494d      	ldr	r1, [pc, #308]	; (800372c <HAL_RCC_ClockConfig+0x1c8>)
 80035f6:	4313      	orrs	r3, r2
 80035f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0301 	and.w	r3, r3, #1
 8003602:	2b00      	cmp	r3, #0
 8003604:	d040      	beq.n	8003688 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	2b01      	cmp	r3, #1
 800360c:	d107      	bne.n	800361e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800360e:	4b47      	ldr	r3, [pc, #284]	; (800372c <HAL_RCC_ClockConfig+0x1c8>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d115      	bne.n	8003646 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e07f      	b.n	800371e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	2b02      	cmp	r3, #2
 8003624:	d107      	bne.n	8003636 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003626:	4b41      	ldr	r3, [pc, #260]	; (800372c <HAL_RCC_ClockConfig+0x1c8>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d109      	bne.n	8003646 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e073      	b.n	800371e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003636:	4b3d      	ldr	r3, [pc, #244]	; (800372c <HAL_RCC_ClockConfig+0x1c8>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0302 	and.w	r3, r3, #2
 800363e:	2b00      	cmp	r3, #0
 8003640:	d101      	bne.n	8003646 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e06b      	b.n	800371e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003646:	4b39      	ldr	r3, [pc, #228]	; (800372c <HAL_RCC_ClockConfig+0x1c8>)
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f023 0203 	bic.w	r2, r3, #3
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	4936      	ldr	r1, [pc, #216]	; (800372c <HAL_RCC_ClockConfig+0x1c8>)
 8003654:	4313      	orrs	r3, r2
 8003656:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003658:	f7fe fbd8 	bl	8001e0c <HAL_GetTick>
 800365c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800365e:	e00a      	b.n	8003676 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003660:	f7fe fbd4 	bl	8001e0c <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	f241 3288 	movw	r2, #5000	; 0x1388
 800366e:	4293      	cmp	r3, r2
 8003670:	d901      	bls.n	8003676 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e053      	b.n	800371e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003676:	4b2d      	ldr	r3, [pc, #180]	; (800372c <HAL_RCC_ClockConfig+0x1c8>)
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f003 020c 	and.w	r2, r3, #12
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	429a      	cmp	r2, r3
 8003686:	d1eb      	bne.n	8003660 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003688:	4b27      	ldr	r3, [pc, #156]	; (8003728 <HAL_RCC_ClockConfig+0x1c4>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 030f 	and.w	r3, r3, #15
 8003690:	683a      	ldr	r2, [r7, #0]
 8003692:	429a      	cmp	r2, r3
 8003694:	d210      	bcs.n	80036b8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003696:	4b24      	ldr	r3, [pc, #144]	; (8003728 <HAL_RCC_ClockConfig+0x1c4>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f023 020f 	bic.w	r2, r3, #15
 800369e:	4922      	ldr	r1, [pc, #136]	; (8003728 <HAL_RCC_ClockConfig+0x1c4>)
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036a6:	4b20      	ldr	r3, [pc, #128]	; (8003728 <HAL_RCC_ClockConfig+0x1c4>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 030f 	and.w	r3, r3, #15
 80036ae:	683a      	ldr	r2, [r7, #0]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d001      	beq.n	80036b8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e032      	b.n	800371e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0304 	and.w	r3, r3, #4
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d008      	beq.n	80036d6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036c4:	4b19      	ldr	r3, [pc, #100]	; (800372c <HAL_RCC_ClockConfig+0x1c8>)
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	4916      	ldr	r1, [pc, #88]	; (800372c <HAL_RCC_ClockConfig+0x1c8>)
 80036d2:	4313      	orrs	r3, r2
 80036d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0308 	and.w	r3, r3, #8
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d009      	beq.n	80036f6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80036e2:	4b12      	ldr	r3, [pc, #72]	; (800372c <HAL_RCC_ClockConfig+0x1c8>)
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	691b      	ldr	r3, [r3, #16]
 80036ee:	00db      	lsls	r3, r3, #3
 80036f0:	490e      	ldr	r1, [pc, #56]	; (800372c <HAL_RCC_ClockConfig+0x1c8>)
 80036f2:	4313      	orrs	r3, r2
 80036f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80036f6:	f000 f821 	bl	800373c <HAL_RCC_GetSysClockFreq>
 80036fa:	4602      	mov	r2, r0
 80036fc:	4b0b      	ldr	r3, [pc, #44]	; (800372c <HAL_RCC_ClockConfig+0x1c8>)
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	091b      	lsrs	r3, r3, #4
 8003702:	f003 030f 	and.w	r3, r3, #15
 8003706:	490a      	ldr	r1, [pc, #40]	; (8003730 <HAL_RCC_ClockConfig+0x1cc>)
 8003708:	5ccb      	ldrb	r3, [r1, r3]
 800370a:	fa22 f303 	lsr.w	r3, r2, r3
 800370e:	4a09      	ldr	r2, [pc, #36]	; (8003734 <HAL_RCC_ClockConfig+0x1d0>)
 8003710:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003712:	4b09      	ldr	r3, [pc, #36]	; (8003738 <HAL_RCC_ClockConfig+0x1d4>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4618      	mov	r0, r3
 8003718:	f7fe fb34 	bl	8001d84 <HAL_InitTick>

  return HAL_OK;
 800371c:	2300      	movs	r3, #0
}
 800371e:	4618      	mov	r0, r3
 8003720:	3710      	adds	r7, #16
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	40023c00 	.word	0x40023c00
 800372c:	40023800 	.word	0x40023800
 8003730:	080061ac 	.word	0x080061ac
 8003734:	2000005c 	.word	0x2000005c
 8003738:	20000060 	.word	0x20000060

0800373c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800373c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003740:	b094      	sub	sp, #80	; 0x50
 8003742:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003744:	2300      	movs	r3, #0
 8003746:	647b      	str	r3, [r7, #68]	; 0x44
 8003748:	2300      	movs	r3, #0
 800374a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800374c:	2300      	movs	r3, #0
 800374e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003750:	2300      	movs	r3, #0
 8003752:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003754:	4b79      	ldr	r3, [pc, #484]	; (800393c <HAL_RCC_GetSysClockFreq+0x200>)
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f003 030c 	and.w	r3, r3, #12
 800375c:	2b08      	cmp	r3, #8
 800375e:	d00d      	beq.n	800377c <HAL_RCC_GetSysClockFreq+0x40>
 8003760:	2b08      	cmp	r3, #8
 8003762:	f200 80e1 	bhi.w	8003928 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003766:	2b00      	cmp	r3, #0
 8003768:	d002      	beq.n	8003770 <HAL_RCC_GetSysClockFreq+0x34>
 800376a:	2b04      	cmp	r3, #4
 800376c:	d003      	beq.n	8003776 <HAL_RCC_GetSysClockFreq+0x3a>
 800376e:	e0db      	b.n	8003928 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003770:	4b73      	ldr	r3, [pc, #460]	; (8003940 <HAL_RCC_GetSysClockFreq+0x204>)
 8003772:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003774:	e0db      	b.n	800392e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003776:	4b73      	ldr	r3, [pc, #460]	; (8003944 <HAL_RCC_GetSysClockFreq+0x208>)
 8003778:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800377a:	e0d8      	b.n	800392e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800377c:	4b6f      	ldr	r3, [pc, #444]	; (800393c <HAL_RCC_GetSysClockFreq+0x200>)
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003784:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003786:	4b6d      	ldr	r3, [pc, #436]	; (800393c <HAL_RCC_GetSysClockFreq+0x200>)
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d063      	beq.n	800385a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003792:	4b6a      	ldr	r3, [pc, #424]	; (800393c <HAL_RCC_GetSysClockFreq+0x200>)
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	099b      	lsrs	r3, r3, #6
 8003798:	2200      	movs	r2, #0
 800379a:	63bb      	str	r3, [r7, #56]	; 0x38
 800379c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800379e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037a4:	633b      	str	r3, [r7, #48]	; 0x30
 80037a6:	2300      	movs	r3, #0
 80037a8:	637b      	str	r3, [r7, #52]	; 0x34
 80037aa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80037ae:	4622      	mov	r2, r4
 80037b0:	462b      	mov	r3, r5
 80037b2:	f04f 0000 	mov.w	r0, #0
 80037b6:	f04f 0100 	mov.w	r1, #0
 80037ba:	0159      	lsls	r1, r3, #5
 80037bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037c0:	0150      	lsls	r0, r2, #5
 80037c2:	4602      	mov	r2, r0
 80037c4:	460b      	mov	r3, r1
 80037c6:	4621      	mov	r1, r4
 80037c8:	1a51      	subs	r1, r2, r1
 80037ca:	6139      	str	r1, [r7, #16]
 80037cc:	4629      	mov	r1, r5
 80037ce:	eb63 0301 	sbc.w	r3, r3, r1
 80037d2:	617b      	str	r3, [r7, #20]
 80037d4:	f04f 0200 	mov.w	r2, #0
 80037d8:	f04f 0300 	mov.w	r3, #0
 80037dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80037e0:	4659      	mov	r1, fp
 80037e2:	018b      	lsls	r3, r1, #6
 80037e4:	4651      	mov	r1, sl
 80037e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80037ea:	4651      	mov	r1, sl
 80037ec:	018a      	lsls	r2, r1, #6
 80037ee:	4651      	mov	r1, sl
 80037f0:	ebb2 0801 	subs.w	r8, r2, r1
 80037f4:	4659      	mov	r1, fp
 80037f6:	eb63 0901 	sbc.w	r9, r3, r1
 80037fa:	f04f 0200 	mov.w	r2, #0
 80037fe:	f04f 0300 	mov.w	r3, #0
 8003802:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003806:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800380a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800380e:	4690      	mov	r8, r2
 8003810:	4699      	mov	r9, r3
 8003812:	4623      	mov	r3, r4
 8003814:	eb18 0303 	adds.w	r3, r8, r3
 8003818:	60bb      	str	r3, [r7, #8]
 800381a:	462b      	mov	r3, r5
 800381c:	eb49 0303 	adc.w	r3, r9, r3
 8003820:	60fb      	str	r3, [r7, #12]
 8003822:	f04f 0200 	mov.w	r2, #0
 8003826:	f04f 0300 	mov.w	r3, #0
 800382a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800382e:	4629      	mov	r1, r5
 8003830:	024b      	lsls	r3, r1, #9
 8003832:	4621      	mov	r1, r4
 8003834:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003838:	4621      	mov	r1, r4
 800383a:	024a      	lsls	r2, r1, #9
 800383c:	4610      	mov	r0, r2
 800383e:	4619      	mov	r1, r3
 8003840:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003842:	2200      	movs	r2, #0
 8003844:	62bb      	str	r3, [r7, #40]	; 0x28
 8003846:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003848:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800384c:	f7fc fec0 	bl	80005d0 <__aeabi_uldivmod>
 8003850:	4602      	mov	r2, r0
 8003852:	460b      	mov	r3, r1
 8003854:	4613      	mov	r3, r2
 8003856:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003858:	e058      	b.n	800390c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800385a:	4b38      	ldr	r3, [pc, #224]	; (800393c <HAL_RCC_GetSysClockFreq+0x200>)
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	099b      	lsrs	r3, r3, #6
 8003860:	2200      	movs	r2, #0
 8003862:	4618      	mov	r0, r3
 8003864:	4611      	mov	r1, r2
 8003866:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800386a:	623b      	str	r3, [r7, #32]
 800386c:	2300      	movs	r3, #0
 800386e:	627b      	str	r3, [r7, #36]	; 0x24
 8003870:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003874:	4642      	mov	r2, r8
 8003876:	464b      	mov	r3, r9
 8003878:	f04f 0000 	mov.w	r0, #0
 800387c:	f04f 0100 	mov.w	r1, #0
 8003880:	0159      	lsls	r1, r3, #5
 8003882:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003886:	0150      	lsls	r0, r2, #5
 8003888:	4602      	mov	r2, r0
 800388a:	460b      	mov	r3, r1
 800388c:	4641      	mov	r1, r8
 800388e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003892:	4649      	mov	r1, r9
 8003894:	eb63 0b01 	sbc.w	fp, r3, r1
 8003898:	f04f 0200 	mov.w	r2, #0
 800389c:	f04f 0300 	mov.w	r3, #0
 80038a0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80038a4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80038a8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80038ac:	ebb2 040a 	subs.w	r4, r2, sl
 80038b0:	eb63 050b 	sbc.w	r5, r3, fp
 80038b4:	f04f 0200 	mov.w	r2, #0
 80038b8:	f04f 0300 	mov.w	r3, #0
 80038bc:	00eb      	lsls	r3, r5, #3
 80038be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038c2:	00e2      	lsls	r2, r4, #3
 80038c4:	4614      	mov	r4, r2
 80038c6:	461d      	mov	r5, r3
 80038c8:	4643      	mov	r3, r8
 80038ca:	18e3      	adds	r3, r4, r3
 80038cc:	603b      	str	r3, [r7, #0]
 80038ce:	464b      	mov	r3, r9
 80038d0:	eb45 0303 	adc.w	r3, r5, r3
 80038d4:	607b      	str	r3, [r7, #4]
 80038d6:	f04f 0200 	mov.w	r2, #0
 80038da:	f04f 0300 	mov.w	r3, #0
 80038de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80038e2:	4629      	mov	r1, r5
 80038e4:	028b      	lsls	r3, r1, #10
 80038e6:	4621      	mov	r1, r4
 80038e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80038ec:	4621      	mov	r1, r4
 80038ee:	028a      	lsls	r2, r1, #10
 80038f0:	4610      	mov	r0, r2
 80038f2:	4619      	mov	r1, r3
 80038f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038f6:	2200      	movs	r2, #0
 80038f8:	61bb      	str	r3, [r7, #24]
 80038fa:	61fa      	str	r2, [r7, #28]
 80038fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003900:	f7fc fe66 	bl	80005d0 <__aeabi_uldivmod>
 8003904:	4602      	mov	r2, r0
 8003906:	460b      	mov	r3, r1
 8003908:	4613      	mov	r3, r2
 800390a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800390c:	4b0b      	ldr	r3, [pc, #44]	; (800393c <HAL_RCC_GetSysClockFreq+0x200>)
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	0c1b      	lsrs	r3, r3, #16
 8003912:	f003 0303 	and.w	r3, r3, #3
 8003916:	3301      	adds	r3, #1
 8003918:	005b      	lsls	r3, r3, #1
 800391a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800391c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800391e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003920:	fbb2 f3f3 	udiv	r3, r2, r3
 8003924:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003926:	e002      	b.n	800392e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003928:	4b05      	ldr	r3, [pc, #20]	; (8003940 <HAL_RCC_GetSysClockFreq+0x204>)
 800392a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800392c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800392e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003930:	4618      	mov	r0, r3
 8003932:	3750      	adds	r7, #80	; 0x50
 8003934:	46bd      	mov	sp, r7
 8003936:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800393a:	bf00      	nop
 800393c:	40023800 	.word	0x40023800
 8003940:	00f42400 	.word	0x00f42400
 8003944:	007a1200 	.word	0x007a1200

08003948 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003948:	b480      	push	{r7}
 800394a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800394c:	4b03      	ldr	r3, [pc, #12]	; (800395c <HAL_RCC_GetHCLKFreq+0x14>)
 800394e:	681b      	ldr	r3, [r3, #0]
}
 8003950:	4618      	mov	r0, r3
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr
 800395a:	bf00      	nop
 800395c:	2000005c 	.word	0x2000005c

08003960 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003964:	f7ff fff0 	bl	8003948 <HAL_RCC_GetHCLKFreq>
 8003968:	4602      	mov	r2, r0
 800396a:	4b05      	ldr	r3, [pc, #20]	; (8003980 <HAL_RCC_GetPCLK1Freq+0x20>)
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	0a9b      	lsrs	r3, r3, #10
 8003970:	f003 0307 	and.w	r3, r3, #7
 8003974:	4903      	ldr	r1, [pc, #12]	; (8003984 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003976:	5ccb      	ldrb	r3, [r1, r3]
 8003978:	fa22 f303 	lsr.w	r3, r2, r3
}
 800397c:	4618      	mov	r0, r3
 800397e:	bd80      	pop	{r7, pc}
 8003980:	40023800 	.word	0x40023800
 8003984:	080061bc 	.word	0x080061bc

08003988 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800398c:	f7ff ffdc 	bl	8003948 <HAL_RCC_GetHCLKFreq>
 8003990:	4602      	mov	r2, r0
 8003992:	4b05      	ldr	r3, [pc, #20]	; (80039a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	0b5b      	lsrs	r3, r3, #13
 8003998:	f003 0307 	and.w	r3, r3, #7
 800399c:	4903      	ldr	r1, [pc, #12]	; (80039ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800399e:	5ccb      	ldrb	r3, [r1, r3]
 80039a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	40023800 	.word	0x40023800
 80039ac:	080061bc 	.word	0x080061bc

080039b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b088      	sub	sp, #32
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80039b8:	2300      	movs	r3, #0
 80039ba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80039bc:	2300      	movs	r3, #0
 80039be:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80039c0:	2300      	movs	r3, #0
 80039c2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80039c4:	2300      	movs	r3, #0
 80039c6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80039c8:	2300      	movs	r3, #0
 80039ca:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0301 	and.w	r3, r3, #1
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d012      	beq.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80039d8:	4b69      	ldr	r3, [pc, #420]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	4a68      	ldr	r2, [pc, #416]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039de:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80039e2:	6093      	str	r3, [r2, #8]
 80039e4:	4b66      	ldr	r3, [pc, #408]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039e6:	689a      	ldr	r2, [r3, #8]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039ec:	4964      	ldr	r1, [pc, #400]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039ee:	4313      	orrs	r3, r2
 80039f0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d101      	bne.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80039fa:	2301      	movs	r3, #1
 80039fc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d017      	beq.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a0a:	4b5d      	ldr	r3, [pc, #372]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a10:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a18:	4959      	ldr	r1, [pc, #356]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a28:	d101      	bne.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d101      	bne.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003a36:	2301      	movs	r3, #1
 8003a38:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d017      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003a46:	4b4e      	ldr	r3, [pc, #312]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a4c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a54:	494a      	ldr	r1, [pc, #296]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a56:	4313      	orrs	r3, r2
 8003a58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a64:	d101      	bne.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003a66:	2301      	movs	r3, #1
 8003a68:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d101      	bne.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003a72:	2301      	movs	r3, #1
 8003a74:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d001      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003a82:	2301      	movs	r3, #1
 8003a84:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0320 	and.w	r3, r3, #32
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	f000 808b 	beq.w	8003baa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a94:	4b3a      	ldr	r3, [pc, #232]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a98:	4a39      	ldr	r2, [pc, #228]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a9e:	6413      	str	r3, [r2, #64]	; 0x40
 8003aa0:	4b37      	ldr	r3, [pc, #220]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aa8:	60bb      	str	r3, [r7, #8]
 8003aaa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003aac:	4b35      	ldr	r3, [pc, #212]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a34      	ldr	r2, [pc, #208]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003ab2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ab6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ab8:	f7fe f9a8 	bl	8001e0c <HAL_GetTick>
 8003abc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003abe:	e008      	b.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ac0:	f7fe f9a4 	bl	8001e0c <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	2b64      	cmp	r3, #100	; 0x64
 8003acc:	d901      	bls.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e357      	b.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003ad2:	4b2c      	ldr	r3, [pc, #176]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d0f0      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ade:	4b28      	ldr	r3, [pc, #160]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ae2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ae6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d035      	beq.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003af6:	693a      	ldr	r2, [r7, #16]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d02e      	beq.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003afc:	4b20      	ldr	r3, [pc, #128]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b04:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b06:	4b1e      	ldr	r3, [pc, #120]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b0a:	4a1d      	ldr	r2, [pc, #116]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b10:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b12:	4b1b      	ldr	r3, [pc, #108]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b16:	4a1a      	ldr	r2, [pc, #104]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b1c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003b1e:	4a18      	ldr	r2, [pc, #96]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003b24:	4b16      	ldr	r3, [pc, #88]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b28:	f003 0301 	and.w	r3, r3, #1
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d114      	bne.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b30:	f7fe f96c 	bl	8001e0c <HAL_GetTick>
 8003b34:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b36:	e00a      	b.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b38:	f7fe f968 	bl	8001e0c <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d901      	bls.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e319      	b.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b4e:	4b0c      	ldr	r3, [pc, #48]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b52:	f003 0302 	and.w	r3, r3, #2
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d0ee      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b66:	d111      	bne.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003b68:	4b05      	ldr	r3, [pc, #20]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003b74:	4b04      	ldr	r3, [pc, #16]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003b76:	400b      	ands	r3, r1
 8003b78:	4901      	ldr	r1, [pc, #4]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	608b      	str	r3, [r1, #8]
 8003b7e:	e00b      	b.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003b80:	40023800 	.word	0x40023800
 8003b84:	40007000 	.word	0x40007000
 8003b88:	0ffffcff 	.word	0x0ffffcff
 8003b8c:	4baa      	ldr	r3, [pc, #680]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	4aa9      	ldr	r2, [pc, #676]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b92:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003b96:	6093      	str	r3, [r2, #8]
 8003b98:	4ba7      	ldr	r3, [pc, #668]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b9a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ba4:	49a4      	ldr	r1, [pc, #656]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0310 	and.w	r3, r3, #16
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d010      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003bb6:	4ba0      	ldr	r3, [pc, #640]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bbc:	4a9e      	ldr	r2, [pc, #632]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bbe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bc2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003bc6:	4b9c      	ldr	r3, [pc, #624]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bc8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd0:	4999      	ldr	r1, [pc, #612]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d00a      	beq.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003be4:	4b94      	ldr	r3, [pc, #592]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bf2:	4991      	ldr	r1, [pc, #580]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d00a      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c06:	4b8c      	ldr	r3, [pc, #560]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c0c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c14:	4988      	ldr	r1, [pc, #544]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d00a      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c28:	4b83      	ldr	r3, [pc, #524]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c2e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c36:	4980      	ldr	r1, [pc, #512]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d00a      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003c4a:	4b7b      	ldr	r3, [pc, #492]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c50:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c58:	4977      	ldr	r1, [pc, #476]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d00a      	beq.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c6c:	4b72      	ldr	r3, [pc, #456]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c72:	f023 0203 	bic.w	r2, r3, #3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c7a:	496f      	ldr	r1, [pc, #444]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d00a      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c8e:	4b6a      	ldr	r3, [pc, #424]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c94:	f023 020c 	bic.w	r2, r3, #12
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c9c:	4966      	ldr	r1, [pc, #408]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d00a      	beq.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003cb0:	4b61      	ldr	r3, [pc, #388]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cb6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cbe:	495e      	ldr	r1, [pc, #376]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d00a      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003cd2:	4b59      	ldr	r3, [pc, #356]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cd8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ce0:	4955      	ldr	r1, [pc, #340]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d00a      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003cf4:	4b50      	ldr	r3, [pc, #320]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cfa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d02:	494d      	ldr	r1, [pc, #308]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d04:	4313      	orrs	r3, r2
 8003d06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00a      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003d16:	4b48      	ldr	r3, [pc, #288]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d1c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d24:	4944      	ldr	r1, [pc, #272]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d00a      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003d38:	4b3f      	ldr	r3, [pc, #252]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d3e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d46:	493c      	ldr	r1, [pc, #240]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d00a      	beq.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003d5a:	4b37      	ldr	r3, [pc, #220]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d60:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d68:	4933      	ldr	r1, [pc, #204]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d00a      	beq.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003d7c:	4b2e      	ldr	r3, [pc, #184]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d82:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d8a:	492b      	ldr	r1, [pc, #172]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d011      	beq.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003d9e:	4b26      	ldr	r3, [pc, #152]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003da4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003dac:	4922      	ldr	r1, [pc, #136]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003dae:	4313      	orrs	r3, r2
 8003db0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003db8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003dbc:	d101      	bne.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0308 	and.w	r3, r3, #8
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d001      	beq.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d00a      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003dde:	4b16      	ldr	r3, [pc, #88]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003de4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dec:	4912      	ldr	r1, [pc, #72]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003dee:	4313      	orrs	r3, r2
 8003df0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d00b      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003e00:	4b0d      	ldr	r3, [pc, #52]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e06:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e10:	4909      	ldr	r1, [pc, #36]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e12:	4313      	orrs	r3, r2
 8003e14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d006      	beq.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	f000 80d9 	beq.w	8003fde <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003e2c:	4b02      	ldr	r3, [pc, #8]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a01      	ldr	r2, [pc, #4]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e32:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003e36:	e001      	b.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003e38:	40023800 	.word	0x40023800
 8003e3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e3e:	f7fd ffe5 	bl	8001e0c <HAL_GetTick>
 8003e42:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e44:	e008      	b.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003e46:	f7fd ffe1 	bl	8001e0c <HAL_GetTick>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	2b64      	cmp	r3, #100	; 0x64
 8003e52:	d901      	bls.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e54:	2303      	movs	r3, #3
 8003e56:	e194      	b.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e58:	4b6c      	ldr	r3, [pc, #432]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d1f0      	bne.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0301 	and.w	r3, r3, #1
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d021      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d11d      	bne.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003e78:	4b64      	ldr	r3, [pc, #400]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e7e:	0c1b      	lsrs	r3, r3, #16
 8003e80:	f003 0303 	and.w	r3, r3, #3
 8003e84:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003e86:	4b61      	ldr	r3, [pc, #388]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e8c:	0e1b      	lsrs	r3, r3, #24
 8003e8e:	f003 030f 	and.w	r3, r3, #15
 8003e92:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	019a      	lsls	r2, r3, #6
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	041b      	lsls	r3, r3, #16
 8003e9e:	431a      	orrs	r2, r3
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	061b      	lsls	r3, r3, #24
 8003ea4:	431a      	orrs	r2, r3
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	071b      	lsls	r3, r3, #28
 8003eac:	4957      	ldr	r1, [pc, #348]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d004      	beq.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ec4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ec8:	d00a      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d02e      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ede:	d129      	bne.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003ee0:	4b4a      	ldr	r3, [pc, #296]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ee2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ee6:	0c1b      	lsrs	r3, r3, #16
 8003ee8:	f003 0303 	and.w	r3, r3, #3
 8003eec:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003eee:	4b47      	ldr	r3, [pc, #284]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ef0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ef4:	0f1b      	lsrs	r3, r3, #28
 8003ef6:	f003 0307 	and.w	r3, r3, #7
 8003efa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	019a      	lsls	r2, r3, #6
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	041b      	lsls	r3, r3, #16
 8003f06:	431a      	orrs	r2, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	061b      	lsls	r3, r3, #24
 8003f0e:	431a      	orrs	r2, r3
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	071b      	lsls	r3, r3, #28
 8003f14:	493d      	ldr	r1, [pc, #244]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003f1c:	4b3b      	ldr	r3, [pc, #236]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f22:	f023 021f 	bic.w	r2, r3, #31
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2a:	3b01      	subs	r3, #1
 8003f2c:	4937      	ldr	r1, [pc, #220]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d01d      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003f40:	4b32      	ldr	r3, [pc, #200]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f46:	0e1b      	lsrs	r3, r3, #24
 8003f48:	f003 030f 	and.w	r3, r3, #15
 8003f4c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003f4e:	4b2f      	ldr	r3, [pc, #188]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f54:	0f1b      	lsrs	r3, r3, #28
 8003f56:	f003 0307 	and.w	r3, r3, #7
 8003f5a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	019a      	lsls	r2, r3, #6
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	041b      	lsls	r3, r3, #16
 8003f68:	431a      	orrs	r2, r3
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	061b      	lsls	r3, r3, #24
 8003f6e:	431a      	orrs	r2, r3
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	071b      	lsls	r3, r3, #28
 8003f74:	4925      	ldr	r1, [pc, #148]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f76:	4313      	orrs	r3, r2
 8003f78:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d011      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	019a      	lsls	r2, r3, #6
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	691b      	ldr	r3, [r3, #16]
 8003f92:	041b      	lsls	r3, r3, #16
 8003f94:	431a      	orrs	r2, r3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	061b      	lsls	r3, r3, #24
 8003f9c:	431a      	orrs	r2, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	071b      	lsls	r3, r3, #28
 8003fa4:	4919      	ldr	r1, [pc, #100]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003fac:	4b17      	ldr	r3, [pc, #92]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a16      	ldr	r2, [pc, #88]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003fb2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003fb6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fb8:	f7fd ff28 	bl	8001e0c <HAL_GetTick>
 8003fbc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003fbe:	e008      	b.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003fc0:	f7fd ff24 	bl	8001e0c <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	2b64      	cmp	r3, #100	; 0x64
 8003fcc:	d901      	bls.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	e0d7      	b.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003fd2:	4b0e      	ldr	r3, [pc, #56]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d0f0      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003fde:	69bb      	ldr	r3, [r7, #24]
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	f040 80cd 	bne.w	8004180 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003fe6:	4b09      	ldr	r3, [pc, #36]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a08      	ldr	r2, [pc, #32]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003fec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ff0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ff2:	f7fd ff0b 	bl	8001e0c <HAL_GetTick>
 8003ff6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003ff8:	e00a      	b.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003ffa:	f7fd ff07 	bl	8001e0c <HAL_GetTick>
 8003ffe:	4602      	mov	r2, r0
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	1ad3      	subs	r3, r2, r3
 8004004:	2b64      	cmp	r3, #100	; 0x64
 8004006:	d903      	bls.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004008:	2303      	movs	r3, #3
 800400a:	e0ba      	b.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800400c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004010:	4b5e      	ldr	r3, [pc, #376]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004018:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800401c:	d0ed      	beq.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d003      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800402e:	2b00      	cmp	r3, #0
 8004030:	d009      	beq.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800403a:	2b00      	cmp	r3, #0
 800403c:	d02e      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004042:	2b00      	cmp	r3, #0
 8004044:	d12a      	bne.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004046:	4b51      	ldr	r3, [pc, #324]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004048:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800404c:	0c1b      	lsrs	r3, r3, #16
 800404e:	f003 0303 	and.w	r3, r3, #3
 8004052:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004054:	4b4d      	ldr	r3, [pc, #308]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800405a:	0f1b      	lsrs	r3, r3, #28
 800405c:	f003 0307 	and.w	r3, r3, #7
 8004060:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	695b      	ldr	r3, [r3, #20]
 8004066:	019a      	lsls	r2, r3, #6
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	041b      	lsls	r3, r3, #16
 800406c:	431a      	orrs	r2, r3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	699b      	ldr	r3, [r3, #24]
 8004072:	061b      	lsls	r3, r3, #24
 8004074:	431a      	orrs	r2, r3
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	071b      	lsls	r3, r3, #28
 800407a:	4944      	ldr	r1, [pc, #272]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800407c:	4313      	orrs	r3, r2
 800407e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004082:	4b42      	ldr	r3, [pc, #264]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004084:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004088:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004090:	3b01      	subs	r3, #1
 8004092:	021b      	lsls	r3, r3, #8
 8004094:	493d      	ldr	r1, [pc, #244]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004096:	4313      	orrs	r3, r2
 8004098:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d022      	beq.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040b0:	d11d      	bne.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80040b2:	4b36      	ldr	r3, [pc, #216]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b8:	0e1b      	lsrs	r3, r3, #24
 80040ba:	f003 030f 	and.w	r3, r3, #15
 80040be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80040c0:	4b32      	ldr	r3, [pc, #200]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040c6:	0f1b      	lsrs	r3, r3, #28
 80040c8:	f003 0307 	and.w	r3, r3, #7
 80040cc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	695b      	ldr	r3, [r3, #20]
 80040d2:	019a      	lsls	r2, r3, #6
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6a1b      	ldr	r3, [r3, #32]
 80040d8:	041b      	lsls	r3, r3, #16
 80040da:	431a      	orrs	r2, r3
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	061b      	lsls	r3, r3, #24
 80040e0:	431a      	orrs	r2, r3
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	071b      	lsls	r3, r3, #28
 80040e6:	4929      	ldr	r1, [pc, #164]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040e8:	4313      	orrs	r3, r2
 80040ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0308 	and.w	r3, r3, #8
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d028      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80040fa:	4b24      	ldr	r3, [pc, #144]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004100:	0e1b      	lsrs	r3, r3, #24
 8004102:	f003 030f 	and.w	r3, r3, #15
 8004106:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004108:	4b20      	ldr	r3, [pc, #128]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800410a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800410e:	0c1b      	lsrs	r3, r3, #16
 8004110:	f003 0303 	and.w	r3, r3, #3
 8004114:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	695b      	ldr	r3, [r3, #20]
 800411a:	019a      	lsls	r2, r3, #6
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	041b      	lsls	r3, r3, #16
 8004120:	431a      	orrs	r2, r3
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	061b      	lsls	r3, r3, #24
 8004126:	431a      	orrs	r2, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	69db      	ldr	r3, [r3, #28]
 800412c:	071b      	lsls	r3, r3, #28
 800412e:	4917      	ldr	r1, [pc, #92]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004130:	4313      	orrs	r3, r2
 8004132:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004136:	4b15      	ldr	r3, [pc, #84]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004138:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800413c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004144:	4911      	ldr	r1, [pc, #68]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004146:	4313      	orrs	r3, r2
 8004148:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800414c:	4b0f      	ldr	r3, [pc, #60]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a0e      	ldr	r2, [pc, #56]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004152:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004156:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004158:	f7fd fe58 	bl	8001e0c <HAL_GetTick>
 800415c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800415e:	e008      	b.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004160:	f7fd fe54 	bl	8001e0c <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	2b64      	cmp	r3, #100	; 0x64
 800416c:	d901      	bls.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e007      	b.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004172:	4b06      	ldr	r3, [pc, #24]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800417a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800417e:	d1ef      	bne.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004180:	2300      	movs	r3, #0
}
 8004182:	4618      	mov	r0, r3
 8004184:	3720      	adds	r7, #32
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop
 800418c:	40023800 	.word	0x40023800

08004190 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b082      	sub	sp, #8
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d101      	bne.n	80041a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e049      	b.n	8004236 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d106      	bne.n	80041bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f7fd fc94 	bl	8001ae4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2202      	movs	r2, #2
 80041c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	3304      	adds	r3, #4
 80041cc:	4619      	mov	r1, r3
 80041ce:	4610      	mov	r0, r2
 80041d0:	f000 fe20 	bl	8004e14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	3708      	adds	r7, #8
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
	...

08004240 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004240:	b480      	push	{r7}
 8004242:	b085      	sub	sp, #20
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800424e:	b2db      	uxtb	r3, r3
 8004250:	2b01      	cmp	r3, #1
 8004252:	d001      	beq.n	8004258 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	e054      	b.n	8004302 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2202      	movs	r2, #2
 800425c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	68da      	ldr	r2, [r3, #12]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f042 0201 	orr.w	r2, r2, #1
 800426e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a26      	ldr	r2, [pc, #152]	; (8004310 <HAL_TIM_Base_Start_IT+0xd0>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d022      	beq.n	80042c0 <HAL_TIM_Base_Start_IT+0x80>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004282:	d01d      	beq.n	80042c0 <HAL_TIM_Base_Start_IT+0x80>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a22      	ldr	r2, [pc, #136]	; (8004314 <HAL_TIM_Base_Start_IT+0xd4>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d018      	beq.n	80042c0 <HAL_TIM_Base_Start_IT+0x80>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a21      	ldr	r2, [pc, #132]	; (8004318 <HAL_TIM_Base_Start_IT+0xd8>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d013      	beq.n	80042c0 <HAL_TIM_Base_Start_IT+0x80>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a1f      	ldr	r2, [pc, #124]	; (800431c <HAL_TIM_Base_Start_IT+0xdc>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d00e      	beq.n	80042c0 <HAL_TIM_Base_Start_IT+0x80>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a1e      	ldr	r2, [pc, #120]	; (8004320 <HAL_TIM_Base_Start_IT+0xe0>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d009      	beq.n	80042c0 <HAL_TIM_Base_Start_IT+0x80>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a1c      	ldr	r2, [pc, #112]	; (8004324 <HAL_TIM_Base_Start_IT+0xe4>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d004      	beq.n	80042c0 <HAL_TIM_Base_Start_IT+0x80>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a1b      	ldr	r2, [pc, #108]	; (8004328 <HAL_TIM_Base_Start_IT+0xe8>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d115      	bne.n	80042ec <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	689a      	ldr	r2, [r3, #8]
 80042c6:	4b19      	ldr	r3, [pc, #100]	; (800432c <HAL_TIM_Base_Start_IT+0xec>)
 80042c8:	4013      	ands	r3, r2
 80042ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2b06      	cmp	r3, #6
 80042d0:	d015      	beq.n	80042fe <HAL_TIM_Base_Start_IT+0xbe>
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042d8:	d011      	beq.n	80042fe <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f042 0201 	orr.w	r2, r2, #1
 80042e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042ea:	e008      	b.n	80042fe <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f042 0201 	orr.w	r2, r2, #1
 80042fa:	601a      	str	r2, [r3, #0]
 80042fc:	e000      	b.n	8004300 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042fe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004300:	2300      	movs	r3, #0
}
 8004302:	4618      	mov	r0, r3
 8004304:	3714      	adds	r7, #20
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr
 800430e:	bf00      	nop
 8004310:	40010000 	.word	0x40010000
 8004314:	40000400 	.word	0x40000400
 8004318:	40000800 	.word	0x40000800
 800431c:	40000c00 	.word	0x40000c00
 8004320:	40010400 	.word	0x40010400
 8004324:	40014000 	.word	0x40014000
 8004328:	40001800 	.word	0x40001800
 800432c:	00010007 	.word	0x00010007

08004330 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	68da      	ldr	r2, [r3, #12]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f022 0201 	bic.w	r2, r2, #1
 8004346:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	6a1a      	ldr	r2, [r3, #32]
 800434e:	f241 1311 	movw	r3, #4369	; 0x1111
 8004352:	4013      	ands	r3, r2
 8004354:	2b00      	cmp	r3, #0
 8004356:	d10f      	bne.n	8004378 <HAL_TIM_Base_Stop_IT+0x48>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	6a1a      	ldr	r2, [r3, #32]
 800435e:	f240 4344 	movw	r3, #1092	; 0x444
 8004362:	4013      	ands	r3, r2
 8004364:	2b00      	cmp	r3, #0
 8004366:	d107      	bne.n	8004378 <HAL_TIM_Base_Stop_IT+0x48>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f022 0201 	bic.w	r2, r2, #1
 8004376:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004380:	2300      	movs	r3, #0
}
 8004382:	4618      	mov	r0, r3
 8004384:	370c      	adds	r7, #12
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr

0800438e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800438e:	b580      	push	{r7, lr}
 8004390:	b082      	sub	sp, #8
 8004392:	af00      	add	r7, sp, #0
 8004394:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d101      	bne.n	80043a0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	e049      	b.n	8004434 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d106      	bne.n	80043ba <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f000 f841 	bl	800443c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2202      	movs	r2, #2
 80043be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	3304      	adds	r3, #4
 80043ca:	4619      	mov	r1, r3
 80043cc:	4610      	mov	r0, r2
 80043ce:	f000 fd21 	bl	8004e14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2201      	movs	r2, #1
 80043d6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2201      	movs	r2, #1
 80043de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2201      	movs	r2, #1
 80043e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2201      	movs	r2, #1
 80043ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2201      	movs	r2, #1
 80043f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2201      	movs	r2, #1
 80043fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2201      	movs	r2, #1
 8004406:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2201      	movs	r2, #1
 800440e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2201      	movs	r2, #1
 8004416:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2201      	movs	r2, #1
 800441e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2201      	movs	r2, #1
 8004426:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2201      	movs	r2, #1
 800442e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004432:	2300      	movs	r3, #0
}
 8004434:	4618      	mov	r0, r3
 8004436:	3708      	adds	r7, #8
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}

0800443c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004444:	bf00      	nop
 8004446:	370c      	adds	r7, #12
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr

08004450 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b084      	sub	sp, #16
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d109      	bne.n	8004474 <HAL_TIM_PWM_Start+0x24>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004466:	b2db      	uxtb	r3, r3
 8004468:	2b01      	cmp	r3, #1
 800446a:	bf14      	ite	ne
 800446c:	2301      	movne	r3, #1
 800446e:	2300      	moveq	r3, #0
 8004470:	b2db      	uxtb	r3, r3
 8004472:	e03c      	b.n	80044ee <HAL_TIM_PWM_Start+0x9e>
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	2b04      	cmp	r3, #4
 8004478:	d109      	bne.n	800448e <HAL_TIM_PWM_Start+0x3e>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004480:	b2db      	uxtb	r3, r3
 8004482:	2b01      	cmp	r3, #1
 8004484:	bf14      	ite	ne
 8004486:	2301      	movne	r3, #1
 8004488:	2300      	moveq	r3, #0
 800448a:	b2db      	uxtb	r3, r3
 800448c:	e02f      	b.n	80044ee <HAL_TIM_PWM_Start+0x9e>
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	2b08      	cmp	r3, #8
 8004492:	d109      	bne.n	80044a8 <HAL_TIM_PWM_Start+0x58>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800449a:	b2db      	uxtb	r3, r3
 800449c:	2b01      	cmp	r3, #1
 800449e:	bf14      	ite	ne
 80044a0:	2301      	movne	r3, #1
 80044a2:	2300      	moveq	r3, #0
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	e022      	b.n	80044ee <HAL_TIM_PWM_Start+0x9e>
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	2b0c      	cmp	r3, #12
 80044ac:	d109      	bne.n	80044c2 <HAL_TIM_PWM_Start+0x72>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	bf14      	ite	ne
 80044ba:	2301      	movne	r3, #1
 80044bc:	2300      	moveq	r3, #0
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	e015      	b.n	80044ee <HAL_TIM_PWM_Start+0x9e>
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	2b10      	cmp	r3, #16
 80044c6:	d109      	bne.n	80044dc <HAL_TIM_PWM_Start+0x8c>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	bf14      	ite	ne
 80044d4:	2301      	movne	r3, #1
 80044d6:	2300      	moveq	r3, #0
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	e008      	b.n	80044ee <HAL_TIM_PWM_Start+0x9e>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	bf14      	ite	ne
 80044e8:	2301      	movne	r3, #1
 80044ea:	2300      	moveq	r3, #0
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d001      	beq.n	80044f6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e092      	b.n	800461c <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d104      	bne.n	8004506 <HAL_TIM_PWM_Start+0xb6>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2202      	movs	r2, #2
 8004500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004504:	e023      	b.n	800454e <HAL_TIM_PWM_Start+0xfe>
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	2b04      	cmp	r3, #4
 800450a:	d104      	bne.n	8004516 <HAL_TIM_PWM_Start+0xc6>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2202      	movs	r2, #2
 8004510:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004514:	e01b      	b.n	800454e <HAL_TIM_PWM_Start+0xfe>
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	2b08      	cmp	r3, #8
 800451a:	d104      	bne.n	8004526 <HAL_TIM_PWM_Start+0xd6>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2202      	movs	r2, #2
 8004520:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004524:	e013      	b.n	800454e <HAL_TIM_PWM_Start+0xfe>
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	2b0c      	cmp	r3, #12
 800452a:	d104      	bne.n	8004536 <HAL_TIM_PWM_Start+0xe6>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2202      	movs	r2, #2
 8004530:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004534:	e00b      	b.n	800454e <HAL_TIM_PWM_Start+0xfe>
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	2b10      	cmp	r3, #16
 800453a:	d104      	bne.n	8004546 <HAL_TIM_PWM_Start+0xf6>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2202      	movs	r2, #2
 8004540:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004544:	e003      	b.n	800454e <HAL_TIM_PWM_Start+0xfe>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2202      	movs	r2, #2
 800454a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2201      	movs	r2, #1
 8004554:	6839      	ldr	r1, [r7, #0]
 8004556:	4618      	mov	r0, r3
 8004558:	f001 f888 	bl	800566c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a30      	ldr	r2, [pc, #192]	; (8004624 <HAL_TIM_PWM_Start+0x1d4>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d004      	beq.n	8004570 <HAL_TIM_PWM_Start+0x120>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a2f      	ldr	r2, [pc, #188]	; (8004628 <HAL_TIM_PWM_Start+0x1d8>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d101      	bne.n	8004574 <HAL_TIM_PWM_Start+0x124>
 8004570:	2301      	movs	r3, #1
 8004572:	e000      	b.n	8004576 <HAL_TIM_PWM_Start+0x126>
 8004574:	2300      	movs	r3, #0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d007      	beq.n	800458a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004588:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a25      	ldr	r2, [pc, #148]	; (8004624 <HAL_TIM_PWM_Start+0x1d4>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d022      	beq.n	80045da <HAL_TIM_PWM_Start+0x18a>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800459c:	d01d      	beq.n	80045da <HAL_TIM_PWM_Start+0x18a>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a22      	ldr	r2, [pc, #136]	; (800462c <HAL_TIM_PWM_Start+0x1dc>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d018      	beq.n	80045da <HAL_TIM_PWM_Start+0x18a>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a20      	ldr	r2, [pc, #128]	; (8004630 <HAL_TIM_PWM_Start+0x1e0>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d013      	beq.n	80045da <HAL_TIM_PWM_Start+0x18a>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a1f      	ldr	r2, [pc, #124]	; (8004634 <HAL_TIM_PWM_Start+0x1e4>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d00e      	beq.n	80045da <HAL_TIM_PWM_Start+0x18a>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a19      	ldr	r2, [pc, #100]	; (8004628 <HAL_TIM_PWM_Start+0x1d8>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d009      	beq.n	80045da <HAL_TIM_PWM_Start+0x18a>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a1b      	ldr	r2, [pc, #108]	; (8004638 <HAL_TIM_PWM_Start+0x1e8>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d004      	beq.n	80045da <HAL_TIM_PWM_Start+0x18a>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a19      	ldr	r2, [pc, #100]	; (800463c <HAL_TIM_PWM_Start+0x1ec>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d115      	bne.n	8004606 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	689a      	ldr	r2, [r3, #8]
 80045e0:	4b17      	ldr	r3, [pc, #92]	; (8004640 <HAL_TIM_PWM_Start+0x1f0>)
 80045e2:	4013      	ands	r3, r2
 80045e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2b06      	cmp	r3, #6
 80045ea:	d015      	beq.n	8004618 <HAL_TIM_PWM_Start+0x1c8>
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045f2:	d011      	beq.n	8004618 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f042 0201 	orr.w	r2, r2, #1
 8004602:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004604:	e008      	b.n	8004618 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f042 0201 	orr.w	r2, r2, #1
 8004614:	601a      	str	r2, [r3, #0]
 8004616:	e000      	b.n	800461a <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004618:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800461a:	2300      	movs	r3, #0
}
 800461c:	4618      	mov	r0, r3
 800461e:	3710      	adds	r7, #16
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}
 8004624:	40010000 	.word	0x40010000
 8004628:	40010400 	.word	0x40010400
 800462c:	40000400 	.word	0x40000400
 8004630:	40000800 	.word	0x40000800
 8004634:	40000c00 	.word	0x40000c00
 8004638:	40014000 	.word	0x40014000
 800463c:	40001800 	.word	0x40001800
 8004640:	00010007 	.word	0x00010007

08004644 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b082      	sub	sp, #8
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	2200      	movs	r2, #0
 8004654:	6839      	ldr	r1, [r7, #0]
 8004656:	4618      	mov	r0, r3
 8004658:	f001 f808 	bl	800566c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a36      	ldr	r2, [pc, #216]	; (800473c <HAL_TIM_PWM_Stop+0xf8>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d004      	beq.n	8004670 <HAL_TIM_PWM_Stop+0x2c>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a35      	ldr	r2, [pc, #212]	; (8004740 <HAL_TIM_PWM_Stop+0xfc>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d101      	bne.n	8004674 <HAL_TIM_PWM_Stop+0x30>
 8004670:	2301      	movs	r3, #1
 8004672:	e000      	b.n	8004676 <HAL_TIM_PWM_Stop+0x32>
 8004674:	2300      	movs	r3, #0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d017      	beq.n	80046aa <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	6a1a      	ldr	r2, [r3, #32]
 8004680:	f241 1311 	movw	r3, #4369	; 0x1111
 8004684:	4013      	ands	r3, r2
 8004686:	2b00      	cmp	r3, #0
 8004688:	d10f      	bne.n	80046aa <HAL_TIM_PWM_Stop+0x66>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	6a1a      	ldr	r2, [r3, #32]
 8004690:	f240 4344 	movw	r3, #1092	; 0x444
 8004694:	4013      	ands	r3, r2
 8004696:	2b00      	cmp	r3, #0
 8004698:	d107      	bne.n	80046aa <HAL_TIM_PWM_Stop+0x66>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80046a8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	6a1a      	ldr	r2, [r3, #32]
 80046b0:	f241 1311 	movw	r3, #4369	; 0x1111
 80046b4:	4013      	ands	r3, r2
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d10f      	bne.n	80046da <HAL_TIM_PWM_Stop+0x96>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	6a1a      	ldr	r2, [r3, #32]
 80046c0:	f240 4344 	movw	r3, #1092	; 0x444
 80046c4:	4013      	ands	r3, r2
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d107      	bne.n	80046da <HAL_TIM_PWM_Stop+0x96>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f022 0201 	bic.w	r2, r2, #1
 80046d8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d104      	bne.n	80046ea <HAL_TIM_PWM_Stop+0xa6>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046e8:	e023      	b.n	8004732 <HAL_TIM_PWM_Stop+0xee>
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	2b04      	cmp	r3, #4
 80046ee:	d104      	bne.n	80046fa <HAL_TIM_PWM_Stop+0xb6>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046f8:	e01b      	b.n	8004732 <HAL_TIM_PWM_Stop+0xee>
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	2b08      	cmp	r3, #8
 80046fe:	d104      	bne.n	800470a <HAL_TIM_PWM_Stop+0xc6>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004708:	e013      	b.n	8004732 <HAL_TIM_PWM_Stop+0xee>
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	2b0c      	cmp	r3, #12
 800470e:	d104      	bne.n	800471a <HAL_TIM_PWM_Stop+0xd6>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004718:	e00b      	b.n	8004732 <HAL_TIM_PWM_Stop+0xee>
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	2b10      	cmp	r3, #16
 800471e:	d104      	bne.n	800472a <HAL_TIM_PWM_Stop+0xe6>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004728:	e003      	b.n	8004732 <HAL_TIM_PWM_Stop+0xee>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2201      	movs	r2, #1
 800472e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8004732:	2300      	movs	r3, #0
}
 8004734:	4618      	mov	r0, r3
 8004736:	3708      	adds	r7, #8
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}
 800473c:	40010000 	.word	0x40010000
 8004740:	40010400 	.word	0x40010400

08004744 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b082      	sub	sp, #8
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	691b      	ldr	r3, [r3, #16]
 8004752:	f003 0302 	and.w	r3, r3, #2
 8004756:	2b02      	cmp	r3, #2
 8004758:	d122      	bne.n	80047a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	f003 0302 	and.w	r3, r3, #2
 8004764:	2b02      	cmp	r3, #2
 8004766:	d11b      	bne.n	80047a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f06f 0202 	mvn.w	r2, #2
 8004770:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2201      	movs	r2, #1
 8004776:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	699b      	ldr	r3, [r3, #24]
 800477e:	f003 0303 	and.w	r3, r3, #3
 8004782:	2b00      	cmp	r3, #0
 8004784:	d003      	beq.n	800478e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f000 fb26 	bl	8004dd8 <HAL_TIM_IC_CaptureCallback>
 800478c:	e005      	b.n	800479a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 fb18 	bl	8004dc4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f000 fb29 	bl	8004dec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	691b      	ldr	r3, [r3, #16]
 80047a6:	f003 0304 	and.w	r3, r3, #4
 80047aa:	2b04      	cmp	r3, #4
 80047ac:	d122      	bne.n	80047f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	f003 0304 	and.w	r3, r3, #4
 80047b8:	2b04      	cmp	r3, #4
 80047ba:	d11b      	bne.n	80047f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f06f 0204 	mvn.w	r2, #4
 80047c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2202      	movs	r2, #2
 80047ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	699b      	ldr	r3, [r3, #24]
 80047d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d003      	beq.n	80047e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f000 fafc 	bl	8004dd8 <HAL_TIM_IC_CaptureCallback>
 80047e0:	e005      	b.n	80047ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f000 faee 	bl	8004dc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f000 faff 	bl	8004dec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	691b      	ldr	r3, [r3, #16]
 80047fa:	f003 0308 	and.w	r3, r3, #8
 80047fe:	2b08      	cmp	r3, #8
 8004800:	d122      	bne.n	8004848 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	f003 0308 	and.w	r3, r3, #8
 800480c:	2b08      	cmp	r3, #8
 800480e:	d11b      	bne.n	8004848 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f06f 0208 	mvn.w	r2, #8
 8004818:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2204      	movs	r2, #4
 800481e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	69db      	ldr	r3, [r3, #28]
 8004826:	f003 0303 	and.w	r3, r3, #3
 800482a:	2b00      	cmp	r3, #0
 800482c:	d003      	beq.n	8004836 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f000 fad2 	bl	8004dd8 <HAL_TIM_IC_CaptureCallback>
 8004834:	e005      	b.n	8004842 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f000 fac4 	bl	8004dc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f000 fad5 	bl	8004dec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	691b      	ldr	r3, [r3, #16]
 800484e:	f003 0310 	and.w	r3, r3, #16
 8004852:	2b10      	cmp	r3, #16
 8004854:	d122      	bne.n	800489c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	f003 0310 	and.w	r3, r3, #16
 8004860:	2b10      	cmp	r3, #16
 8004862:	d11b      	bne.n	800489c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f06f 0210 	mvn.w	r2, #16
 800486c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2208      	movs	r2, #8
 8004872:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	69db      	ldr	r3, [r3, #28]
 800487a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800487e:	2b00      	cmp	r3, #0
 8004880:	d003      	beq.n	800488a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 faa8 	bl	8004dd8 <HAL_TIM_IC_CaptureCallback>
 8004888:	e005      	b.n	8004896 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f000 fa9a 	bl	8004dc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f000 faab 	bl	8004dec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2200      	movs	r2, #0
 800489a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	691b      	ldr	r3, [r3, #16]
 80048a2:	f003 0301 	and.w	r3, r3, #1
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d10e      	bne.n	80048c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	f003 0301 	and.w	r3, r3, #1
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d107      	bne.n	80048c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f06f 0201 	mvn.w	r2, #1
 80048c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f7fc ff22 	bl	800170c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	691b      	ldr	r3, [r3, #16]
 80048ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048d2:	2b80      	cmp	r3, #128	; 0x80
 80048d4:	d10e      	bne.n	80048f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048e0:	2b80      	cmp	r3, #128	; 0x80
 80048e2:	d107      	bne.n	80048f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80048ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 ff7a 	bl	80057e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	691b      	ldr	r3, [r3, #16]
 80048fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004902:	d10e      	bne.n	8004922 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800490e:	2b80      	cmp	r3, #128	; 0x80
 8004910:	d107      	bne.n	8004922 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800491a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f000 ff6d 	bl	80057fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	691b      	ldr	r3, [r3, #16]
 8004928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800492c:	2b40      	cmp	r3, #64	; 0x40
 800492e:	d10e      	bne.n	800494e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800493a:	2b40      	cmp	r3, #64	; 0x40
 800493c:	d107      	bne.n	800494e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004946:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f000 fa59 	bl	8004e00 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	691b      	ldr	r3, [r3, #16]
 8004954:	f003 0320 	and.w	r3, r3, #32
 8004958:	2b20      	cmp	r3, #32
 800495a:	d10e      	bne.n	800497a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	f003 0320 	and.w	r3, r3, #32
 8004966:	2b20      	cmp	r3, #32
 8004968:	d107      	bne.n	800497a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f06f 0220 	mvn.w	r2, #32
 8004972:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f000 ff2d 	bl	80057d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800497a:	bf00      	nop
 800497c:	3708      	adds	r7, #8
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
	...

08004984 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b086      	sub	sp, #24
 8004988:	af00      	add	r7, sp, #0
 800498a:	60f8      	str	r0, [r7, #12]
 800498c:	60b9      	str	r1, [r7, #8]
 800498e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004990:	2300      	movs	r3, #0
 8004992:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800499a:	2b01      	cmp	r3, #1
 800499c:	d101      	bne.n	80049a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800499e:	2302      	movs	r3, #2
 80049a0:	e0ff      	b.n	8004ba2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2201      	movs	r2, #1
 80049a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2b14      	cmp	r3, #20
 80049ae:	f200 80f0 	bhi.w	8004b92 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80049b2:	a201      	add	r2, pc, #4	; (adr r2, 80049b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80049b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049b8:	08004a0d 	.word	0x08004a0d
 80049bc:	08004b93 	.word	0x08004b93
 80049c0:	08004b93 	.word	0x08004b93
 80049c4:	08004b93 	.word	0x08004b93
 80049c8:	08004a4d 	.word	0x08004a4d
 80049cc:	08004b93 	.word	0x08004b93
 80049d0:	08004b93 	.word	0x08004b93
 80049d4:	08004b93 	.word	0x08004b93
 80049d8:	08004a8f 	.word	0x08004a8f
 80049dc:	08004b93 	.word	0x08004b93
 80049e0:	08004b93 	.word	0x08004b93
 80049e4:	08004b93 	.word	0x08004b93
 80049e8:	08004acf 	.word	0x08004acf
 80049ec:	08004b93 	.word	0x08004b93
 80049f0:	08004b93 	.word	0x08004b93
 80049f4:	08004b93 	.word	0x08004b93
 80049f8:	08004b11 	.word	0x08004b11
 80049fc:	08004b93 	.word	0x08004b93
 8004a00:	08004b93 	.word	0x08004b93
 8004a04:	08004b93 	.word	0x08004b93
 8004a08:	08004b51 	.word	0x08004b51
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	68b9      	ldr	r1, [r7, #8]
 8004a12:	4618      	mov	r0, r3
 8004a14:	f000 fa9e 	bl	8004f54 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	699a      	ldr	r2, [r3, #24]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f042 0208 	orr.w	r2, r2, #8
 8004a26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	699a      	ldr	r2, [r3, #24]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f022 0204 	bic.w	r2, r2, #4
 8004a36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	6999      	ldr	r1, [r3, #24]
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	691a      	ldr	r2, [r3, #16]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	430a      	orrs	r2, r1
 8004a48:	619a      	str	r2, [r3, #24]
      break;
 8004a4a:	e0a5      	b.n	8004b98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	68b9      	ldr	r1, [r7, #8]
 8004a52:	4618      	mov	r0, r3
 8004a54:	f000 faf0 	bl	8005038 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	699a      	ldr	r2, [r3, #24]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	699a      	ldr	r2, [r3, #24]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	6999      	ldr	r1, [r3, #24]
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	691b      	ldr	r3, [r3, #16]
 8004a82:	021a      	lsls	r2, r3, #8
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	430a      	orrs	r2, r1
 8004a8a:	619a      	str	r2, [r3, #24]
      break;
 8004a8c:	e084      	b.n	8004b98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	68b9      	ldr	r1, [r7, #8]
 8004a94:	4618      	mov	r0, r3
 8004a96:	f000 fb47 	bl	8005128 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	69da      	ldr	r2, [r3, #28]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f042 0208 	orr.w	r2, r2, #8
 8004aa8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	69da      	ldr	r2, [r3, #28]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f022 0204 	bic.w	r2, r2, #4
 8004ab8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	69d9      	ldr	r1, [r3, #28]
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	691a      	ldr	r2, [r3, #16]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	430a      	orrs	r2, r1
 8004aca:	61da      	str	r2, [r3, #28]
      break;
 8004acc:	e064      	b.n	8004b98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	68b9      	ldr	r1, [r7, #8]
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f000 fb9d 	bl	8005214 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	69da      	ldr	r2, [r3, #28]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ae8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	69da      	ldr	r2, [r3, #28]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004af8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	69d9      	ldr	r1, [r3, #28]
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	691b      	ldr	r3, [r3, #16]
 8004b04:	021a      	lsls	r2, r3, #8
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	430a      	orrs	r2, r1
 8004b0c:	61da      	str	r2, [r3, #28]
      break;
 8004b0e:	e043      	b.n	8004b98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	68b9      	ldr	r1, [r7, #8]
 8004b16:	4618      	mov	r0, r3
 8004b18:	f000 fbd4 	bl	80052c4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f042 0208 	orr.w	r2, r2, #8
 8004b2a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f022 0204 	bic.w	r2, r2, #4
 8004b3a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	691a      	ldr	r2, [r3, #16]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	430a      	orrs	r2, r1
 8004b4c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004b4e:	e023      	b.n	8004b98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	68b9      	ldr	r1, [r7, #8]
 8004b56:	4618      	mov	r0, r3
 8004b58:	f000 fc06 	bl	8005368 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b6a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b7a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	021a      	lsls	r2, r3, #8
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	430a      	orrs	r2, r1
 8004b8e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004b90:	e002      	b.n	8004b98 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	75fb      	strb	r3, [r7, #23]
      break;
 8004b96:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004ba0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3718      	adds	r7, #24
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop

08004bac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b084      	sub	sp, #16
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d101      	bne.n	8004bc8 <HAL_TIM_ConfigClockSource+0x1c>
 8004bc4:	2302      	movs	r3, #2
 8004bc6:	e0b4      	b.n	8004d32 <HAL_TIM_ConfigClockSource+0x186>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2202      	movs	r2, #2
 8004bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004be0:	68ba      	ldr	r2, [r7, #8]
 8004be2:	4b56      	ldr	r3, [pc, #344]	; (8004d3c <HAL_TIM_ConfigClockSource+0x190>)
 8004be4:	4013      	ands	r3, r2
 8004be6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004bee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	68ba      	ldr	r2, [r7, #8]
 8004bf6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c00:	d03e      	beq.n	8004c80 <HAL_TIM_ConfigClockSource+0xd4>
 8004c02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c06:	f200 8087 	bhi.w	8004d18 <HAL_TIM_ConfigClockSource+0x16c>
 8004c0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c0e:	f000 8086 	beq.w	8004d1e <HAL_TIM_ConfigClockSource+0x172>
 8004c12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c16:	d87f      	bhi.n	8004d18 <HAL_TIM_ConfigClockSource+0x16c>
 8004c18:	2b70      	cmp	r3, #112	; 0x70
 8004c1a:	d01a      	beq.n	8004c52 <HAL_TIM_ConfigClockSource+0xa6>
 8004c1c:	2b70      	cmp	r3, #112	; 0x70
 8004c1e:	d87b      	bhi.n	8004d18 <HAL_TIM_ConfigClockSource+0x16c>
 8004c20:	2b60      	cmp	r3, #96	; 0x60
 8004c22:	d050      	beq.n	8004cc6 <HAL_TIM_ConfigClockSource+0x11a>
 8004c24:	2b60      	cmp	r3, #96	; 0x60
 8004c26:	d877      	bhi.n	8004d18 <HAL_TIM_ConfigClockSource+0x16c>
 8004c28:	2b50      	cmp	r3, #80	; 0x50
 8004c2a:	d03c      	beq.n	8004ca6 <HAL_TIM_ConfigClockSource+0xfa>
 8004c2c:	2b50      	cmp	r3, #80	; 0x50
 8004c2e:	d873      	bhi.n	8004d18 <HAL_TIM_ConfigClockSource+0x16c>
 8004c30:	2b40      	cmp	r3, #64	; 0x40
 8004c32:	d058      	beq.n	8004ce6 <HAL_TIM_ConfigClockSource+0x13a>
 8004c34:	2b40      	cmp	r3, #64	; 0x40
 8004c36:	d86f      	bhi.n	8004d18 <HAL_TIM_ConfigClockSource+0x16c>
 8004c38:	2b30      	cmp	r3, #48	; 0x30
 8004c3a:	d064      	beq.n	8004d06 <HAL_TIM_ConfigClockSource+0x15a>
 8004c3c:	2b30      	cmp	r3, #48	; 0x30
 8004c3e:	d86b      	bhi.n	8004d18 <HAL_TIM_ConfigClockSource+0x16c>
 8004c40:	2b20      	cmp	r3, #32
 8004c42:	d060      	beq.n	8004d06 <HAL_TIM_ConfigClockSource+0x15a>
 8004c44:	2b20      	cmp	r3, #32
 8004c46:	d867      	bhi.n	8004d18 <HAL_TIM_ConfigClockSource+0x16c>
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d05c      	beq.n	8004d06 <HAL_TIM_ConfigClockSource+0x15a>
 8004c4c:	2b10      	cmp	r3, #16
 8004c4e:	d05a      	beq.n	8004d06 <HAL_TIM_ConfigClockSource+0x15a>
 8004c50:	e062      	b.n	8004d18 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6818      	ldr	r0, [r3, #0]
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	6899      	ldr	r1, [r3, #8]
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	685a      	ldr	r2, [r3, #4]
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	f000 fce3 	bl	800562c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004c74:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	68ba      	ldr	r2, [r7, #8]
 8004c7c:	609a      	str	r2, [r3, #8]
      break;
 8004c7e:	e04f      	b.n	8004d20 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6818      	ldr	r0, [r3, #0]
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	6899      	ldr	r1, [r3, #8]
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	685a      	ldr	r2, [r3, #4]
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	f000 fccc 	bl	800562c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	689a      	ldr	r2, [r3, #8]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ca2:	609a      	str	r2, [r3, #8]
      break;
 8004ca4:	e03c      	b.n	8004d20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6818      	ldr	r0, [r3, #0]
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	6859      	ldr	r1, [r3, #4]
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	68db      	ldr	r3, [r3, #12]
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	f000 fc40 	bl	8005538 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	2150      	movs	r1, #80	; 0x50
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f000 fc99 	bl	80055f6 <TIM_ITRx_SetConfig>
      break;
 8004cc4:	e02c      	b.n	8004d20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6818      	ldr	r0, [r3, #0]
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	6859      	ldr	r1, [r3, #4]
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	461a      	mov	r2, r3
 8004cd4:	f000 fc5f 	bl	8005596 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	2160      	movs	r1, #96	; 0x60
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f000 fc89 	bl	80055f6 <TIM_ITRx_SetConfig>
      break;
 8004ce4:	e01c      	b.n	8004d20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6818      	ldr	r0, [r3, #0]
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	6859      	ldr	r1, [r3, #4]
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	461a      	mov	r2, r3
 8004cf4:	f000 fc20 	bl	8005538 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	2140      	movs	r1, #64	; 0x40
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f000 fc79 	bl	80055f6 <TIM_ITRx_SetConfig>
      break;
 8004d04:	e00c      	b.n	8004d20 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4619      	mov	r1, r3
 8004d10:	4610      	mov	r0, r2
 8004d12:	f000 fc70 	bl	80055f6 <TIM_ITRx_SetConfig>
      break;
 8004d16:	e003      	b.n	8004d20 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	73fb      	strb	r3, [r7, #15]
      break;
 8004d1c:	e000      	b.n	8004d20 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004d1e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3710      	adds	r7, #16
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	bf00      	nop
 8004d3c:	fffeff88 	.word	0xfffeff88

08004d40 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b082      	sub	sp, #8
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
 8004d48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d101      	bne.n	8004d58 <HAL_TIM_SlaveConfigSynchro+0x18>
 8004d54:	2302      	movs	r3, #2
 8004d56:	e031      	b.n	8004dbc <HAL_TIM_SlaveConfigSynchro+0x7c>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2202      	movs	r2, #2
 8004d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004d68:	6839      	ldr	r1, [r7, #0]
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f000 fb50 	bl	8005410 <TIM_SlaveTimer_SetConfig>
 8004d70:	4603      	mov	r3, r0
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d009      	beq.n	8004d8a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2201      	movs	r2, #1
 8004d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2200      	movs	r2, #0
 8004d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e018      	b.n	8004dbc <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	68da      	ldr	r2, [r3, #12]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d98:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	68da      	ldr	r2, [r3, #12]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004da8:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2201      	movs	r2, #1
 8004dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004dba:	2300      	movs	r3, #0
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3708      	adds	r7, #8
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b083      	sub	sp, #12
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004dcc:	bf00      	nop
 8004dce:	370c      	adds	r7, #12
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b083      	sub	sp, #12
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004de0:	bf00      	nop
 8004de2:	370c      	adds	r7, #12
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr

08004dec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b083      	sub	sp, #12
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004df4:	bf00      	nop
 8004df6:	370c      	adds	r7, #12
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr

08004e00 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b083      	sub	sp, #12
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e08:	bf00      	nop
 8004e0a:	370c      	adds	r7, #12
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr

08004e14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b085      	sub	sp, #20
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	4a40      	ldr	r2, [pc, #256]	; (8004f28 <TIM_Base_SetConfig+0x114>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d013      	beq.n	8004e54 <TIM_Base_SetConfig+0x40>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e32:	d00f      	beq.n	8004e54 <TIM_Base_SetConfig+0x40>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	4a3d      	ldr	r2, [pc, #244]	; (8004f2c <TIM_Base_SetConfig+0x118>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d00b      	beq.n	8004e54 <TIM_Base_SetConfig+0x40>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	4a3c      	ldr	r2, [pc, #240]	; (8004f30 <TIM_Base_SetConfig+0x11c>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d007      	beq.n	8004e54 <TIM_Base_SetConfig+0x40>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	4a3b      	ldr	r2, [pc, #236]	; (8004f34 <TIM_Base_SetConfig+0x120>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d003      	beq.n	8004e54 <TIM_Base_SetConfig+0x40>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	4a3a      	ldr	r2, [pc, #232]	; (8004f38 <TIM_Base_SetConfig+0x124>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d108      	bne.n	8004e66 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	68fa      	ldr	r2, [r7, #12]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a2f      	ldr	r2, [pc, #188]	; (8004f28 <TIM_Base_SetConfig+0x114>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d02b      	beq.n	8004ec6 <TIM_Base_SetConfig+0xb2>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e74:	d027      	beq.n	8004ec6 <TIM_Base_SetConfig+0xb2>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	4a2c      	ldr	r2, [pc, #176]	; (8004f2c <TIM_Base_SetConfig+0x118>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d023      	beq.n	8004ec6 <TIM_Base_SetConfig+0xb2>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4a2b      	ldr	r2, [pc, #172]	; (8004f30 <TIM_Base_SetConfig+0x11c>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d01f      	beq.n	8004ec6 <TIM_Base_SetConfig+0xb2>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4a2a      	ldr	r2, [pc, #168]	; (8004f34 <TIM_Base_SetConfig+0x120>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d01b      	beq.n	8004ec6 <TIM_Base_SetConfig+0xb2>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a29      	ldr	r2, [pc, #164]	; (8004f38 <TIM_Base_SetConfig+0x124>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d017      	beq.n	8004ec6 <TIM_Base_SetConfig+0xb2>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4a28      	ldr	r2, [pc, #160]	; (8004f3c <TIM_Base_SetConfig+0x128>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d013      	beq.n	8004ec6 <TIM_Base_SetConfig+0xb2>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4a27      	ldr	r2, [pc, #156]	; (8004f40 <TIM_Base_SetConfig+0x12c>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d00f      	beq.n	8004ec6 <TIM_Base_SetConfig+0xb2>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4a26      	ldr	r2, [pc, #152]	; (8004f44 <TIM_Base_SetConfig+0x130>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d00b      	beq.n	8004ec6 <TIM_Base_SetConfig+0xb2>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4a25      	ldr	r2, [pc, #148]	; (8004f48 <TIM_Base_SetConfig+0x134>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d007      	beq.n	8004ec6 <TIM_Base_SetConfig+0xb2>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4a24      	ldr	r2, [pc, #144]	; (8004f4c <TIM_Base_SetConfig+0x138>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d003      	beq.n	8004ec6 <TIM_Base_SetConfig+0xb2>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a23      	ldr	r2, [pc, #140]	; (8004f50 <TIM_Base_SetConfig+0x13c>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d108      	bne.n	8004ed8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ecc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	68fa      	ldr	r2, [r7, #12]
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	695b      	ldr	r3, [r3, #20]
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	68fa      	ldr	r2, [r7, #12]
 8004eea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	689a      	ldr	r2, [r3, #8]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	4a0a      	ldr	r2, [pc, #40]	; (8004f28 <TIM_Base_SetConfig+0x114>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d003      	beq.n	8004f0c <TIM_Base_SetConfig+0xf8>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	4a0c      	ldr	r2, [pc, #48]	; (8004f38 <TIM_Base_SetConfig+0x124>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d103      	bne.n	8004f14 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	691a      	ldr	r2, [r3, #16]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2201      	movs	r2, #1
 8004f18:	615a      	str	r2, [r3, #20]
}
 8004f1a:	bf00      	nop
 8004f1c:	3714      	adds	r7, #20
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr
 8004f26:	bf00      	nop
 8004f28:	40010000 	.word	0x40010000
 8004f2c:	40000400 	.word	0x40000400
 8004f30:	40000800 	.word	0x40000800
 8004f34:	40000c00 	.word	0x40000c00
 8004f38:	40010400 	.word	0x40010400
 8004f3c:	40014000 	.word	0x40014000
 8004f40:	40014400 	.word	0x40014400
 8004f44:	40014800 	.word	0x40014800
 8004f48:	40001800 	.word	0x40001800
 8004f4c:	40001c00 	.word	0x40001c00
 8004f50:	40002000 	.word	0x40002000

08004f54 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b087      	sub	sp, #28
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6a1b      	ldr	r3, [r3, #32]
 8004f62:	f023 0201 	bic.w	r2, r3, #1
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a1b      	ldr	r3, [r3, #32]
 8004f6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	699b      	ldr	r3, [r3, #24]
 8004f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f7c:	68fa      	ldr	r2, [r7, #12]
 8004f7e:	4b2b      	ldr	r3, [pc, #172]	; (800502c <TIM_OC1_SetConfig+0xd8>)
 8004f80:	4013      	ands	r3, r2
 8004f82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f023 0303 	bic.w	r3, r3, #3
 8004f8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	68fa      	ldr	r2, [r7, #12]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	f023 0302 	bic.w	r3, r3, #2
 8004f9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	697a      	ldr	r2, [r7, #20]
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	4a21      	ldr	r2, [pc, #132]	; (8005030 <TIM_OC1_SetConfig+0xdc>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d003      	beq.n	8004fb8 <TIM_OC1_SetConfig+0x64>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	4a20      	ldr	r2, [pc, #128]	; (8005034 <TIM_OC1_SetConfig+0xe0>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d10c      	bne.n	8004fd2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	f023 0308 	bic.w	r3, r3, #8
 8004fbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	697a      	ldr	r2, [r7, #20]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	f023 0304 	bic.w	r3, r3, #4
 8004fd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4a16      	ldr	r2, [pc, #88]	; (8005030 <TIM_OC1_SetConfig+0xdc>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d003      	beq.n	8004fe2 <TIM_OC1_SetConfig+0x8e>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4a15      	ldr	r2, [pc, #84]	; (8005034 <TIM_OC1_SetConfig+0xe0>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d111      	bne.n	8005006 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fe8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ff0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	695b      	ldr	r3, [r3, #20]
 8004ff6:	693a      	ldr	r2, [r7, #16]
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	699b      	ldr	r3, [r3, #24]
 8005000:	693a      	ldr	r2, [r7, #16]
 8005002:	4313      	orrs	r3, r2
 8005004:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	693a      	ldr	r2, [r7, #16]
 800500a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	68fa      	ldr	r2, [r7, #12]
 8005010:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	685a      	ldr	r2, [r3, #4]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	697a      	ldr	r2, [r7, #20]
 800501e:	621a      	str	r2, [r3, #32]
}
 8005020:	bf00      	nop
 8005022:	371c      	adds	r7, #28
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr
 800502c:	fffeff8f 	.word	0xfffeff8f
 8005030:	40010000 	.word	0x40010000
 8005034:	40010400 	.word	0x40010400

08005038 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005038:	b480      	push	{r7}
 800503a:	b087      	sub	sp, #28
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6a1b      	ldr	r3, [r3, #32]
 8005046:	f023 0210 	bic.w	r2, r3, #16
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6a1b      	ldr	r3, [r3, #32]
 8005052:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	699b      	ldr	r3, [r3, #24]
 800505e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005060:	68fa      	ldr	r2, [r7, #12]
 8005062:	4b2e      	ldr	r3, [pc, #184]	; (800511c <TIM_OC2_SetConfig+0xe4>)
 8005064:	4013      	ands	r3, r2
 8005066:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800506e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	021b      	lsls	r3, r3, #8
 8005076:	68fa      	ldr	r2, [r7, #12]
 8005078:	4313      	orrs	r3, r2
 800507a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	f023 0320 	bic.w	r3, r3, #32
 8005082:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	011b      	lsls	r3, r3, #4
 800508a:	697a      	ldr	r2, [r7, #20]
 800508c:	4313      	orrs	r3, r2
 800508e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	4a23      	ldr	r2, [pc, #140]	; (8005120 <TIM_OC2_SetConfig+0xe8>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d003      	beq.n	80050a0 <TIM_OC2_SetConfig+0x68>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	4a22      	ldr	r2, [pc, #136]	; (8005124 <TIM_OC2_SetConfig+0xec>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d10d      	bne.n	80050bc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	011b      	lsls	r3, r3, #4
 80050ae:	697a      	ldr	r2, [r7, #20]
 80050b0:	4313      	orrs	r3, r2
 80050b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	4a18      	ldr	r2, [pc, #96]	; (8005120 <TIM_OC2_SetConfig+0xe8>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d003      	beq.n	80050cc <TIM_OC2_SetConfig+0x94>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	4a17      	ldr	r2, [pc, #92]	; (8005124 <TIM_OC2_SetConfig+0xec>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d113      	bne.n	80050f4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80050da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	695b      	ldr	r3, [r3, #20]
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	693a      	ldr	r2, [r7, #16]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	699b      	ldr	r3, [r3, #24]
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	693a      	ldr	r2, [r7, #16]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	693a      	ldr	r2, [r7, #16]
 80050f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	68fa      	ldr	r2, [r7, #12]
 80050fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	685a      	ldr	r2, [r3, #4]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	697a      	ldr	r2, [r7, #20]
 800510c:	621a      	str	r2, [r3, #32]
}
 800510e:	bf00      	nop
 8005110:	371c      	adds	r7, #28
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr
 800511a:	bf00      	nop
 800511c:	feff8fff 	.word	0xfeff8fff
 8005120:	40010000 	.word	0x40010000
 8005124:	40010400 	.word	0x40010400

08005128 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005128:	b480      	push	{r7}
 800512a:	b087      	sub	sp, #28
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6a1b      	ldr	r3, [r3, #32]
 8005136:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6a1b      	ldr	r3, [r3, #32]
 8005142:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	69db      	ldr	r3, [r3, #28]
 800514e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005150:	68fa      	ldr	r2, [r7, #12]
 8005152:	4b2d      	ldr	r3, [pc, #180]	; (8005208 <TIM_OC3_SetConfig+0xe0>)
 8005154:	4013      	ands	r3, r2
 8005156:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f023 0303 	bic.w	r3, r3, #3
 800515e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	68fa      	ldr	r2, [r7, #12]
 8005166:	4313      	orrs	r3, r2
 8005168:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005170:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	021b      	lsls	r3, r3, #8
 8005178:	697a      	ldr	r2, [r7, #20]
 800517a:	4313      	orrs	r3, r2
 800517c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4a22      	ldr	r2, [pc, #136]	; (800520c <TIM_OC3_SetConfig+0xe4>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d003      	beq.n	800518e <TIM_OC3_SetConfig+0x66>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4a21      	ldr	r2, [pc, #132]	; (8005210 <TIM_OC3_SetConfig+0xe8>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d10d      	bne.n	80051aa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005194:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	68db      	ldr	r3, [r3, #12]
 800519a:	021b      	lsls	r3, r3, #8
 800519c:	697a      	ldr	r2, [r7, #20]
 800519e:	4313      	orrs	r3, r2
 80051a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80051a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a17      	ldr	r2, [pc, #92]	; (800520c <TIM_OC3_SetConfig+0xe4>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d003      	beq.n	80051ba <TIM_OC3_SetConfig+0x92>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	4a16      	ldr	r2, [pc, #88]	; (8005210 <TIM_OC3_SetConfig+0xe8>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d113      	bne.n	80051e2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80051c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80051c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	695b      	ldr	r3, [r3, #20]
 80051ce:	011b      	lsls	r3, r3, #4
 80051d0:	693a      	ldr	r2, [r7, #16]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	699b      	ldr	r3, [r3, #24]
 80051da:	011b      	lsls	r3, r3, #4
 80051dc:	693a      	ldr	r2, [r7, #16]
 80051de:	4313      	orrs	r3, r2
 80051e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	693a      	ldr	r2, [r7, #16]
 80051e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	68fa      	ldr	r2, [r7, #12]
 80051ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	685a      	ldr	r2, [r3, #4]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	697a      	ldr	r2, [r7, #20]
 80051fa:	621a      	str	r2, [r3, #32]
}
 80051fc:	bf00      	nop
 80051fe:	371c      	adds	r7, #28
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr
 8005208:	fffeff8f 	.word	0xfffeff8f
 800520c:	40010000 	.word	0x40010000
 8005210:	40010400 	.word	0x40010400

08005214 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005214:	b480      	push	{r7}
 8005216:	b087      	sub	sp, #28
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6a1b      	ldr	r3, [r3, #32]
 8005222:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6a1b      	ldr	r3, [r3, #32]
 800522e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	69db      	ldr	r3, [r3, #28]
 800523a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800523c:	68fa      	ldr	r2, [r7, #12]
 800523e:	4b1e      	ldr	r3, [pc, #120]	; (80052b8 <TIM_OC4_SetConfig+0xa4>)
 8005240:	4013      	ands	r3, r2
 8005242:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800524a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	021b      	lsls	r3, r3, #8
 8005252:	68fa      	ldr	r2, [r7, #12]
 8005254:	4313      	orrs	r3, r2
 8005256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800525e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	031b      	lsls	r3, r3, #12
 8005266:	693a      	ldr	r2, [r7, #16]
 8005268:	4313      	orrs	r3, r2
 800526a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	4a13      	ldr	r2, [pc, #76]	; (80052bc <TIM_OC4_SetConfig+0xa8>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d003      	beq.n	800527c <TIM_OC4_SetConfig+0x68>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	4a12      	ldr	r2, [pc, #72]	; (80052c0 <TIM_OC4_SetConfig+0xac>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d109      	bne.n	8005290 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005282:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	695b      	ldr	r3, [r3, #20]
 8005288:	019b      	lsls	r3, r3, #6
 800528a:	697a      	ldr	r2, [r7, #20]
 800528c:	4313      	orrs	r3, r2
 800528e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	697a      	ldr	r2, [r7, #20]
 8005294:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	68fa      	ldr	r2, [r7, #12]
 800529a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	685a      	ldr	r2, [r3, #4]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	693a      	ldr	r2, [r7, #16]
 80052a8:	621a      	str	r2, [r3, #32]
}
 80052aa:	bf00      	nop
 80052ac:	371c      	adds	r7, #28
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr
 80052b6:	bf00      	nop
 80052b8:	feff8fff 	.word	0xfeff8fff
 80052bc:	40010000 	.word	0x40010000
 80052c0:	40010400 	.word	0x40010400

080052c4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b087      	sub	sp, #28
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6a1b      	ldr	r3, [r3, #32]
 80052d2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6a1b      	ldr	r3, [r3, #32]
 80052de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80052ec:	68fa      	ldr	r2, [r7, #12]
 80052ee:	4b1b      	ldr	r3, [pc, #108]	; (800535c <TIM_OC5_SetConfig+0x98>)
 80052f0:	4013      	ands	r3, r2
 80052f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	68fa      	ldr	r2, [r7, #12]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005304:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	041b      	lsls	r3, r3, #16
 800530c:	693a      	ldr	r2, [r7, #16]
 800530e:	4313      	orrs	r3, r2
 8005310:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	4a12      	ldr	r2, [pc, #72]	; (8005360 <TIM_OC5_SetConfig+0x9c>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d003      	beq.n	8005322 <TIM_OC5_SetConfig+0x5e>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4a11      	ldr	r2, [pc, #68]	; (8005364 <TIM_OC5_SetConfig+0xa0>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d109      	bne.n	8005336 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005328:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	695b      	ldr	r3, [r3, #20]
 800532e:	021b      	lsls	r3, r3, #8
 8005330:	697a      	ldr	r2, [r7, #20]
 8005332:	4313      	orrs	r3, r2
 8005334:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	697a      	ldr	r2, [r7, #20]
 800533a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	68fa      	ldr	r2, [r7, #12]
 8005340:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	685a      	ldr	r2, [r3, #4]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	693a      	ldr	r2, [r7, #16]
 800534e:	621a      	str	r2, [r3, #32]
}
 8005350:	bf00      	nop
 8005352:	371c      	adds	r7, #28
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr
 800535c:	fffeff8f 	.word	0xfffeff8f
 8005360:	40010000 	.word	0x40010000
 8005364:	40010400 	.word	0x40010400

08005368 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005368:	b480      	push	{r7}
 800536a:	b087      	sub	sp, #28
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6a1b      	ldr	r3, [r3, #32]
 8005376:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a1b      	ldr	r3, [r3, #32]
 8005382:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800538e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005390:	68fa      	ldr	r2, [r7, #12]
 8005392:	4b1c      	ldr	r3, [pc, #112]	; (8005404 <TIM_OC6_SetConfig+0x9c>)
 8005394:	4013      	ands	r3, r2
 8005396:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	021b      	lsls	r3, r3, #8
 800539e:	68fa      	ldr	r2, [r7, #12]
 80053a0:	4313      	orrs	r3, r2
 80053a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80053aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	051b      	lsls	r3, r3, #20
 80053b2:	693a      	ldr	r2, [r7, #16]
 80053b4:	4313      	orrs	r3, r2
 80053b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	4a13      	ldr	r2, [pc, #76]	; (8005408 <TIM_OC6_SetConfig+0xa0>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d003      	beq.n	80053c8 <TIM_OC6_SetConfig+0x60>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	4a12      	ldr	r2, [pc, #72]	; (800540c <TIM_OC6_SetConfig+0xa4>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d109      	bne.n	80053dc <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053ce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	695b      	ldr	r3, [r3, #20]
 80053d4:	029b      	lsls	r3, r3, #10
 80053d6:	697a      	ldr	r2, [r7, #20]
 80053d8:	4313      	orrs	r3, r2
 80053da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	697a      	ldr	r2, [r7, #20]
 80053e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	68fa      	ldr	r2, [r7, #12]
 80053e6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	685a      	ldr	r2, [r3, #4]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	693a      	ldr	r2, [r7, #16]
 80053f4:	621a      	str	r2, [r3, #32]
}
 80053f6:	bf00      	nop
 80053f8:	371c      	adds	r7, #28
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr
 8005402:	bf00      	nop
 8005404:	feff8fff 	.word	0xfeff8fff
 8005408:	40010000 	.word	0x40010000
 800540c:	40010400 	.word	0x40010400

08005410 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b086      	sub	sp, #24
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800541a:	2300      	movs	r3, #0
 800541c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800542c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	693a      	ldr	r2, [r7, #16]
 8005434:	4313      	orrs	r3, r2
 8005436:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005438:	693a      	ldr	r2, [r7, #16]
 800543a:	4b3e      	ldr	r3, [pc, #248]	; (8005534 <TIM_SlaveTimer_SetConfig+0x124>)
 800543c:	4013      	ands	r3, r2
 800543e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	693a      	ldr	r2, [r7, #16]
 8005446:	4313      	orrs	r3, r2
 8005448:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	693a      	ldr	r2, [r7, #16]
 8005450:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	2b70      	cmp	r3, #112	; 0x70
 8005458:	d01a      	beq.n	8005490 <TIM_SlaveTimer_SetConfig+0x80>
 800545a:	2b70      	cmp	r3, #112	; 0x70
 800545c:	d860      	bhi.n	8005520 <TIM_SlaveTimer_SetConfig+0x110>
 800545e:	2b60      	cmp	r3, #96	; 0x60
 8005460:	d054      	beq.n	800550c <TIM_SlaveTimer_SetConfig+0xfc>
 8005462:	2b60      	cmp	r3, #96	; 0x60
 8005464:	d85c      	bhi.n	8005520 <TIM_SlaveTimer_SetConfig+0x110>
 8005466:	2b50      	cmp	r3, #80	; 0x50
 8005468:	d046      	beq.n	80054f8 <TIM_SlaveTimer_SetConfig+0xe8>
 800546a:	2b50      	cmp	r3, #80	; 0x50
 800546c:	d858      	bhi.n	8005520 <TIM_SlaveTimer_SetConfig+0x110>
 800546e:	2b40      	cmp	r3, #64	; 0x40
 8005470:	d019      	beq.n	80054a6 <TIM_SlaveTimer_SetConfig+0x96>
 8005472:	2b40      	cmp	r3, #64	; 0x40
 8005474:	d854      	bhi.n	8005520 <TIM_SlaveTimer_SetConfig+0x110>
 8005476:	2b30      	cmp	r3, #48	; 0x30
 8005478:	d055      	beq.n	8005526 <TIM_SlaveTimer_SetConfig+0x116>
 800547a:	2b30      	cmp	r3, #48	; 0x30
 800547c:	d850      	bhi.n	8005520 <TIM_SlaveTimer_SetConfig+0x110>
 800547e:	2b20      	cmp	r3, #32
 8005480:	d051      	beq.n	8005526 <TIM_SlaveTimer_SetConfig+0x116>
 8005482:	2b20      	cmp	r3, #32
 8005484:	d84c      	bhi.n	8005520 <TIM_SlaveTimer_SetConfig+0x110>
 8005486:	2b00      	cmp	r3, #0
 8005488:	d04d      	beq.n	8005526 <TIM_SlaveTimer_SetConfig+0x116>
 800548a:	2b10      	cmp	r3, #16
 800548c:	d04b      	beq.n	8005526 <TIM_SlaveTimer_SetConfig+0x116>
 800548e:	e047      	b.n	8005520 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6818      	ldr	r0, [r3, #0]
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	68d9      	ldr	r1, [r3, #12]
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	689a      	ldr	r2, [r3, #8]
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	691b      	ldr	r3, [r3, #16]
 80054a0:	f000 f8c4 	bl	800562c <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 80054a4:	e040      	b.n	8005528 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	2b05      	cmp	r3, #5
 80054ac:	d101      	bne.n	80054b2 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	e03b      	b.n	800552a <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	6a1b      	ldr	r3, [r3, #32]
 80054b8:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	6a1a      	ldr	r2, [r3, #32]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f022 0201 	bic.w	r2, r2, #1
 80054c8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	699b      	ldr	r3, [r3, #24]
 80054d0:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054d8:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	691b      	ldr	r3, [r3, #16]
 80054de:	011b      	lsls	r3, r3, #4
 80054e0:	68ba      	ldr	r2, [r7, #8]
 80054e2:	4313      	orrs	r3, r2
 80054e4:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	68ba      	ldr	r2, [r7, #8]
 80054ec:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	68fa      	ldr	r2, [r7, #12]
 80054f4:	621a      	str	r2, [r3, #32]
      break;
 80054f6:	e017      	b.n	8005528 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6818      	ldr	r0, [r3, #0]
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	6899      	ldr	r1, [r3, #8]
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	691b      	ldr	r3, [r3, #16]
 8005504:	461a      	mov	r2, r3
 8005506:	f000 f817 	bl	8005538 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800550a:	e00d      	b.n	8005528 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6818      	ldr	r0, [r3, #0]
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	6899      	ldr	r1, [r3, #8]
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	691b      	ldr	r3, [r3, #16]
 8005518:	461a      	mov	r2, r3
 800551a:	f000 f83c 	bl	8005596 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800551e:	e003      	b.n	8005528 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	75fb      	strb	r3, [r7, #23]
      break;
 8005524:	e000      	b.n	8005528 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8005526:	bf00      	nop
  }

  return status;
 8005528:	7dfb      	ldrb	r3, [r7, #23]
}
 800552a:	4618      	mov	r0, r3
 800552c:	3718      	adds	r7, #24
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop
 8005534:	fffefff8 	.word	0xfffefff8

08005538 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005538:	b480      	push	{r7}
 800553a:	b087      	sub	sp, #28
 800553c:	af00      	add	r7, sp, #0
 800553e:	60f8      	str	r0, [r7, #12]
 8005540:	60b9      	str	r1, [r7, #8]
 8005542:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	6a1b      	ldr	r3, [r3, #32]
 8005548:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	6a1b      	ldr	r3, [r3, #32]
 800554e:	f023 0201 	bic.w	r2, r3, #1
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	699b      	ldr	r3, [r3, #24]
 800555a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005562:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	011b      	lsls	r3, r3, #4
 8005568:	693a      	ldr	r2, [r7, #16]
 800556a:	4313      	orrs	r3, r2
 800556c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	f023 030a 	bic.w	r3, r3, #10
 8005574:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005576:	697a      	ldr	r2, [r7, #20]
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	4313      	orrs	r3, r2
 800557c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	693a      	ldr	r2, [r7, #16]
 8005582:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	697a      	ldr	r2, [r7, #20]
 8005588:	621a      	str	r2, [r3, #32]
}
 800558a:	bf00      	nop
 800558c:	371c      	adds	r7, #28
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr

08005596 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005596:	b480      	push	{r7}
 8005598:	b087      	sub	sp, #28
 800559a:	af00      	add	r7, sp, #0
 800559c:	60f8      	str	r0, [r7, #12]
 800559e:	60b9      	str	r1, [r7, #8]
 80055a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	6a1b      	ldr	r3, [r3, #32]
 80055a6:	f023 0210 	bic.w	r2, r3, #16
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	699b      	ldr	r3, [r3, #24]
 80055b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	6a1b      	ldr	r3, [r3, #32]
 80055b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80055c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	031b      	lsls	r3, r3, #12
 80055c6:	697a      	ldr	r2, [r7, #20]
 80055c8:	4313      	orrs	r3, r2
 80055ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80055d2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	011b      	lsls	r3, r3, #4
 80055d8:	693a      	ldr	r2, [r7, #16]
 80055da:	4313      	orrs	r3, r2
 80055dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	697a      	ldr	r2, [r7, #20]
 80055e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	693a      	ldr	r2, [r7, #16]
 80055e8:	621a      	str	r2, [r3, #32]
}
 80055ea:	bf00      	nop
 80055ec:	371c      	adds	r7, #28
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr

080055f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80055f6:	b480      	push	{r7}
 80055f8:	b085      	sub	sp, #20
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	6078      	str	r0, [r7, #4]
 80055fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800560c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800560e:	683a      	ldr	r2, [r7, #0]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	4313      	orrs	r3, r2
 8005614:	f043 0307 	orr.w	r3, r3, #7
 8005618:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	68fa      	ldr	r2, [r7, #12]
 800561e:	609a      	str	r2, [r3, #8]
}
 8005620:	bf00      	nop
 8005622:	3714      	adds	r7, #20
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr

0800562c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800562c:	b480      	push	{r7}
 800562e:	b087      	sub	sp, #28
 8005630:	af00      	add	r7, sp, #0
 8005632:	60f8      	str	r0, [r7, #12]
 8005634:	60b9      	str	r1, [r7, #8]
 8005636:	607a      	str	r2, [r7, #4]
 8005638:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005646:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	021a      	lsls	r2, r3, #8
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	431a      	orrs	r2, r3
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	4313      	orrs	r3, r2
 8005654:	697a      	ldr	r2, [r7, #20]
 8005656:	4313      	orrs	r3, r2
 8005658:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	697a      	ldr	r2, [r7, #20]
 800565e:	609a      	str	r2, [r3, #8]
}
 8005660:	bf00      	nop
 8005662:	371c      	adds	r7, #28
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr

0800566c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800566c:	b480      	push	{r7}
 800566e:	b087      	sub	sp, #28
 8005670:	af00      	add	r7, sp, #0
 8005672:	60f8      	str	r0, [r7, #12]
 8005674:	60b9      	str	r1, [r7, #8]
 8005676:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	f003 031f 	and.w	r3, r3, #31
 800567e:	2201      	movs	r2, #1
 8005680:	fa02 f303 	lsl.w	r3, r2, r3
 8005684:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	6a1a      	ldr	r2, [r3, #32]
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	43db      	mvns	r3, r3
 800568e:	401a      	ands	r2, r3
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	6a1a      	ldr	r2, [r3, #32]
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	f003 031f 	and.w	r3, r3, #31
 800569e:	6879      	ldr	r1, [r7, #4]
 80056a0:	fa01 f303 	lsl.w	r3, r1, r3
 80056a4:	431a      	orrs	r2, r3
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	621a      	str	r2, [r3, #32]
}
 80056aa:	bf00      	nop
 80056ac:	371c      	adds	r7, #28
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr
	...

080056b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b085      	sub	sp, #20
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d101      	bne.n	80056d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80056cc:	2302      	movs	r3, #2
 80056ce:	e06d      	b.n	80057ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2202      	movs	r2, #2
 80056dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a30      	ldr	r2, [pc, #192]	; (80057b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d004      	beq.n	8005704 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a2f      	ldr	r2, [pc, #188]	; (80057bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d108      	bne.n	8005716 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800570a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	68fa      	ldr	r2, [r7, #12]
 8005712:	4313      	orrs	r3, r2
 8005714:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800571c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	68fa      	ldr	r2, [r7, #12]
 8005724:	4313      	orrs	r3, r2
 8005726:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	68fa      	ldr	r2, [r7, #12]
 800572e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a20      	ldr	r2, [pc, #128]	; (80057b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d022      	beq.n	8005780 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005742:	d01d      	beq.n	8005780 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a1d      	ldr	r2, [pc, #116]	; (80057c0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d018      	beq.n	8005780 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a1c      	ldr	r2, [pc, #112]	; (80057c4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d013      	beq.n	8005780 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a1a      	ldr	r2, [pc, #104]	; (80057c8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d00e      	beq.n	8005780 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a15      	ldr	r2, [pc, #84]	; (80057bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d009      	beq.n	8005780 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a16      	ldr	r2, [pc, #88]	; (80057cc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d004      	beq.n	8005780 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a15      	ldr	r2, [pc, #84]	; (80057d0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d10c      	bne.n	800579a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005786:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	68ba      	ldr	r2, [r7, #8]
 800578e:	4313      	orrs	r3, r2
 8005790:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	68ba      	ldr	r2, [r7, #8]
 8005798:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2201      	movs	r2, #1
 800579e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2200      	movs	r2, #0
 80057a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057aa:	2300      	movs	r3, #0
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	3714      	adds	r7, #20
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr
 80057b8:	40010000 	.word	0x40010000
 80057bc:	40010400 	.word	0x40010400
 80057c0:	40000400 	.word	0x40000400
 80057c4:	40000800 	.word	0x40000800
 80057c8:	40000c00 	.word	0x40000c00
 80057cc:	40014000 	.word	0x40014000
 80057d0:	40001800 	.word	0x40001800

080057d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b083      	sub	sp, #12
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80057dc:	bf00      	nop
 80057de:	370c      	adds	r7, #12
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr

080057e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b083      	sub	sp, #12
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80057f0:	bf00      	nop
 80057f2:	370c      	adds	r7, #12
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr

080057fc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b083      	sub	sp, #12
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005804:	bf00      	nop
 8005806:	370c      	adds	r7, #12
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr

08005810 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b082      	sub	sp, #8
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d101      	bne.n	8005822 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	e040      	b.n	80058a4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005826:	2b00      	cmp	r3, #0
 8005828:	d106      	bne.n	8005838 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2200      	movs	r2, #0
 800582e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f7fc fa10 	bl	8001c58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2224      	movs	r2, #36	; 0x24
 800583c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f022 0201 	bic.w	r2, r2, #1
 800584c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f000 f82c 	bl	80058ac <UART_SetConfig>
 8005854:	4603      	mov	r3, r0
 8005856:	2b01      	cmp	r3, #1
 8005858:	d101      	bne.n	800585e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	e022      	b.n	80058a4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005862:	2b00      	cmp	r3, #0
 8005864:	d002      	beq.n	800586c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f000 fa84 	bl	8005d74 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	685a      	ldr	r2, [r3, #4]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800587a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	689a      	ldr	r2, [r3, #8]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800588a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f042 0201 	orr.w	r2, r2, #1
 800589a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f000 fb0b 	bl	8005eb8 <UART_CheckIdleState>
 80058a2:	4603      	mov	r3, r0
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3708      	adds	r7, #8
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}

080058ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b088      	sub	sp, #32
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80058b4:	2300      	movs	r3, #0
 80058b6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	689a      	ldr	r2, [r3, #8]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	691b      	ldr	r3, [r3, #16]
 80058c0:	431a      	orrs	r2, r3
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	695b      	ldr	r3, [r3, #20]
 80058c6:	431a      	orrs	r2, r3
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	69db      	ldr	r3, [r3, #28]
 80058cc:	4313      	orrs	r3, r2
 80058ce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	4ba6      	ldr	r3, [pc, #664]	; (8005b70 <UART_SetConfig+0x2c4>)
 80058d8:	4013      	ands	r3, r2
 80058da:	687a      	ldr	r2, [r7, #4]
 80058dc:	6812      	ldr	r2, [r2, #0]
 80058de:	6979      	ldr	r1, [r7, #20]
 80058e0:	430b      	orrs	r3, r1
 80058e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	68da      	ldr	r2, [r3, #12]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	430a      	orrs	r2, r1
 80058f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	699b      	ldr	r3, [r3, #24]
 80058fe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6a1b      	ldr	r3, [r3, #32]
 8005904:	697a      	ldr	r2, [r7, #20]
 8005906:	4313      	orrs	r3, r2
 8005908:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	697a      	ldr	r2, [r7, #20]
 800591a:	430a      	orrs	r2, r1
 800591c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a94      	ldr	r2, [pc, #592]	; (8005b74 <UART_SetConfig+0x2c8>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d120      	bne.n	800596a <UART_SetConfig+0xbe>
 8005928:	4b93      	ldr	r3, [pc, #588]	; (8005b78 <UART_SetConfig+0x2cc>)
 800592a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800592e:	f003 0303 	and.w	r3, r3, #3
 8005932:	2b03      	cmp	r3, #3
 8005934:	d816      	bhi.n	8005964 <UART_SetConfig+0xb8>
 8005936:	a201      	add	r2, pc, #4	; (adr r2, 800593c <UART_SetConfig+0x90>)
 8005938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800593c:	0800594d 	.word	0x0800594d
 8005940:	08005959 	.word	0x08005959
 8005944:	08005953 	.word	0x08005953
 8005948:	0800595f 	.word	0x0800595f
 800594c:	2301      	movs	r3, #1
 800594e:	77fb      	strb	r3, [r7, #31]
 8005950:	e150      	b.n	8005bf4 <UART_SetConfig+0x348>
 8005952:	2302      	movs	r3, #2
 8005954:	77fb      	strb	r3, [r7, #31]
 8005956:	e14d      	b.n	8005bf4 <UART_SetConfig+0x348>
 8005958:	2304      	movs	r3, #4
 800595a:	77fb      	strb	r3, [r7, #31]
 800595c:	e14a      	b.n	8005bf4 <UART_SetConfig+0x348>
 800595e:	2308      	movs	r3, #8
 8005960:	77fb      	strb	r3, [r7, #31]
 8005962:	e147      	b.n	8005bf4 <UART_SetConfig+0x348>
 8005964:	2310      	movs	r3, #16
 8005966:	77fb      	strb	r3, [r7, #31]
 8005968:	e144      	b.n	8005bf4 <UART_SetConfig+0x348>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a83      	ldr	r2, [pc, #524]	; (8005b7c <UART_SetConfig+0x2d0>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d132      	bne.n	80059da <UART_SetConfig+0x12e>
 8005974:	4b80      	ldr	r3, [pc, #512]	; (8005b78 <UART_SetConfig+0x2cc>)
 8005976:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800597a:	f003 030c 	and.w	r3, r3, #12
 800597e:	2b0c      	cmp	r3, #12
 8005980:	d828      	bhi.n	80059d4 <UART_SetConfig+0x128>
 8005982:	a201      	add	r2, pc, #4	; (adr r2, 8005988 <UART_SetConfig+0xdc>)
 8005984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005988:	080059bd 	.word	0x080059bd
 800598c:	080059d5 	.word	0x080059d5
 8005990:	080059d5 	.word	0x080059d5
 8005994:	080059d5 	.word	0x080059d5
 8005998:	080059c9 	.word	0x080059c9
 800599c:	080059d5 	.word	0x080059d5
 80059a0:	080059d5 	.word	0x080059d5
 80059a4:	080059d5 	.word	0x080059d5
 80059a8:	080059c3 	.word	0x080059c3
 80059ac:	080059d5 	.word	0x080059d5
 80059b0:	080059d5 	.word	0x080059d5
 80059b4:	080059d5 	.word	0x080059d5
 80059b8:	080059cf 	.word	0x080059cf
 80059bc:	2300      	movs	r3, #0
 80059be:	77fb      	strb	r3, [r7, #31]
 80059c0:	e118      	b.n	8005bf4 <UART_SetConfig+0x348>
 80059c2:	2302      	movs	r3, #2
 80059c4:	77fb      	strb	r3, [r7, #31]
 80059c6:	e115      	b.n	8005bf4 <UART_SetConfig+0x348>
 80059c8:	2304      	movs	r3, #4
 80059ca:	77fb      	strb	r3, [r7, #31]
 80059cc:	e112      	b.n	8005bf4 <UART_SetConfig+0x348>
 80059ce:	2308      	movs	r3, #8
 80059d0:	77fb      	strb	r3, [r7, #31]
 80059d2:	e10f      	b.n	8005bf4 <UART_SetConfig+0x348>
 80059d4:	2310      	movs	r3, #16
 80059d6:	77fb      	strb	r3, [r7, #31]
 80059d8:	e10c      	b.n	8005bf4 <UART_SetConfig+0x348>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a68      	ldr	r2, [pc, #416]	; (8005b80 <UART_SetConfig+0x2d4>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d120      	bne.n	8005a26 <UART_SetConfig+0x17a>
 80059e4:	4b64      	ldr	r3, [pc, #400]	; (8005b78 <UART_SetConfig+0x2cc>)
 80059e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059ea:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80059ee:	2b30      	cmp	r3, #48	; 0x30
 80059f0:	d013      	beq.n	8005a1a <UART_SetConfig+0x16e>
 80059f2:	2b30      	cmp	r3, #48	; 0x30
 80059f4:	d814      	bhi.n	8005a20 <UART_SetConfig+0x174>
 80059f6:	2b20      	cmp	r3, #32
 80059f8:	d009      	beq.n	8005a0e <UART_SetConfig+0x162>
 80059fa:	2b20      	cmp	r3, #32
 80059fc:	d810      	bhi.n	8005a20 <UART_SetConfig+0x174>
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d002      	beq.n	8005a08 <UART_SetConfig+0x15c>
 8005a02:	2b10      	cmp	r3, #16
 8005a04:	d006      	beq.n	8005a14 <UART_SetConfig+0x168>
 8005a06:	e00b      	b.n	8005a20 <UART_SetConfig+0x174>
 8005a08:	2300      	movs	r3, #0
 8005a0a:	77fb      	strb	r3, [r7, #31]
 8005a0c:	e0f2      	b.n	8005bf4 <UART_SetConfig+0x348>
 8005a0e:	2302      	movs	r3, #2
 8005a10:	77fb      	strb	r3, [r7, #31]
 8005a12:	e0ef      	b.n	8005bf4 <UART_SetConfig+0x348>
 8005a14:	2304      	movs	r3, #4
 8005a16:	77fb      	strb	r3, [r7, #31]
 8005a18:	e0ec      	b.n	8005bf4 <UART_SetConfig+0x348>
 8005a1a:	2308      	movs	r3, #8
 8005a1c:	77fb      	strb	r3, [r7, #31]
 8005a1e:	e0e9      	b.n	8005bf4 <UART_SetConfig+0x348>
 8005a20:	2310      	movs	r3, #16
 8005a22:	77fb      	strb	r3, [r7, #31]
 8005a24:	e0e6      	b.n	8005bf4 <UART_SetConfig+0x348>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a56      	ldr	r2, [pc, #344]	; (8005b84 <UART_SetConfig+0x2d8>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d120      	bne.n	8005a72 <UART_SetConfig+0x1c6>
 8005a30:	4b51      	ldr	r3, [pc, #324]	; (8005b78 <UART_SetConfig+0x2cc>)
 8005a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a36:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005a3a:	2bc0      	cmp	r3, #192	; 0xc0
 8005a3c:	d013      	beq.n	8005a66 <UART_SetConfig+0x1ba>
 8005a3e:	2bc0      	cmp	r3, #192	; 0xc0
 8005a40:	d814      	bhi.n	8005a6c <UART_SetConfig+0x1c0>
 8005a42:	2b80      	cmp	r3, #128	; 0x80
 8005a44:	d009      	beq.n	8005a5a <UART_SetConfig+0x1ae>
 8005a46:	2b80      	cmp	r3, #128	; 0x80
 8005a48:	d810      	bhi.n	8005a6c <UART_SetConfig+0x1c0>
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d002      	beq.n	8005a54 <UART_SetConfig+0x1a8>
 8005a4e:	2b40      	cmp	r3, #64	; 0x40
 8005a50:	d006      	beq.n	8005a60 <UART_SetConfig+0x1b4>
 8005a52:	e00b      	b.n	8005a6c <UART_SetConfig+0x1c0>
 8005a54:	2300      	movs	r3, #0
 8005a56:	77fb      	strb	r3, [r7, #31]
 8005a58:	e0cc      	b.n	8005bf4 <UART_SetConfig+0x348>
 8005a5a:	2302      	movs	r3, #2
 8005a5c:	77fb      	strb	r3, [r7, #31]
 8005a5e:	e0c9      	b.n	8005bf4 <UART_SetConfig+0x348>
 8005a60:	2304      	movs	r3, #4
 8005a62:	77fb      	strb	r3, [r7, #31]
 8005a64:	e0c6      	b.n	8005bf4 <UART_SetConfig+0x348>
 8005a66:	2308      	movs	r3, #8
 8005a68:	77fb      	strb	r3, [r7, #31]
 8005a6a:	e0c3      	b.n	8005bf4 <UART_SetConfig+0x348>
 8005a6c:	2310      	movs	r3, #16
 8005a6e:	77fb      	strb	r3, [r7, #31]
 8005a70:	e0c0      	b.n	8005bf4 <UART_SetConfig+0x348>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a44      	ldr	r2, [pc, #272]	; (8005b88 <UART_SetConfig+0x2dc>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d125      	bne.n	8005ac8 <UART_SetConfig+0x21c>
 8005a7c:	4b3e      	ldr	r3, [pc, #248]	; (8005b78 <UART_SetConfig+0x2cc>)
 8005a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a8a:	d017      	beq.n	8005abc <UART_SetConfig+0x210>
 8005a8c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a90:	d817      	bhi.n	8005ac2 <UART_SetConfig+0x216>
 8005a92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a96:	d00b      	beq.n	8005ab0 <UART_SetConfig+0x204>
 8005a98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a9c:	d811      	bhi.n	8005ac2 <UART_SetConfig+0x216>
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d003      	beq.n	8005aaa <UART_SetConfig+0x1fe>
 8005aa2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005aa6:	d006      	beq.n	8005ab6 <UART_SetConfig+0x20a>
 8005aa8:	e00b      	b.n	8005ac2 <UART_SetConfig+0x216>
 8005aaa:	2300      	movs	r3, #0
 8005aac:	77fb      	strb	r3, [r7, #31]
 8005aae:	e0a1      	b.n	8005bf4 <UART_SetConfig+0x348>
 8005ab0:	2302      	movs	r3, #2
 8005ab2:	77fb      	strb	r3, [r7, #31]
 8005ab4:	e09e      	b.n	8005bf4 <UART_SetConfig+0x348>
 8005ab6:	2304      	movs	r3, #4
 8005ab8:	77fb      	strb	r3, [r7, #31]
 8005aba:	e09b      	b.n	8005bf4 <UART_SetConfig+0x348>
 8005abc:	2308      	movs	r3, #8
 8005abe:	77fb      	strb	r3, [r7, #31]
 8005ac0:	e098      	b.n	8005bf4 <UART_SetConfig+0x348>
 8005ac2:	2310      	movs	r3, #16
 8005ac4:	77fb      	strb	r3, [r7, #31]
 8005ac6:	e095      	b.n	8005bf4 <UART_SetConfig+0x348>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a2f      	ldr	r2, [pc, #188]	; (8005b8c <UART_SetConfig+0x2e0>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d125      	bne.n	8005b1e <UART_SetConfig+0x272>
 8005ad2:	4b29      	ldr	r3, [pc, #164]	; (8005b78 <UART_SetConfig+0x2cc>)
 8005ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ad8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005adc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ae0:	d017      	beq.n	8005b12 <UART_SetConfig+0x266>
 8005ae2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ae6:	d817      	bhi.n	8005b18 <UART_SetConfig+0x26c>
 8005ae8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005aec:	d00b      	beq.n	8005b06 <UART_SetConfig+0x25a>
 8005aee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005af2:	d811      	bhi.n	8005b18 <UART_SetConfig+0x26c>
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d003      	beq.n	8005b00 <UART_SetConfig+0x254>
 8005af8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005afc:	d006      	beq.n	8005b0c <UART_SetConfig+0x260>
 8005afe:	e00b      	b.n	8005b18 <UART_SetConfig+0x26c>
 8005b00:	2301      	movs	r3, #1
 8005b02:	77fb      	strb	r3, [r7, #31]
 8005b04:	e076      	b.n	8005bf4 <UART_SetConfig+0x348>
 8005b06:	2302      	movs	r3, #2
 8005b08:	77fb      	strb	r3, [r7, #31]
 8005b0a:	e073      	b.n	8005bf4 <UART_SetConfig+0x348>
 8005b0c:	2304      	movs	r3, #4
 8005b0e:	77fb      	strb	r3, [r7, #31]
 8005b10:	e070      	b.n	8005bf4 <UART_SetConfig+0x348>
 8005b12:	2308      	movs	r3, #8
 8005b14:	77fb      	strb	r3, [r7, #31]
 8005b16:	e06d      	b.n	8005bf4 <UART_SetConfig+0x348>
 8005b18:	2310      	movs	r3, #16
 8005b1a:	77fb      	strb	r3, [r7, #31]
 8005b1c:	e06a      	b.n	8005bf4 <UART_SetConfig+0x348>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a1b      	ldr	r2, [pc, #108]	; (8005b90 <UART_SetConfig+0x2e4>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d138      	bne.n	8005b9a <UART_SetConfig+0x2ee>
 8005b28:	4b13      	ldr	r3, [pc, #76]	; (8005b78 <UART_SetConfig+0x2cc>)
 8005b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b2e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005b32:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005b36:	d017      	beq.n	8005b68 <UART_SetConfig+0x2bc>
 8005b38:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005b3c:	d82a      	bhi.n	8005b94 <UART_SetConfig+0x2e8>
 8005b3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b42:	d00b      	beq.n	8005b5c <UART_SetConfig+0x2b0>
 8005b44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b48:	d824      	bhi.n	8005b94 <UART_SetConfig+0x2e8>
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d003      	beq.n	8005b56 <UART_SetConfig+0x2aa>
 8005b4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b52:	d006      	beq.n	8005b62 <UART_SetConfig+0x2b6>
 8005b54:	e01e      	b.n	8005b94 <UART_SetConfig+0x2e8>
 8005b56:	2300      	movs	r3, #0
 8005b58:	77fb      	strb	r3, [r7, #31]
 8005b5a:	e04b      	b.n	8005bf4 <UART_SetConfig+0x348>
 8005b5c:	2302      	movs	r3, #2
 8005b5e:	77fb      	strb	r3, [r7, #31]
 8005b60:	e048      	b.n	8005bf4 <UART_SetConfig+0x348>
 8005b62:	2304      	movs	r3, #4
 8005b64:	77fb      	strb	r3, [r7, #31]
 8005b66:	e045      	b.n	8005bf4 <UART_SetConfig+0x348>
 8005b68:	2308      	movs	r3, #8
 8005b6a:	77fb      	strb	r3, [r7, #31]
 8005b6c:	e042      	b.n	8005bf4 <UART_SetConfig+0x348>
 8005b6e:	bf00      	nop
 8005b70:	efff69f3 	.word	0xefff69f3
 8005b74:	40011000 	.word	0x40011000
 8005b78:	40023800 	.word	0x40023800
 8005b7c:	40004400 	.word	0x40004400
 8005b80:	40004800 	.word	0x40004800
 8005b84:	40004c00 	.word	0x40004c00
 8005b88:	40005000 	.word	0x40005000
 8005b8c:	40011400 	.word	0x40011400
 8005b90:	40007800 	.word	0x40007800
 8005b94:	2310      	movs	r3, #16
 8005b96:	77fb      	strb	r3, [r7, #31]
 8005b98:	e02c      	b.n	8005bf4 <UART_SetConfig+0x348>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a72      	ldr	r2, [pc, #456]	; (8005d68 <UART_SetConfig+0x4bc>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d125      	bne.n	8005bf0 <UART_SetConfig+0x344>
 8005ba4:	4b71      	ldr	r3, [pc, #452]	; (8005d6c <UART_SetConfig+0x4c0>)
 8005ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005baa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005bae:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005bb2:	d017      	beq.n	8005be4 <UART_SetConfig+0x338>
 8005bb4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005bb8:	d817      	bhi.n	8005bea <UART_SetConfig+0x33e>
 8005bba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bbe:	d00b      	beq.n	8005bd8 <UART_SetConfig+0x32c>
 8005bc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bc4:	d811      	bhi.n	8005bea <UART_SetConfig+0x33e>
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d003      	beq.n	8005bd2 <UART_SetConfig+0x326>
 8005bca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005bce:	d006      	beq.n	8005bde <UART_SetConfig+0x332>
 8005bd0:	e00b      	b.n	8005bea <UART_SetConfig+0x33e>
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	77fb      	strb	r3, [r7, #31]
 8005bd6:	e00d      	b.n	8005bf4 <UART_SetConfig+0x348>
 8005bd8:	2302      	movs	r3, #2
 8005bda:	77fb      	strb	r3, [r7, #31]
 8005bdc:	e00a      	b.n	8005bf4 <UART_SetConfig+0x348>
 8005bde:	2304      	movs	r3, #4
 8005be0:	77fb      	strb	r3, [r7, #31]
 8005be2:	e007      	b.n	8005bf4 <UART_SetConfig+0x348>
 8005be4:	2308      	movs	r3, #8
 8005be6:	77fb      	strb	r3, [r7, #31]
 8005be8:	e004      	b.n	8005bf4 <UART_SetConfig+0x348>
 8005bea:	2310      	movs	r3, #16
 8005bec:	77fb      	strb	r3, [r7, #31]
 8005bee:	e001      	b.n	8005bf4 <UART_SetConfig+0x348>
 8005bf0:	2310      	movs	r3, #16
 8005bf2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	69db      	ldr	r3, [r3, #28]
 8005bf8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bfc:	d15b      	bne.n	8005cb6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005bfe:	7ffb      	ldrb	r3, [r7, #31]
 8005c00:	2b08      	cmp	r3, #8
 8005c02:	d828      	bhi.n	8005c56 <UART_SetConfig+0x3aa>
 8005c04:	a201      	add	r2, pc, #4	; (adr r2, 8005c0c <UART_SetConfig+0x360>)
 8005c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c0a:	bf00      	nop
 8005c0c:	08005c31 	.word	0x08005c31
 8005c10:	08005c39 	.word	0x08005c39
 8005c14:	08005c41 	.word	0x08005c41
 8005c18:	08005c57 	.word	0x08005c57
 8005c1c:	08005c47 	.word	0x08005c47
 8005c20:	08005c57 	.word	0x08005c57
 8005c24:	08005c57 	.word	0x08005c57
 8005c28:	08005c57 	.word	0x08005c57
 8005c2c:	08005c4f 	.word	0x08005c4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c30:	f7fd fe96 	bl	8003960 <HAL_RCC_GetPCLK1Freq>
 8005c34:	61b8      	str	r0, [r7, #24]
        break;
 8005c36:	e013      	b.n	8005c60 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c38:	f7fd fea6 	bl	8003988 <HAL_RCC_GetPCLK2Freq>
 8005c3c:	61b8      	str	r0, [r7, #24]
        break;
 8005c3e:	e00f      	b.n	8005c60 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c40:	4b4b      	ldr	r3, [pc, #300]	; (8005d70 <UART_SetConfig+0x4c4>)
 8005c42:	61bb      	str	r3, [r7, #24]
        break;
 8005c44:	e00c      	b.n	8005c60 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c46:	f7fd fd79 	bl	800373c <HAL_RCC_GetSysClockFreq>
 8005c4a:	61b8      	str	r0, [r7, #24]
        break;
 8005c4c:	e008      	b.n	8005c60 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c52:	61bb      	str	r3, [r7, #24]
        break;
 8005c54:	e004      	b.n	8005c60 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005c56:	2300      	movs	r3, #0
 8005c58:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	77bb      	strb	r3, [r7, #30]
        break;
 8005c5e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005c60:	69bb      	ldr	r3, [r7, #24]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d074      	beq.n	8005d50 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005c66:	69bb      	ldr	r3, [r7, #24]
 8005c68:	005a      	lsls	r2, r3, #1
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	085b      	lsrs	r3, r3, #1
 8005c70:	441a      	add	r2, r3
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c7a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	2b0f      	cmp	r3, #15
 8005c80:	d916      	bls.n	8005cb0 <UART_SetConfig+0x404>
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c88:	d212      	bcs.n	8005cb0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	f023 030f 	bic.w	r3, r3, #15
 8005c92:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	085b      	lsrs	r3, r3, #1
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	f003 0307 	and.w	r3, r3, #7
 8005c9e:	b29a      	uxth	r2, r3
 8005ca0:	89fb      	ldrh	r3, [r7, #14]
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	89fa      	ldrh	r2, [r7, #14]
 8005cac:	60da      	str	r2, [r3, #12]
 8005cae:	e04f      	b.n	8005d50 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	77bb      	strb	r3, [r7, #30]
 8005cb4:	e04c      	b.n	8005d50 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005cb6:	7ffb      	ldrb	r3, [r7, #31]
 8005cb8:	2b08      	cmp	r3, #8
 8005cba:	d828      	bhi.n	8005d0e <UART_SetConfig+0x462>
 8005cbc:	a201      	add	r2, pc, #4	; (adr r2, 8005cc4 <UART_SetConfig+0x418>)
 8005cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cc2:	bf00      	nop
 8005cc4:	08005ce9 	.word	0x08005ce9
 8005cc8:	08005cf1 	.word	0x08005cf1
 8005ccc:	08005cf9 	.word	0x08005cf9
 8005cd0:	08005d0f 	.word	0x08005d0f
 8005cd4:	08005cff 	.word	0x08005cff
 8005cd8:	08005d0f 	.word	0x08005d0f
 8005cdc:	08005d0f 	.word	0x08005d0f
 8005ce0:	08005d0f 	.word	0x08005d0f
 8005ce4:	08005d07 	.word	0x08005d07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ce8:	f7fd fe3a 	bl	8003960 <HAL_RCC_GetPCLK1Freq>
 8005cec:	61b8      	str	r0, [r7, #24]
        break;
 8005cee:	e013      	b.n	8005d18 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005cf0:	f7fd fe4a 	bl	8003988 <HAL_RCC_GetPCLK2Freq>
 8005cf4:	61b8      	str	r0, [r7, #24]
        break;
 8005cf6:	e00f      	b.n	8005d18 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005cf8:	4b1d      	ldr	r3, [pc, #116]	; (8005d70 <UART_SetConfig+0x4c4>)
 8005cfa:	61bb      	str	r3, [r7, #24]
        break;
 8005cfc:	e00c      	b.n	8005d18 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cfe:	f7fd fd1d 	bl	800373c <HAL_RCC_GetSysClockFreq>
 8005d02:	61b8      	str	r0, [r7, #24]
        break;
 8005d04:	e008      	b.n	8005d18 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d0a:	61bb      	str	r3, [r7, #24]
        break;
 8005d0c:	e004      	b.n	8005d18 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	77bb      	strb	r3, [r7, #30]
        break;
 8005d16:	bf00      	nop
    }

    if (pclk != 0U)
 8005d18:	69bb      	ldr	r3, [r7, #24]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d018      	beq.n	8005d50 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	085a      	lsrs	r2, r3, #1
 8005d24:	69bb      	ldr	r3, [r7, #24]
 8005d26:	441a      	add	r2, r3
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d30:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	2b0f      	cmp	r3, #15
 8005d36:	d909      	bls.n	8005d4c <UART_SetConfig+0x4a0>
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d3e:	d205      	bcs.n	8005d4c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	b29a      	uxth	r2, r3
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	60da      	str	r2, [r3, #12]
 8005d4a:	e001      	b.n	8005d50 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2200      	movs	r2, #0
 8005d54:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005d5c:	7fbb      	ldrb	r3, [r7, #30]
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3720      	adds	r7, #32
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}
 8005d66:	bf00      	nop
 8005d68:	40007c00 	.word	0x40007c00
 8005d6c:	40023800 	.word	0x40023800
 8005d70:	00f42400 	.word	0x00f42400

08005d74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b083      	sub	sp, #12
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d80:	f003 0301 	and.w	r3, r3, #1
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d00a      	beq.n	8005d9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	430a      	orrs	r2, r1
 8005d9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da2:	f003 0302 	and.w	r3, r3, #2
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d00a      	beq.n	8005dc0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	430a      	orrs	r2, r1
 8005dbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc4:	f003 0304 	and.w	r3, r3, #4
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d00a      	beq.n	8005de2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	430a      	orrs	r2, r1
 8005de0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de6:	f003 0308 	and.w	r3, r3, #8
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d00a      	beq.n	8005e04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	430a      	orrs	r2, r1
 8005e02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e08:	f003 0310 	and.w	r3, r3, #16
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d00a      	beq.n	8005e26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	430a      	orrs	r2, r1
 8005e24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2a:	f003 0320 	and.w	r3, r3, #32
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d00a      	beq.n	8005e48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	430a      	orrs	r2, r1
 8005e46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d01a      	beq.n	8005e8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	430a      	orrs	r2, r1
 8005e68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e72:	d10a      	bne.n	8005e8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	430a      	orrs	r2, r1
 8005e88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d00a      	beq.n	8005eac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	430a      	orrs	r2, r1
 8005eaa:	605a      	str	r2, [r3, #4]
  }
}
 8005eac:	bf00      	nop
 8005eae:	370c      	adds	r7, #12
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr

08005eb8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b086      	sub	sp, #24
 8005ebc:	af02      	add	r7, sp, #8
 8005ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005ec8:	f7fb ffa0 	bl	8001e0c <HAL_GetTick>
 8005ecc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f003 0308 	and.w	r3, r3, #8
 8005ed8:	2b08      	cmp	r3, #8
 8005eda:	d10e      	bne.n	8005efa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005edc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ee0:	9300      	str	r3, [sp, #0]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f000 f817 	bl	8005f1e <UART_WaitOnFlagUntilTimeout>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d001      	beq.n	8005efa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ef6:	2303      	movs	r3, #3
 8005ef8:	e00d      	b.n	8005f16 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2220      	movs	r2, #32
 8005efe:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2220      	movs	r2, #32
 8005f04:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005f14:	2300      	movs	r3, #0
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3710      	adds	r7, #16
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}

08005f1e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005f1e:	b580      	push	{r7, lr}
 8005f20:	b09c      	sub	sp, #112	; 0x70
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	60f8      	str	r0, [r7, #12]
 8005f26:	60b9      	str	r1, [r7, #8]
 8005f28:	603b      	str	r3, [r7, #0]
 8005f2a:	4613      	mov	r3, r2
 8005f2c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f2e:	e0a5      	b.n	800607c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f36:	f000 80a1 	beq.w	800607c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f3a:	f7fb ff67 	bl	8001e0c <HAL_GetTick>
 8005f3e:	4602      	mov	r2, r0
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	1ad3      	subs	r3, r2, r3
 8005f44:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005f46:	429a      	cmp	r2, r3
 8005f48:	d302      	bcc.n	8005f50 <UART_WaitOnFlagUntilTimeout+0x32>
 8005f4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d13e      	bne.n	8005fce <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f58:	e853 3f00 	ldrex	r3, [r3]
 8005f5c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005f5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f60:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005f64:	667b      	str	r3, [r7, #100]	; 0x64
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f70:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f72:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005f74:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005f76:	e841 2300 	strex	r3, r2, [r1]
 8005f7a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005f7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d1e6      	bne.n	8005f50 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	3308      	adds	r3, #8
 8005f88:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f8c:	e853 3f00 	ldrex	r3, [r3]
 8005f90:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f94:	f023 0301 	bic.w	r3, r3, #1
 8005f98:	663b      	str	r3, [r7, #96]	; 0x60
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	3308      	adds	r3, #8
 8005fa0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005fa2:	64ba      	str	r2, [r7, #72]	; 0x48
 8005fa4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005fa8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005faa:	e841 2300 	strex	r3, r2, [r1]
 8005fae:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005fb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d1e5      	bne.n	8005f82 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2220      	movs	r2, #32
 8005fba:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2220      	movs	r2, #32
 8005fc0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005fca:	2303      	movs	r3, #3
 8005fcc:	e067      	b.n	800609e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f003 0304 	and.w	r3, r3, #4
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d04f      	beq.n	800607c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	69db      	ldr	r3, [r3, #28]
 8005fe2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fe6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fea:	d147      	bne.n	800607c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ff4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ffe:	e853 3f00 	ldrex	r3, [r3]
 8006002:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006006:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800600a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	461a      	mov	r2, r3
 8006012:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006014:	637b      	str	r3, [r7, #52]	; 0x34
 8006016:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006018:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800601a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800601c:	e841 2300 	strex	r3, r2, [r1]
 8006020:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006024:	2b00      	cmp	r3, #0
 8006026:	d1e6      	bne.n	8005ff6 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	3308      	adds	r3, #8
 800602e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	e853 3f00 	ldrex	r3, [r3]
 8006036:	613b      	str	r3, [r7, #16]
   return(result);
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	f023 0301 	bic.w	r3, r3, #1
 800603e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	3308      	adds	r3, #8
 8006046:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006048:	623a      	str	r2, [r7, #32]
 800604a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800604c:	69f9      	ldr	r1, [r7, #28]
 800604e:	6a3a      	ldr	r2, [r7, #32]
 8006050:	e841 2300 	strex	r3, r2, [r1]
 8006054:	61bb      	str	r3, [r7, #24]
   return(result);
 8006056:	69bb      	ldr	r3, [r7, #24]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d1e5      	bne.n	8006028 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2220      	movs	r2, #32
 8006060:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2220      	movs	r2, #32
 8006066:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2220      	movs	r2, #32
 800606c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2200      	movs	r2, #0
 8006074:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006078:	2303      	movs	r3, #3
 800607a:	e010      	b.n	800609e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	69da      	ldr	r2, [r3, #28]
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	4013      	ands	r3, r2
 8006086:	68ba      	ldr	r2, [r7, #8]
 8006088:	429a      	cmp	r2, r3
 800608a:	bf0c      	ite	eq
 800608c:	2301      	moveq	r3, #1
 800608e:	2300      	movne	r3, #0
 8006090:	b2db      	uxtb	r3, r3
 8006092:	461a      	mov	r2, r3
 8006094:	79fb      	ldrb	r3, [r7, #7]
 8006096:	429a      	cmp	r2, r3
 8006098:	f43f af4a 	beq.w	8005f30 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800609c:	2300      	movs	r3, #0
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3770      	adds	r7, #112	; 0x70
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}
	...

080060a8 <__libc_init_array>:
 80060a8:	b570      	push	{r4, r5, r6, lr}
 80060aa:	4d0d      	ldr	r5, [pc, #52]	; (80060e0 <__libc_init_array+0x38>)
 80060ac:	4c0d      	ldr	r4, [pc, #52]	; (80060e4 <__libc_init_array+0x3c>)
 80060ae:	1b64      	subs	r4, r4, r5
 80060b0:	10a4      	asrs	r4, r4, #2
 80060b2:	2600      	movs	r6, #0
 80060b4:	42a6      	cmp	r6, r4
 80060b6:	d109      	bne.n	80060cc <__libc_init_array+0x24>
 80060b8:	4d0b      	ldr	r5, [pc, #44]	; (80060e8 <__libc_init_array+0x40>)
 80060ba:	4c0c      	ldr	r4, [pc, #48]	; (80060ec <__libc_init_array+0x44>)
 80060bc:	f000 f866 	bl	800618c <_init>
 80060c0:	1b64      	subs	r4, r4, r5
 80060c2:	10a4      	asrs	r4, r4, #2
 80060c4:	2600      	movs	r6, #0
 80060c6:	42a6      	cmp	r6, r4
 80060c8:	d105      	bne.n	80060d6 <__libc_init_array+0x2e>
 80060ca:	bd70      	pop	{r4, r5, r6, pc}
 80060cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80060d0:	4798      	blx	r3
 80060d2:	3601      	adds	r6, #1
 80060d4:	e7ee      	b.n	80060b4 <__libc_init_array+0xc>
 80060d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80060da:	4798      	blx	r3
 80060dc:	3601      	adds	r6, #1
 80060de:	e7f2      	b.n	80060c6 <__libc_init_array+0x1e>
 80060e0:	080061cc 	.word	0x080061cc
 80060e4:	080061cc 	.word	0x080061cc
 80060e8:	080061cc 	.word	0x080061cc
 80060ec:	080061d0 	.word	0x080061d0

080060f0 <memset>:
 80060f0:	4402      	add	r2, r0
 80060f2:	4603      	mov	r3, r0
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d100      	bne.n	80060fa <memset+0xa>
 80060f8:	4770      	bx	lr
 80060fa:	f803 1b01 	strb.w	r1, [r3], #1
 80060fe:	e7f9      	b.n	80060f4 <memset+0x4>

08006100 <round>:
 8006100:	ec51 0b10 	vmov	r0, r1, d0
 8006104:	b570      	push	{r4, r5, r6, lr}
 8006106:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800610a:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800610e:	2c13      	cmp	r4, #19
 8006110:	ee10 2a10 	vmov	r2, s0
 8006114:	460b      	mov	r3, r1
 8006116:	dc19      	bgt.n	800614c <round+0x4c>
 8006118:	2c00      	cmp	r4, #0
 800611a:	da09      	bge.n	8006130 <round+0x30>
 800611c:	3401      	adds	r4, #1
 800611e:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8006122:	d103      	bne.n	800612c <round+0x2c>
 8006124:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006128:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800612c:	2200      	movs	r2, #0
 800612e:	e028      	b.n	8006182 <round+0x82>
 8006130:	4d15      	ldr	r5, [pc, #84]	; (8006188 <round+0x88>)
 8006132:	4125      	asrs	r5, r4
 8006134:	ea01 0605 	and.w	r6, r1, r5
 8006138:	4332      	orrs	r2, r6
 800613a:	d00e      	beq.n	800615a <round+0x5a>
 800613c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006140:	fa42 f404 	asr.w	r4, r2, r4
 8006144:	4423      	add	r3, r4
 8006146:	ea23 0305 	bic.w	r3, r3, r5
 800614a:	e7ef      	b.n	800612c <round+0x2c>
 800614c:	2c33      	cmp	r4, #51	; 0x33
 800614e:	dd07      	ble.n	8006160 <round+0x60>
 8006150:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8006154:	d101      	bne.n	800615a <round+0x5a>
 8006156:	f7fa f85d 	bl	8000214 <__adddf3>
 800615a:	ec41 0b10 	vmov	d0, r0, r1
 800615e:	bd70      	pop	{r4, r5, r6, pc}
 8006160:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 8006164:	f04f 35ff 	mov.w	r5, #4294967295
 8006168:	40f5      	lsrs	r5, r6
 800616a:	4228      	tst	r0, r5
 800616c:	d0f5      	beq.n	800615a <round+0x5a>
 800616e:	2101      	movs	r1, #1
 8006170:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8006174:	fa01 f404 	lsl.w	r4, r1, r4
 8006178:	1912      	adds	r2, r2, r4
 800617a:	bf28      	it	cs
 800617c:	185b      	addcs	r3, r3, r1
 800617e:	ea22 0205 	bic.w	r2, r2, r5
 8006182:	4619      	mov	r1, r3
 8006184:	4610      	mov	r0, r2
 8006186:	e7e8      	b.n	800615a <round+0x5a>
 8006188:	000fffff 	.word	0x000fffff

0800618c <_init>:
 800618c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800618e:	bf00      	nop
 8006190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006192:	bc08      	pop	{r3}
 8006194:	469e      	mov	lr, r3
 8006196:	4770      	bx	lr

08006198 <_fini>:
 8006198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800619a:	bf00      	nop
 800619c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800619e:	bc08      	pop	{r3}
 80061a0:	469e      	mov	lr, r3
 80061a2:	4770      	bx	lr
